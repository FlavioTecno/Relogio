
Relogio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003098  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080031a4  080031a4  000131a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031fc  080031fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080031fc  080031fc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031fc  080031fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031fc  080031fc  000131fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003200  08003200  00013200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  08003210  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08003210  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a55f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b2c  00000000  00000000  0002a594  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb8  00000000  00000000  0002c0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad0  00000000  00000000  0002cc78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000170ff  00000000  00000000  0002d748  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000096bc  00000000  00000000  00044847  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008649c  00000000  00000000  0004df03  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d439f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003008  00000000  00000000  000d441c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800318c 	.word	0x0800318c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800318c 	.word	0x0800318c

0800014c <PrintRelogio>:
#endif
}	//end PrintNumber


void PrintRelogio(uint8_t tempo)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	Dez_Minuto = Minutos /10;
	buffer[1] = font[Dez_Minuto];
	Uni_Minuto = Minutos % 10;
	buffer[0] = font[Uni_Minuto];
#else
	Dez_Hora = Horas / 10;
 8000156:	4b3a      	ldr	r3, [pc, #232]	; (8000240 <PrintRelogio+0xf4>)
 8000158:	781b      	ldrb	r3, [r3, #0]
 800015a:	4a3a      	ldr	r2, [pc, #232]	; (8000244 <PrintRelogio+0xf8>)
 800015c:	fba2 2303 	umull	r2, r3, r2, r3
 8000160:	08db      	lsrs	r3, r3, #3
 8000162:	b2db      	uxtb	r3, r3
 8000164:	461a      	mov	r2, r3
 8000166:	4b38      	ldr	r3, [pc, #224]	; (8000248 <PrintRelogio+0xfc>)
 8000168:	601a      	str	r2, [r3, #0]
	buffer[5] = font[Dez_Hora];
 800016a:	4b37      	ldr	r3, [pc, #220]	; (8000248 <PrintRelogio+0xfc>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a37      	ldr	r2, [pc, #220]	; (800024c <PrintRelogio+0x100>)
 8000170:	5cd2      	ldrb	r2, [r2, r3]
 8000172:	4b37      	ldr	r3, [pc, #220]	; (8000250 <PrintRelogio+0x104>)
 8000174:	715a      	strb	r2, [r3, #5]
	Uni_Hora = Horas % 10;
 8000176:	4b32      	ldr	r3, [pc, #200]	; (8000240 <PrintRelogio+0xf4>)
 8000178:	781a      	ldrb	r2, [r3, #0]
 800017a:	4b32      	ldr	r3, [pc, #200]	; (8000244 <PrintRelogio+0xf8>)
 800017c:	fba3 1302 	umull	r1, r3, r3, r2
 8000180:	08d9      	lsrs	r1, r3, #3
 8000182:	460b      	mov	r3, r1
 8000184:	009b      	lsls	r3, r3, #2
 8000186:	440b      	add	r3, r1
 8000188:	005b      	lsls	r3, r3, #1
 800018a:	1ad3      	subs	r3, r2, r3
 800018c:	b2db      	uxtb	r3, r3
 800018e:	461a      	mov	r2, r3
 8000190:	4b30      	ldr	r3, [pc, #192]	; (8000254 <PrintRelogio+0x108>)
 8000192:	601a      	str	r2, [r3, #0]
	buffer[4] = font[Uni_Hora];
 8000194:	4b2f      	ldr	r3, [pc, #188]	; (8000254 <PrintRelogio+0x108>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a2c      	ldr	r2, [pc, #176]	; (800024c <PrintRelogio+0x100>)
 800019a:	5cd2      	ldrb	r2, [r2, r3]
 800019c:	4b2c      	ldr	r3, [pc, #176]	; (8000250 <PrintRelogio+0x104>)
 800019e:	711a      	strb	r2, [r3, #4]
	Dez_Minuto = Minutos /10;
 80001a0:	4b2d      	ldr	r3, [pc, #180]	; (8000258 <PrintRelogio+0x10c>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	4a27      	ldr	r2, [pc, #156]	; (8000244 <PrintRelogio+0xf8>)
 80001a6:	fba2 2303 	umull	r2, r3, r2, r3
 80001aa:	08db      	lsrs	r3, r3, #3
 80001ac:	b2db      	uxtb	r3, r3
 80001ae:	461a      	mov	r2, r3
 80001b0:	4b2a      	ldr	r3, [pc, #168]	; (800025c <PrintRelogio+0x110>)
 80001b2:	601a      	str	r2, [r3, #0]
	buffer[3] = font[Dez_Minuto];
 80001b4:	4b29      	ldr	r3, [pc, #164]	; (800025c <PrintRelogio+0x110>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a24      	ldr	r2, [pc, #144]	; (800024c <PrintRelogio+0x100>)
 80001ba:	5cd2      	ldrb	r2, [r2, r3]
 80001bc:	4b24      	ldr	r3, [pc, #144]	; (8000250 <PrintRelogio+0x104>)
 80001be:	70da      	strb	r2, [r3, #3]
	Uni_Minuto = Minutos % 10;
 80001c0:	4b25      	ldr	r3, [pc, #148]	; (8000258 <PrintRelogio+0x10c>)
 80001c2:	781a      	ldrb	r2, [r3, #0]
 80001c4:	4b1f      	ldr	r3, [pc, #124]	; (8000244 <PrintRelogio+0xf8>)
 80001c6:	fba3 1302 	umull	r1, r3, r3, r2
 80001ca:	08d9      	lsrs	r1, r3, #3
 80001cc:	460b      	mov	r3, r1
 80001ce:	009b      	lsls	r3, r3, #2
 80001d0:	440b      	add	r3, r1
 80001d2:	005b      	lsls	r3, r3, #1
 80001d4:	1ad3      	subs	r3, r2, r3
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	461a      	mov	r2, r3
 80001da:	4b21      	ldr	r3, [pc, #132]	; (8000260 <PrintRelogio+0x114>)
 80001dc:	601a      	str	r2, [r3, #0]
	buffer[2] = font[Uni_Minuto];
 80001de:	4b20      	ldr	r3, [pc, #128]	; (8000260 <PrintRelogio+0x114>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a1a      	ldr	r2, [pc, #104]	; (800024c <PrintRelogio+0x100>)
 80001e4:	5cd2      	ldrb	r2, [r2, r3]
 80001e6:	4b1a      	ldr	r3, [pc, #104]	; (8000250 <PrintRelogio+0x104>)
 80001e8:	709a      	strb	r2, [r3, #2]
	Dez_Segundos = Segundos /10;
 80001ea:	4b1e      	ldr	r3, [pc, #120]	; (8000264 <PrintRelogio+0x118>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	4a15      	ldr	r2, [pc, #84]	; (8000244 <PrintRelogio+0xf8>)
 80001f0:	fba2 2303 	umull	r2, r3, r2, r3
 80001f4:	08db      	lsrs	r3, r3, #3
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	461a      	mov	r2, r3
 80001fa:	4b1b      	ldr	r3, [pc, #108]	; (8000268 <PrintRelogio+0x11c>)
 80001fc:	601a      	str	r2, [r3, #0]
	buffer[1] = font[Dez_Segundos];
 80001fe:	4b1a      	ldr	r3, [pc, #104]	; (8000268 <PrintRelogio+0x11c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a12      	ldr	r2, [pc, #72]	; (800024c <PrintRelogio+0x100>)
 8000204:	5cd2      	ldrb	r2, [r2, r3]
 8000206:	4b12      	ldr	r3, [pc, #72]	; (8000250 <PrintRelogio+0x104>)
 8000208:	705a      	strb	r2, [r3, #1]
	Uni_Segundos = Segundos % 10;
 800020a:	4b16      	ldr	r3, [pc, #88]	; (8000264 <PrintRelogio+0x118>)
 800020c:	781a      	ldrb	r2, [r3, #0]
 800020e:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <PrintRelogio+0xf8>)
 8000210:	fba3 1302 	umull	r1, r3, r3, r2
 8000214:	08d9      	lsrs	r1, r3, #3
 8000216:	460b      	mov	r3, r1
 8000218:	009b      	lsls	r3, r3, #2
 800021a:	440b      	add	r3, r1
 800021c:	005b      	lsls	r3, r3, #1
 800021e:	1ad3      	subs	r3, r2, r3
 8000220:	b2db      	uxtb	r3, r3
 8000222:	461a      	mov	r2, r3
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <PrintRelogio+0x120>)
 8000226:	601a      	str	r2, [r3, #0]
	buffer[0] = font[Uni_Segundos];
 8000228:	4b10      	ldr	r3, [pc, #64]	; (800026c <PrintRelogio+0x120>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a07      	ldr	r2, [pc, #28]	; (800024c <PrintRelogio+0x100>)
 800022e:	5cd2      	ldrb	r2, [r2, r3]
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <PrintRelogio+0x104>)
 8000232:	701a      	strb	r2, [r3, #0]
#endif
}
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	200000c8 	.word	0x200000c8
 8000244:	cccccccd 	.word	0xcccccccd
 8000248:	20000028 	.word	0x20000028
 800024c:	080031cc 	.word	0x080031cc
 8000250:	20000058 	.word	0x20000058
 8000254:	2000002c 	.word	0x2000002c
 8000258:	20000044 	.word	0x20000044
 800025c:	20000030 	.word	0x20000030
 8000260:	20000034 	.word	0x20000034
 8000264:	2000005f 	.word	0x2000005f
 8000268:	20000038 	.word	0x20000038
 800026c:	2000003c 	.word	0x2000003c

08000270 <MenuRelogio>:

void MenuRelogio(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	while (BotSet == 0) {
 8000274:	e043      	b.n	80002fe <MenuRelogio+0x8e>
		buffer[5] = 0x37;
 8000276:	4b25      	ldr	r3, [pc, #148]	; (800030c <MenuRelogio+0x9c>)
 8000278:	2237      	movs	r2, #55	; 0x37
 800027a:	715a      	strb	r2, [r3, #5]
		buffer[4] = 0x79;
 800027c:	4b23      	ldr	r3, [pc, #140]	; (800030c <MenuRelogio+0x9c>)
 800027e:	2279      	movs	r2, #121	; 0x79
 8000280:	711a      	strb	r2, [r3, #4]
		buffer[3] = 0X54;
 8000282:	4b22      	ldr	r3, [pc, #136]	; (800030c <MenuRelogio+0x9c>)
 8000284:	2254      	movs	r2, #84	; 0x54
 8000286:	70da      	strb	r2, [r3, #3]
		buffer[2] = 0X1C;
 8000288:	4b20      	ldr	r3, [pc, #128]	; (800030c <MenuRelogio+0x9c>)
 800028a:	221c      	movs	r2, #28
 800028c:	709a      	strb	r2, [r3, #2]
		buffer[1] = 0x00;
 800028e:	4b1f      	ldr	r3, [pc, #124]	; (800030c <MenuRelogio+0x9c>)
 8000290:	2200      	movs	r2, #0
 8000292:	705a      	strb	r2, [r3, #1]
		buffer[0] = 0x00;
 8000294:	4b1d      	ldr	r3, [pc, #116]	; (800030c <MenuRelogio+0x9c>)
 8000296:	2200      	movs	r2, #0
 8000298:	701a      	strb	r2, [r3, #0]

		BotInc = HAL_GPIO_ReadPin(Bot_Inc_GPIO_Port, Bot_Inc_Pin);
 800029a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800029e:	481c      	ldr	r0, [pc, #112]	; (8000310 <MenuRelogio+0xa0>)
 80002a0:	f000 ffb8 	bl	8001214 <HAL_GPIO_ReadPin>
 80002a4:	4603      	mov	r3, r0
 80002a6:	461a      	mov	r2, r3
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <MenuRelogio+0xa4>)
 80002aa:	601a      	str	r2, [r3, #0]
		if (BotInc == 0){
 80002ac:	4b19      	ldr	r3, [pc, #100]	; (8000314 <MenuRelogio+0xa4>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d10b      	bne.n	80002cc <MenuRelogio+0x5c>
			HAL_Delay(20);
 80002b4:	2014      	movs	r0, #20
 80002b6:	f000 fd23 	bl	8000d00 <HAL_Delay>
			buffer[6] = 0x80;	//liga leds
 80002ba:	4b14      	ldr	r3, [pc, #80]	; (800030c <MenuRelogio+0x9c>)
 80002bc:	2280      	movs	r2, #128	; 0x80
 80002be:	719a      	strb	r2, [r3, #6]
			BotInc = 1;
 80002c0:	4b14      	ldr	r3, [pc, #80]	; (8000314 <MenuRelogio+0xa4>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	601a      	str	r2, [r3, #0]
			BotSet = 1;
 80002c6:	4b14      	ldr	r3, [pc, #80]	; (8000318 <MenuRelogio+0xa8>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	601a      	str	r2, [r3, #0]
		}

		BotDec = HAL_GPIO_ReadPin(Bot_Dec_GPIO_Port, Bot_Dec_Pin);
 80002cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002d0:	480f      	ldr	r0, [pc, #60]	; (8000310 <MenuRelogio+0xa0>)
 80002d2:	f000 ff9f 	bl	8001214 <HAL_GPIO_ReadPin>
 80002d6:	4603      	mov	r3, r0
 80002d8:	461a      	mov	r2, r3
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <MenuRelogio+0xac>)
 80002dc:	601a      	str	r2, [r3, #0]
		if (BotDec == 0) {
 80002de:	4b0f      	ldr	r3, [pc, #60]	; (800031c <MenuRelogio+0xac>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d10b      	bne.n	80002fe <MenuRelogio+0x8e>
			HAL_Delay(20);
 80002e6:	2014      	movs	r0, #20
 80002e8:	f000 fd0a 	bl	8000d00 <HAL_Delay>
			buffer[6] = 0x00;	//desliga leds
 80002ec:	4b07      	ldr	r3, [pc, #28]	; (800030c <MenuRelogio+0x9c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	719a      	strb	r2, [r3, #6]
		    BotDec = 1;
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <MenuRelogio+0xac>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	601a      	str	r2, [r3, #0]
		    BotSet = 1;
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <MenuRelogio+0xa8>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	601a      	str	r2, [r3, #0]
	while (BotSet == 0) {
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <MenuRelogio+0xa8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d0b7      	beq.n	8000276 <MenuRelogio+0x6>
		}
	}
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000058 	.word	0x20000058
 8000310:	40010800 	.word	0x40010800
 8000314:	20000054 	.word	0x20000054
 8000318:	2000004c 	.word	0x2000004c
 800031c:	20000060 	.word	0x20000060

08000320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000324:	f000 fc8a 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000328:	f000 f85a 	bl	80003e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032c:	f000 f94c 	bl	80005c8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000330:	f000 f8b4 	bl	800049c <MX_RTC_Init>
  MX_TIM2_Init();
 8000334:	f000 f8fc 	bl	8000530 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //inicializa timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8000338:	481f      	ldr	r0, [pc, #124]	; (80003b8 <main+0x98>)
 800033a:	f002 fb55 	bl	80029e8 <HAL_TIM_Base_Start_IT>

  HAL_RTC_Init(&hrtc);
 800033e:	481f      	ldr	r0, [pc, #124]	; (80003bc <main+0x9c>)
 8000340:	f001 fd36 	bl	8001db0 <HAL_RTC_Init>
  HAL_RTCEx_SetSecond_IT(&hrtc);
 8000344:	481d      	ldr	r0, [pc, #116]	; (80003bc <main+0x9c>)
 8000346:	f002 fa91 	bl	800286c <HAL_RTCEx_SetSecond_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  BotSet = 1;
 800034a:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <main+0xa0>)
 800034c:	2201      	movs	r2, #1
 800034e:	601a      	str	r2, [r3, #0]
	  BotInc = 1;
 8000350:	4b1c      	ldr	r3, [pc, #112]	; (80003c4 <main+0xa4>)
 8000352:	2201      	movs	r2, #1
 8000354:	601a      	str	r2, [r3, #0]
	  BotDec = 1;
 8000356:	4b1c      	ldr	r3, [pc, #112]	; (80003c8 <main+0xa8>)
 8000358:	2201      	movs	r2, #1
 800035a:	601a      	str	r2, [r3, #0]
	  HAL_Delay(500);
#endif

#else

	  if(HAL_GPIO_ReadPin(Bot_Set_GPIO_Port, Bot_Set_Pin) == GPIO_PIN_RESET){			  //Verifica botao menu
 800035c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000360:	481a      	ldr	r0, [pc, #104]	; (80003cc <main+0xac>)
 8000362:	f000 ff57 	bl	8001214 <HAL_GPIO_ReadPin>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d104      	bne.n	8000376 <main+0x56>
		  BotSet = 0;
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <main+0xa0>)
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
		  MenuRelogio();
 8000372:	f7ff ff7d 	bl	8000270 <MenuRelogio>
	  }


	  HAL_RTC_GetTime(&hrtc, &clkTime, RTC_FORMAT_BIN);
 8000376:	2200      	movs	r2, #0
 8000378:	4915      	ldr	r1, [pc, #84]	; (80003d0 <main+0xb0>)
 800037a:	4810      	ldr	r0, [pc, #64]	; (80003bc <main+0x9c>)
 800037c:	f001 fe46 	bl	800200c <HAL_RTC_GetTime>

	  Horas = clkTime.Hours;
 8000380:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <main+0xb0>)
 8000382:	781a      	ldrb	r2, [r3, #0]
 8000384:	4b13      	ldr	r3, [pc, #76]	; (80003d4 <main+0xb4>)
 8000386:	701a      	strb	r2, [r3, #0]
	  Minutos = clkTime.Minutes;
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <main+0xb0>)
 800038a:	785a      	ldrb	r2, [r3, #1]
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <main+0xb8>)
 800038e:	701a      	strb	r2, [r3, #0]
#if ComSeg
	  Segundos = clkTime.Seconds;
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <main+0xb0>)
 8000392:	789a      	ldrb	r2, [r3, #2]
 8000394:	4b11      	ldr	r3, [pc, #68]	; (80003dc <main+0xbc>)
 8000396:	701a      	strb	r2, [r3, #0]
	  PrintRelogio(Segundos);
 8000398:	4b10      	ldr	r3, [pc, #64]	; (80003dc <main+0xbc>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff fed5 	bl	800014c <PrintRelogio>
#endif
	  PrintRelogio(Minutos);
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <main+0xb8>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff fed0 	bl	800014c <PrintRelogio>
	  PrintRelogio(Horas);
 80003ac:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <main+0xb4>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff fecb 	bl	800014c <PrintRelogio>
	  BotSet = 1;
 80003b6:	e7c8      	b.n	800034a <main+0x2a>
 80003b8:	20000080 	.word	0x20000080
 80003bc:	20000064 	.word	0x20000064
 80003c0:	2000004c 	.word	0x2000004c
 80003c4:	20000054 	.word	0x20000054
 80003c8:	20000060 	.word	0x20000060
 80003cc:	40010800 	.word	0x40010800
 80003d0:	20000050 	.word	0x20000050
 80003d4:	200000c8 	.word	0x200000c8
 80003d8:	20000044 	.word	0x20000044
 80003dc:	2000005f 	.word	0x2000005f

080003e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b094      	sub	sp, #80	; 0x50
 80003e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ea:	2228      	movs	r2, #40	; 0x28
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f002 fec4 	bl	800317c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	f107 0314 	add.w	r3, r7, #20
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000410:	2305      	movs	r3, #5
 8000412:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000418:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800041e:	2301      	movs	r3, #1
 8000420:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000422:	2301      	movs	r3, #1
 8000424:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000426:	2302      	movs	r3, #2
 8000428:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800042a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800042e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000430:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000434:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800043a:	4618      	mov	r0, r3
 800043c:	f000 ff3e 	bl	80012bc <HAL_RCC_OscConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000446:	f000 f951 	bl	80006ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044a:	230f      	movs	r3, #15
 800044c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044e:	2302      	movs	r3, #2
 8000450:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800045a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000460:	f107 0314 	add.w	r3, r7, #20
 8000464:	2102      	movs	r1, #2
 8000466:	4618      	mov	r0, r3
 8000468:	f001 f9a8 	bl	80017bc <HAL_RCC_ClockConfig>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000472:	f000 f93b 	bl	80006ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000476:	2301      	movs	r3, #1
 8000478:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800047a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800047e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	4618      	mov	r0, r3
 8000484:	f001 fb22 	bl	8001acc <HAL_RCCEx_PeriphCLKConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800048e:	f000 f92d 	bl	80006ec <Error_Handler>
  }
}
 8000492:	bf00      	nop
 8000494:	3750      	adds	r7, #80	; 0x50
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2100      	movs	r1, #0
 80004a6:	460a      	mov	r2, r1
 80004a8:	801a      	strh	r2, [r3, #0]
 80004aa:	460a      	mov	r2, r1
 80004ac:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80004ae:	2300      	movs	r3, #0
 80004b0:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80004b2:	4b1d      	ldr	r3, [pc, #116]	; (8000528 <MX_RTC_Init+0x8c>)
 80004b4:	4a1d      	ldr	r2, [pc, #116]	; (800052c <MX_RTC_Init+0x90>)
 80004b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <MX_RTC_Init+0x8c>)
 80004ba:	f04f 32ff 	mov.w	r2, #4294967295
 80004be:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80004c0:	4b19      	ldr	r3, [pc, #100]	; (8000528 <MX_RTC_Init+0x8c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80004c6:	4818      	ldr	r0, [pc, #96]	; (8000528 <MX_RTC_Init+0x8c>)
 80004c8:	f001 fc72 	bl	8001db0 <HAL_RTC_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80004d2:	f000 f90b 	bl	80006ec <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80004da:	2300      	movs	r3, #0
 80004dc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80004de:	2300      	movs	r3, #0
 80004e0:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2201      	movs	r2, #1
 80004e6:	4619      	mov	r1, r3
 80004e8:	480f      	ldr	r0, [pc, #60]	; (8000528 <MX_RTC_Init+0x8c>)
 80004ea:	f001 fcf7 	bl	8001edc <HAL_RTC_SetTime>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80004f4:	f000 f8fa 	bl	80006ec <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80004f8:	2300      	movs	r3, #0
 80004fa:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80004fc:	2301      	movs	r3, #1
 80004fe:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000500:	2301      	movs	r3, #1
 8000502:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000504:	2300      	movs	r3, #0
 8000506:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000508:	463b      	mov	r3, r7
 800050a:	2201      	movs	r2, #1
 800050c:	4619      	mov	r1, r3
 800050e:	4806      	ldr	r0, [pc, #24]	; (8000528 <MX_RTC_Init+0x8c>)
 8000510:	f001 fe54 	bl	80021bc <HAL_RTC_SetDate>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800051a:	f000 f8e7 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000064 	.word	0x20000064
 800052c:	40002800 	.word	0x40002800

08000530 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000536:	f107 0308 	add.w	r3, r7, #8
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800054c:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <MX_TIM2_Init+0x94>)
 800054e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000552:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000554:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <MX_TIM2_Init+0x94>)
 8000556:	2247      	movs	r2, #71	; 0x47
 8000558:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800055a:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <MX_TIM2_Init+0x94>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000560:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <MX_TIM2_Init+0x94>)
 8000562:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000566:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000568:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <MX_TIM2_Init+0x94>)
 800056a:	2200      	movs	r2, #0
 800056c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <MX_TIM2_Init+0x94>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000574:	4813      	ldr	r0, [pc, #76]	; (80005c4 <MX_TIM2_Init+0x94>)
 8000576:	f002 f9e8 	bl	800294a <HAL_TIM_Base_Init>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000580:	f000 f8b4 	bl	80006ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000588:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800058a:	f107 0308 	add.w	r3, r7, #8
 800058e:	4619      	mov	r1, r3
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <MX_TIM2_Init+0x94>)
 8000592:	f002 fb83 	bl	8002c9c <HAL_TIM_ConfigClockSource>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800059c:	f000 f8a6 	bl	80006ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a0:	2300      	movs	r3, #0
 80005a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005a8:	463b      	mov	r3, r7
 80005aa:	4619      	mov	r1, r3
 80005ac:	4805      	ldr	r0, [pc, #20]	; (80005c4 <MX_TIM2_Init+0x94>)
 80005ae:	f002 fd51 	bl	8003054 <HAL_TIMEx_MasterConfigSynchronization>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80005b8:	f000 f898 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005bc:	bf00      	nop
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000080 	.word	0x20000080

080005c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <MX_GPIO_Init+0x114>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a3e      	ldr	r2, [pc, #248]	; (80006dc <MX_GPIO_Init+0x114>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b3c      	ldr	r3, [pc, #240]	; (80006dc <MX_GPIO_Init+0x114>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0310 	and.w	r3, r3, #16
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f4:	4b39      	ldr	r3, [pc, #228]	; (80006dc <MX_GPIO_Init+0x114>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a38      	ldr	r2, [pc, #224]	; (80006dc <MX_GPIO_Init+0x114>)
 80005fa:	f043 0320 	orr.w	r3, r3, #32
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b36      	ldr	r3, [pc, #216]	; (80006dc <MX_GPIO_Init+0x114>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0320 	and.w	r3, r3, #32
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <MX_GPIO_Init+0x114>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <MX_GPIO_Init+0x114>)
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <MX_GPIO_Init+0x114>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000624:	4b2d      	ldr	r3, [pc, #180]	; (80006dc <MX_GPIO_Init+0x114>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a2c      	ldr	r2, [pc, #176]	; (80006dc <MX_GPIO_Init+0x114>)
 800062a:	f043 0308 	orr.w	r3, r3, #8
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <MX_GPIO_Init+0x114>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0308 	and.w	r3, r3, #8
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TesteLed_GPIO_Port, TesteLed_Pin, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	4827      	ldr	r0, [pc, #156]	; (80006e0 <MX_GPIO_Init+0x118>)
 8000644:	f000 fdfd 	bl	8001242 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEGA_Pin|SEGB_Pin|SEGC_Pin|SEGD_Pin
 8000648:	2200      	movs	r2, #0
 800064a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800064e:	4825      	ldr	r0, [pc, #148]	; (80006e4 <MX_GPIO_Init+0x11c>)
 8000650:	f000 fdf7 	bl	8001242 <HAL_GPIO_WritePin>
                          |SEGE_Pin|SEGF_Pin|SEGG_Pin|SEGP_Pin
                          |DIG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIG_1_Pin|DIG_2_Pin|DIG_3_Pin|DIG_4_Pin
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800065a:	4823      	ldr	r0, [pc, #140]	; (80006e8 <MX_GPIO_Init+0x120>)
 800065c:	f000 fdf1 	bl	8001242 <HAL_GPIO_WritePin>
                          |DIG_LED_Pin|DIG_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : TesteLed_Pin */
  GPIO_InitStruct.Pin = TesteLed_Pin;
 8000660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2302      	movs	r3, #2
 8000670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TesteLed_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	4619      	mov	r1, r3
 8000678:	4819      	ldr	r0, [pc, #100]	; (80006e0 <MX_GPIO_Init+0x118>)
 800067a:	f000 fc71 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEGA_Pin SEGB_Pin SEGC_Pin SEGD_Pin
                           SEGE_Pin SEGF_Pin SEGG_Pin SEGP_Pin
                           DIG_6_Pin */
  GPIO_InitStruct.Pin = SEGA_Pin|SEGB_Pin|SEGC_Pin|SEGD_Pin
 800067e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000682:	613b      	str	r3, [r7, #16]
                          |SEGE_Pin|SEGF_Pin|SEGG_Pin|SEGP_Pin
                          |DIG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2302      	movs	r3, #2
 800068e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4619      	mov	r1, r3
 8000696:	4813      	ldr	r0, [pc, #76]	; (80006e4 <MX_GPIO_Init+0x11c>)
 8000698:	f000 fc62 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG_1_Pin DIG_2_Pin DIG_3_Pin DIG_4_Pin
                           DIG_LED_Pin DIG_5_Pin */
  GPIO_InitStruct.Pin = DIG_1_Pin|DIG_2_Pin|DIG_3_Pin|DIG_4_Pin
 800069c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80006a0:	613b      	str	r3, [r7, #16]
                          |DIG_LED_Pin|DIG_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	4619      	mov	r1, r3
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <MX_GPIO_Init+0x120>)
 80006b6:	f000 fc53 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : Bot_Set_Pin Bot_Inc_Pin Bot_Dec_Pin */
  GPIO_InitStruct.Pin = Bot_Set_Pin|Bot_Inc_Pin|Bot_Dec_Pin;
 80006ba:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80006be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	4619      	mov	r1, r3
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_GPIO_Init+0x11c>)
 80006d0:	f000 fc46 	bl	8000f60 <HAL_GPIO_Init>

}
 80006d4:	bf00      	nop
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40011000 	.word	0x40011000
 80006e4:	40010800 	.word	0x40010800
 80006e8:	40010c00 	.word	0x40010c00

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_MspInit+0x5c>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4a14      	ldr	r2, [pc, #80]	; (8000754 <HAL_MspInit+0x5c>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6193      	str	r3, [r2, #24]
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_MspInit+0x5c>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_MspInit+0x5c>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <HAL_MspInit+0x5c>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <HAL_MspInit+0x5c>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_MspInit+0x60>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <HAL_MspInit+0x60>)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	40021000 	.word	0x40021000
 8000758:	40010000 	.word	0x40010000

0800075c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0f      	ldr	r2, [pc, #60]	; (80007a8 <HAL_RTC_MspInit+0x4c>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d118      	bne.n	80007a0 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800076e:	f000 fd99 	bl	80012a4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <HAL_RTC_MspInit+0x50>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <HAL_RTC_MspInit+0x50>)
 8000778:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800077c:	61d3      	str	r3, [r2, #28]
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <HAL_RTC_MspInit+0x50>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_RTC_MspInit+0x54>)
 800078c:	2201      	movs	r2, #1
 800078e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	2003      	movs	r0, #3
 8000796:	f000 fbac 	bl	8000ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800079a:	2003      	movs	r0, #3
 800079c:	f000 fbc5 	bl	8000f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40002800 	.word	0x40002800
 80007ac:	40021000 	.word	0x40021000
 80007b0:	4242043c 	.word	0x4242043c

080007b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007c4:	d113      	bne.n	80007ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_TIM_Base_MspInit+0x44>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <HAL_TIM_Base_MspInit+0x44>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_TIM_Base_MspInit+0x44>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	201c      	movs	r0, #28
 80007e4:	f000 fb85 	bl	8000ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007e8:	201c      	movs	r0, #28
 80007ea:	f000 fb9e 	bl	8000f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <HardFault_Handler+0x4>

0800080e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <MemManage_Handler+0x4>

08000814 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <BusFault_Handler+0x4>

0800081a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <UsageFault_Handler+0x4>

08000820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000848:	f000 fa3e 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <RTC_IRQHandler+0x10>)
 8000856:	f002 f832 	bl	80028be <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000064 	.word	0x20000064

08000864 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000868:	48c1      	ldr	r0, [pc, #772]	; (8000b70 <TIM2_IRQHandler+0x30c>)
 800086a:	f002 f90f 	bl	8002a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  static uint8_t digit=0;

  if (testeok == 1){
 800086e:	4bc1      	ldr	r3, [pc, #772]	; (8000b74 <TIM2_IRQHandler+0x310>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d123      	bne.n	80008be <TIM2_IRQHandler+0x5a>
	  HAL_GPIO_TogglePin(DIG_LED_GPIO_Port, DIG_LED_Pin);
 8000876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800087a:	48bf      	ldr	r0, [pc, #764]	; (8000b78 <TIM2_IRQHandler+0x314>)
 800087c:	f000 fcf9 	bl	8001272 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DIG_1_GPIO_Port, DIG_1_Pin);
 8000880:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000884:	48bc      	ldr	r0, [pc, #752]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000886:	f000 fcf4 	bl	8001272 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DIG_2_GPIO_Port, DIG_2_Pin);
 800088a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800088e:	48ba      	ldr	r0, [pc, #744]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000890:	f000 fcef 	bl	8001272 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DIG_3_GPIO_Port, DIG_3_Pin);
 8000894:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000898:	48b7      	ldr	r0, [pc, #732]	; (8000b78 <TIM2_IRQHandler+0x314>)
 800089a:	f000 fcea 	bl	8001272 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DIG_4_GPIO_Port, DIG_4_Pin);
 800089e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a2:	48b5      	ldr	r0, [pc, #724]	; (8000b78 <TIM2_IRQHandler+0x314>)
 80008a4:	f000 fce5 	bl	8001272 <HAL_GPIO_TogglePin>
#if ComSeg
	  HAL_GPIO_TogglePin(DIG_5_GPIO_Port, DIG_5_Pin);
 80008a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ac:	48b2      	ldr	r0, [pc, #712]	; (8000b78 <TIM2_IRQHandler+0x314>)
 80008ae:	f000 fce0 	bl	8001272 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DIG_6_GPIO_Port, DIG_6_Pin);
 80008b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b6:	48b1      	ldr	r0, [pc, #708]	; (8000b7c <TIM2_IRQHandler+0x318>)
 80008b8:	f000 fcdb 	bl	8001272 <HAL_GPIO_TogglePin>
		  digit = 0;
		}
  }

  /* USER CODE END TIM2_IRQn 1 */
}
 80008bc:	e156      	b.n	8000b6c <TIM2_IRQHandler+0x308>
	 GPIOA -> ODR = buffer[digit];
 80008be:	4bb0      	ldr	r3, [pc, #704]	; (8000b80 <TIM2_IRQHandler+0x31c>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	4baf      	ldr	r3, [pc, #700]	; (8000b84 <TIM2_IRQHandler+0x320>)
 80008c6:	5c9a      	ldrb	r2, [r3, r2]
 80008c8:	4bac      	ldr	r3, [pc, #688]	; (8000b7c <TIM2_IRQHandler+0x318>)
 80008ca:	60da      	str	r2, [r3, #12]
		switch(digit){
 80008cc:	4bac      	ldr	r3, [pc, #688]	; (8000b80 <TIM2_IRQHandler+0x31c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b06      	cmp	r3, #6
 80008d2:	f200 813e 	bhi.w	8000b52 <TIM2_IRQHandler+0x2ee>
 80008d6:	a201      	add	r2, pc, #4	; (adr r2, 80008dc <TIM2_IRQHandler+0x78>)
 80008d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008dc:	080008f9 	.word	0x080008f9
 80008e0:	0800094f 	.word	0x0800094f
 80008e4:	080009a5 	.word	0x080009a5
 80008e8:	080009fb 	.word	0x080009fb
 80008ec:	08000a51 	.word	0x08000a51
 80008f0:	08000aa7 	.word	0x08000aa7
 80008f4:	08000afd 	.word	0x08000afd
			HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008fe:	489e      	ldr	r0, [pc, #632]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000900:	f000 fc9f 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800090a:	489b      	ldr	r0, [pc, #620]	; (8000b78 <TIM2_IRQHandler+0x314>)
 800090c:	f000 fc99 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000916:	4898      	ldr	r0, [pc, #608]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000918:	f000 fc93 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000922:	4895      	ldr	r0, [pc, #596]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000924:	f000 fc8d 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800092e:	4892      	ldr	r0, [pc, #584]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000930:	f000 fc87 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093a:	4890      	ldr	r0, [pc, #576]	; (8000b7c <TIM2_IRQHandler+0x318>)
 800093c:	f000 fc81 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000946:	488c      	ldr	r0, [pc, #560]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000948:	f000 fc7b 	bl	8001242 <HAL_GPIO_WritePin>
			break;
 800094c:	e101      	b.n	8000b52 <TIM2_IRQHandler+0x2ee>
			HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000954:	4888      	ldr	r0, [pc, #544]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000956:	f000 fc74 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000960:	4885      	ldr	r0, [pc, #532]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000962:	f000 fc6e 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096c:	4882      	ldr	r0, [pc, #520]	; (8000b78 <TIM2_IRQHandler+0x314>)
 800096e:	f000 fc68 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000978:	487f      	ldr	r0, [pc, #508]	; (8000b78 <TIM2_IRQHandler+0x314>)
 800097a:	f000 fc62 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000984:	487c      	ldr	r0, [pc, #496]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000986:	f000 fc5c 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000990:	487a      	ldr	r0, [pc, #488]	; (8000b7c <TIM2_IRQHandler+0x318>)
 8000992:	f000 fc56 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800099c:	4876      	ldr	r0, [pc, #472]	; (8000b78 <TIM2_IRQHandler+0x314>)
 800099e:	f000 fc50 	bl	8001242 <HAL_GPIO_WritePin>
			break;
 80009a2:	e0d6      	b.n	8000b52 <TIM2_IRQHandler+0x2ee>
			HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009aa:	4873      	ldr	r0, [pc, #460]	; (8000b78 <TIM2_IRQHandler+0x314>)
 80009ac:	f000 fc49 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b6:	4870      	ldr	r0, [pc, #448]	; (8000b78 <TIM2_IRQHandler+0x314>)
 80009b8:	f000 fc43 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c2:	486d      	ldr	r0, [pc, #436]	; (8000b78 <TIM2_IRQHandler+0x314>)
 80009c4:	f000 fc3d 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ce:	486a      	ldr	r0, [pc, #424]	; (8000b78 <TIM2_IRQHandler+0x314>)
 80009d0:	f000 fc37 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009da:	4867      	ldr	r0, [pc, #412]	; (8000b78 <TIM2_IRQHandler+0x314>)
 80009dc:	f000 fc31 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e6:	4865      	ldr	r0, [pc, #404]	; (8000b7c <TIM2_IRQHandler+0x318>)
 80009e8:	f000 fc2b 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f2:	4861      	ldr	r0, [pc, #388]	; (8000b78 <TIM2_IRQHandler+0x314>)
 80009f4:	f000 fc25 	bl	8001242 <HAL_GPIO_WritePin>
			break;
 80009f8:	e0ab      	b.n	8000b52 <TIM2_IRQHandler+0x2ee>
			HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a00:	485d      	ldr	r0, [pc, #372]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000a02:	f000 fc1e 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a0c:	485a      	ldr	r0, [pc, #360]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000a0e:	f000 fc18 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a18:	4857      	ldr	r0, [pc, #348]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000a1a:	f000 fc12 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a24:	4854      	ldr	r0, [pc, #336]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000a26:	f000 fc0c 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a30:	4851      	ldr	r0, [pc, #324]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000a32:	f000 fc06 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3c:	484f      	ldr	r0, [pc, #316]	; (8000b7c <TIM2_IRQHandler+0x318>)
 8000a3e:	f000 fc00 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a48:	484b      	ldr	r0, [pc, #300]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000a4a:	f000 fbfa 	bl	8001242 <HAL_GPIO_WritePin>
			break;
 8000a4e:	e080      	b.n	8000b52 <TIM2_IRQHandler+0x2ee>
			HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a56:	4848      	ldr	r0, [pc, #288]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000a58:	f000 fbf3 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a62:	4845      	ldr	r0, [pc, #276]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000a64:	f000 fbed 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6e:	4842      	ldr	r0, [pc, #264]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000a70:	f000 fbe7 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7a:	483f      	ldr	r0, [pc, #252]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000a7c:	f000 fbe1 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a86:	483c      	ldr	r0, [pc, #240]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000a88:	f000 fbdb 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a92:	483a      	ldr	r0, [pc, #232]	; (8000b7c <TIM2_IRQHandler+0x318>)
 8000a94:	f000 fbd5 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a9e:	4836      	ldr	r0, [pc, #216]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000aa0:	f000 fbcf 	bl	8001242 <HAL_GPIO_WritePin>
			break;
 8000aa4:	e055      	b.n	8000b52 <TIM2_IRQHandler+0x2ee>
			HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aac:	4832      	ldr	r0, [pc, #200]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000aae:	f000 fbc8 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab8:	482f      	ldr	r0, [pc, #188]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000aba:	f000 fbc2 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac4:	482c      	ldr	r0, [pc, #176]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000ac6:	f000 fbbc 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad0:	4829      	ldr	r0, [pc, #164]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000ad2:	f000 fbb6 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000adc:	4826      	ldr	r0, [pc, #152]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000ade:	f000 fbb0 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae8:	4824      	ldr	r0, [pc, #144]	; (8000b7c <TIM2_IRQHandler+0x318>)
 8000aea:	f000 fbaa 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af4:	4820      	ldr	r0, [pc, #128]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000af6:	f000 fba4 	bl	8001242 <HAL_GPIO_WritePin>
			break;
 8000afa:	e02a      	b.n	8000b52 <TIM2_IRQHandler+0x2ee>
			HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b02:	481d      	ldr	r0, [pc, #116]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000b04:	f000 fb9d 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b0e:	481a      	ldr	r0, [pc, #104]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000b10:	f000 fb97 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b1a:	4817      	ldr	r0, [pc, #92]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000b1c:	f000 fb91 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b26:	4814      	ldr	r0, [pc, #80]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000b28:	f000 fb8b 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b32:	4811      	ldr	r0, [pc, #68]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000b34:	f000 fb85 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3e:	480f      	ldr	r0, [pc, #60]	; (8000b7c <TIM2_IRQHandler+0x318>)
 8000b40:	f000 fb7f 	bl	8001242 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4a:	480b      	ldr	r0, [pc, #44]	; (8000b78 <TIM2_IRQHandler+0x314>)
 8000b4c:	f000 fb79 	bl	8001242 <HAL_GPIO_WritePin>
			break;
 8000b50:	bf00      	nop
		digit++;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <TIM2_IRQHandler+0x31c>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	3301      	adds	r3, #1
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <TIM2_IRQHandler+0x31c>)
 8000b5c:	701a      	strb	r2, [r3, #0]
		if (digit > (SS_DIGIT - 1)){
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <TIM2_IRQHandler+0x31c>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b07      	cmp	r3, #7
 8000b64:	d902      	bls.n	8000b6c <TIM2_IRQHandler+0x308>
		  digit = 0;
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <TIM2_IRQHandler+0x31c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000080 	.word	0x20000080
 8000b74:	20000048 	.word	0x20000048
 8000b78:	40010c00 	.word	0x40010c00
 8000b7c:	40010800 	.word	0x40010800
 8000b80:	20000040 	.word	0x20000040
 8000b84:	20000058 	.word	0x20000058

08000b88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <SystemInit+0x5c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <SystemInit+0x5c>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <SystemInit+0x5c>)
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	4911      	ldr	r1, [pc, #68]	; (8000be4 <SystemInit+0x5c>)
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <SystemInit+0x60>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <SystemInit+0x5c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <SystemInit+0x5c>)
 8000baa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <SystemInit+0x5c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <SystemInit+0x5c>)
 8000bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bbe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <SystemInit+0x5c>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <SystemInit+0x5c>)
 8000bc6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000bca:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SystemInit+0x5c>)
 8000bce:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000bd2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <SystemInit+0x64>)
 8000bd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bda:	609a      	str	r2, [r3, #8]
#endif 
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	40021000 	.word	0x40021000
 8000be8:	f8ff0000 	.word	0xf8ff0000
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bf0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bf2:	e003      	b.n	8000bfc <LoopCopyDataInit>

08000bf4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bf6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bf8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bfa:	3104      	adds	r1, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bfc:	480a      	ldr	r0, [pc, #40]	; (8000c28 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c04:	d3f6      	bcc.n	8000bf4 <CopyDataInit>
  ldr r2, =_sbss
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c08:	e002      	b.n	8000c10 <LoopFillZerobss>

08000c0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c0c:	f842 3b04 	str.w	r3, [r2], #4

08000c10 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c14:	d3f9      	bcc.n	8000c0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c16:	f7ff ffb7 	bl	8000b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f002 fa8b 	bl	8003134 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1e:	f7ff fb7f 	bl	8000320 <main>
  bx lr
 8000c22:	4770      	bx	lr
  ldr r3, =_sidata
 8000c24:	08003204 	.word	0x08003204
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000c30:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000c34:	200000d0 	.word	0x200000d0

08000c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_2_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_Init+0x28>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_Init+0x28>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 f945 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	2000      	movs	r0, #0
 8000c54:	f000 f808 	bl	8000c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fd4e 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40022000 	.word	0x40022000

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_InitTick+0x54>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_InitTick+0x58>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f95d 	bl	8000f46 <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00e      	b.n	8000cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d80a      	bhi.n	8000cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f000 f925 	bl	8000ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca8:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <HAL_InitTick+0x5c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e000      	b.n	8000cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_IncTick+0x1c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a03      	ldr	r2, [pc, #12]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	200000cc 	.word	0x200000cc

08000cec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b02      	ldr	r3, [pc, #8]	; (8000cfc <HAL_GetTick+0x10>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	200000cc 	.word	0x200000cc

08000d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d08:	f7ff fff0 	bl	8000cec <HAL_GetTick>
 8000d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d18:	d005      	beq.n	8000d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_Delay+0x40>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d26:	bf00      	nop
 8000d28:	f7ff ffe0 	bl	8000cec <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d8f7      	bhi.n	8000d28 <HAL_Delay+0x28>
  {
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000008 	.word	0x20000008

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4906      	ldr	r1, [pc, #24]	; (8000ddc <__NVIC_EnableIRQ+0x34>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	; (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	; (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea8:	d301      	bcc.n	8000eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00f      	b.n	8000ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <SysTick_Config+0x40>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f7ff ff90 	bl	8000de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec8:	2207      	movs	r2, #7
 8000eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff2d 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff42 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ff90 	bl	8000e34 <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff5f 	bl	8000de0 <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff35 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffa2 	bl	8000e98 <SysTick_Config>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b08b      	sub	sp, #44	; 0x2c
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f72:	e127      	b.n	80011c4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f74:	2201      	movs	r2, #1
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f040 8116 	bne.w	80011be <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b12      	cmp	r3, #18
 8000f98:	d034      	beq.n	8001004 <HAL_GPIO_Init+0xa4>
 8000f9a:	2b12      	cmp	r3, #18
 8000f9c:	d80d      	bhi.n	8000fba <HAL_GPIO_Init+0x5a>
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d02b      	beq.n	8000ffa <HAL_GPIO_Init+0x9a>
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d804      	bhi.n	8000fb0 <HAL_GPIO_Init+0x50>
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d031      	beq.n	800100e <HAL_GPIO_Init+0xae>
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d01c      	beq.n	8000fe8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fae:	e048      	b.n	8001042 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d043      	beq.n	800103c <HAL_GPIO_Init+0xdc>
 8000fb4:	2b11      	cmp	r3, #17
 8000fb6:	d01b      	beq.n	8000ff0 <HAL_GPIO_Init+0x90>
          break;
 8000fb8:	e043      	b.n	8001042 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fba:	4a89      	ldr	r2, [pc, #548]	; (80011e0 <HAL_GPIO_Init+0x280>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d026      	beq.n	800100e <HAL_GPIO_Init+0xae>
 8000fc0:	4a87      	ldr	r2, [pc, #540]	; (80011e0 <HAL_GPIO_Init+0x280>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d806      	bhi.n	8000fd4 <HAL_GPIO_Init+0x74>
 8000fc6:	4a87      	ldr	r2, [pc, #540]	; (80011e4 <HAL_GPIO_Init+0x284>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d020      	beq.n	800100e <HAL_GPIO_Init+0xae>
 8000fcc:	4a86      	ldr	r2, [pc, #536]	; (80011e8 <HAL_GPIO_Init+0x288>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d01d      	beq.n	800100e <HAL_GPIO_Init+0xae>
          break;
 8000fd2:	e036      	b.n	8001042 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fd4:	4a85      	ldr	r2, [pc, #532]	; (80011ec <HAL_GPIO_Init+0x28c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d019      	beq.n	800100e <HAL_GPIO_Init+0xae>
 8000fda:	4a85      	ldr	r2, [pc, #532]	; (80011f0 <HAL_GPIO_Init+0x290>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d016      	beq.n	800100e <HAL_GPIO_Init+0xae>
 8000fe0:	4a84      	ldr	r2, [pc, #528]	; (80011f4 <HAL_GPIO_Init+0x294>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d013      	beq.n	800100e <HAL_GPIO_Init+0xae>
          break;
 8000fe6:	e02c      	b.n	8001042 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	623b      	str	r3, [r7, #32]
          break;
 8000fee:	e028      	b.n	8001042 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	623b      	str	r3, [r7, #32]
          break;
 8000ff8:	e023      	b.n	8001042 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	3308      	adds	r3, #8
 8001000:	623b      	str	r3, [r7, #32]
          break;
 8001002:	e01e      	b.n	8001042 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	330c      	adds	r3, #12
 800100a:	623b      	str	r3, [r7, #32]
          break;
 800100c:	e019      	b.n	8001042 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d102      	bne.n	800101c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001016:	2304      	movs	r3, #4
 8001018:	623b      	str	r3, [r7, #32]
          break;
 800101a:	e012      	b.n	8001042 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d105      	bne.n	8001030 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001024:	2308      	movs	r3, #8
 8001026:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69fa      	ldr	r2, [r7, #28]
 800102c:	611a      	str	r2, [r3, #16]
          break;
 800102e:	e008      	b.n	8001042 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001030:	2308      	movs	r3, #8
 8001032:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	615a      	str	r2, [r3, #20]
          break;
 800103a:	e002      	b.n	8001042 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
          break;
 8001040:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	2bff      	cmp	r3, #255	; 0xff
 8001046:	d801      	bhi.n	800104c <HAL_GPIO_Init+0xec>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	e001      	b.n	8001050 <HAL_GPIO_Init+0xf0>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3304      	adds	r3, #4
 8001050:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	2bff      	cmp	r3, #255	; 0xff
 8001056:	d802      	bhi.n	800105e <HAL_GPIO_Init+0xfe>
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	e002      	b.n	8001064 <HAL_GPIO_Init+0x104>
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	3b08      	subs	r3, #8
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	210f      	movs	r1, #15
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	401a      	ands	r2, r3
 8001076:	6a39      	ldr	r1, [r7, #32]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	431a      	orrs	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 8096 	beq.w	80011be <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001092:	4b59      	ldr	r3, [pc, #356]	; (80011f8 <HAL_GPIO_Init+0x298>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	4a58      	ldr	r2, [pc, #352]	; (80011f8 <HAL_GPIO_Init+0x298>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6193      	str	r3, [r2, #24]
 800109e:	4b56      	ldr	r3, [pc, #344]	; (80011f8 <HAL_GPIO_Init+0x298>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010aa:	4a54      	ldr	r2, [pc, #336]	; (80011fc <HAL_GPIO_Init+0x29c>)
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	3302      	adds	r3, #2
 80010b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	4013      	ands	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4b      	ldr	r2, [pc, #300]	; (8001200 <HAL_GPIO_Init+0x2a0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0x19e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4a      	ldr	r2, [pc, #296]	; (8001204 <HAL_GPIO_Init+0x2a4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00d      	beq.n	80010fa <HAL_GPIO_Init+0x19a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a49      	ldr	r2, [pc, #292]	; (8001208 <HAL_GPIO_Init+0x2a8>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d007      	beq.n	80010f6 <HAL_GPIO_Init+0x196>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a48      	ldr	r2, [pc, #288]	; (800120c <HAL_GPIO_Init+0x2ac>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_Init+0x192>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x1a0>
 80010f2:	2304      	movs	r3, #4
 80010f4:	e004      	b.n	8001100 <HAL_GPIO_Init+0x1a0>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_Init+0x1a0>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_GPIO_Init+0x1a0>
 80010fe:	2300      	movs	r3, #0
 8001100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001102:	f002 0203 	and.w	r2, r2, #3
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	4093      	lsls	r3, r2
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001110:	493a      	ldr	r1, [pc, #232]	; (80011fc <HAL_GPIO_Init+0x29c>)
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d006      	beq.n	8001138 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800112a:	4b39      	ldr	r3, [pc, #228]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4938      	ldr	r1, [pc, #224]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	600b      	str	r3, [r1, #0]
 8001136:	e006      	b.n	8001146 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001138:	4b35      	ldr	r3, [pc, #212]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	43db      	mvns	r3, r3
 8001140:	4933      	ldr	r1, [pc, #204]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 8001142:	4013      	ands	r3, r2
 8001144:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d006      	beq.n	8001160 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001152:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	492e      	ldr	r1, [pc, #184]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	604b      	str	r3, [r1, #4]
 800115e:	e006      	b.n	800116e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001160:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	43db      	mvns	r3, r3
 8001168:	4929      	ldr	r1, [pc, #164]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 800116a:	4013      	ands	r3, r2
 800116c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800117a:	4b25      	ldr	r3, [pc, #148]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	4924      	ldr	r1, [pc, #144]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	608b      	str	r3, [r1, #8]
 8001186:	e006      	b.n	8001196 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	43db      	mvns	r3, r3
 8001190:	491f      	ldr	r1, [pc, #124]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 8001192:	4013      	ands	r3, r2
 8001194:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	491a      	ldr	r1, [pc, #104]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	60cb      	str	r3, [r1, #12]
 80011ae:	e006      	b.n	80011be <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	4915      	ldr	r1, [pc, #84]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	3301      	adds	r3, #1
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	fa22 f303 	lsr.w	r3, r2, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f47f aed0 	bne.w	8000f74 <HAL_GPIO_Init+0x14>
  }
}
 80011d4:	bf00      	nop
 80011d6:	372c      	adds	r7, #44	; 0x2c
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	10210000 	.word	0x10210000
 80011e4:	10110000 	.word	0x10110000
 80011e8:	10120000 	.word	0x10120000
 80011ec:	10310000 	.word	0x10310000
 80011f0:	10320000 	.word	0x10320000
 80011f4:	10220000 	.word	0x10220000
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010000 	.word	0x40010000
 8001200:	40010800 	.word	0x40010800
 8001204:	40010c00 	.word	0x40010c00
 8001208:	40011000 	.word	0x40011000
 800120c:	40011400 	.word	0x40011400
 8001210:	40010400 	.word	0x40010400

08001214 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	4013      	ands	r3, r2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
 8001230:	e001      	b.n	8001236 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	460b      	mov	r3, r1
 800124c:	807b      	strh	r3, [r7, #2]
 800124e:	4613      	mov	r3, r2
 8001250:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001252:	787b      	ldrb	r3, [r7, #1]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001258:	887a      	ldrh	r2, [r7, #2]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800125e:	e003      	b.n	8001268 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001260:	887b      	ldrh	r3, [r7, #2]
 8001262:	041a      	lsls	r2, r3, #16
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	611a      	str	r2, [r3, #16]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001272:	b480      	push	{r7}
 8001274:	b085      	sub	sp, #20
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	460b      	mov	r3, r1
 800127c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001284:	887a      	ldrh	r2, [r7, #2]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4013      	ands	r3, r2
 800128a:	041a      	lsls	r2, r3, #16
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	43d9      	mvns	r1, r3
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	400b      	ands	r3, r1
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	611a      	str	r2, [r3, #16]
}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_PWR_EnableBkUpAccess+0x14>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	420e0020 	.word	0x420e0020

080012bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e26c      	b.n	80017a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 8087 	beq.w	80013ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012dc:	4b92      	ldr	r3, [pc, #584]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d00c      	beq.n	8001302 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012e8:	4b8f      	ldr	r3, [pc, #572]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 030c 	and.w	r3, r3, #12
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d112      	bne.n	800131a <HAL_RCC_OscConfig+0x5e>
 80012f4:	4b8c      	ldr	r3, [pc, #560]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001300:	d10b      	bne.n	800131a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001302:	4b89      	ldr	r3, [pc, #548]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d06c      	beq.n	80013e8 <HAL_RCC_OscConfig+0x12c>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d168      	bne.n	80013e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e246      	b.n	80017a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001322:	d106      	bne.n	8001332 <HAL_RCC_OscConfig+0x76>
 8001324:	4b80      	ldr	r3, [pc, #512]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a7f      	ldr	r2, [pc, #508]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 800132a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	e02e      	b.n	8001390 <HAL_RCC_OscConfig+0xd4>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0x98>
 800133a:	4b7b      	ldr	r3, [pc, #492]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a7a      	ldr	r2, [pc, #488]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b78      	ldr	r3, [pc, #480]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a77      	ldr	r2, [pc, #476]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 800134c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e01d      	b.n	8001390 <HAL_RCC_OscConfig+0xd4>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0xbc>
 800135e:	4b72      	ldr	r3, [pc, #456]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a71      	ldr	r2, [pc, #452]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b6f      	ldr	r3, [pc, #444]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a6e      	ldr	r2, [pc, #440]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e00b      	b.n	8001390 <HAL_RCC_OscConfig+0xd4>
 8001378:	4b6b      	ldr	r3, [pc, #428]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a6a      	ldr	r2, [pc, #424]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 800137e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b68      	ldr	r3, [pc, #416]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a67      	ldr	r2, [pc, #412]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 800138a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d013      	beq.n	80013c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fca8 	bl	8000cec <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fca4 	bl	8000cec <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1fa      	b.n	80017a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	4b5d      	ldr	r3, [pc, #372]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0xe4>
 80013be:	e014      	b.n	80013ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fc94 	bl	8000cec <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff fc90 	bl	8000cec <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	; 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e1e6      	b.n	80017a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	4b53      	ldr	r3, [pc, #332]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x10c>
 80013e6:	e000      	b.n	80013ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d063      	beq.n	80014be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013f6:	4b4c      	ldr	r3, [pc, #304]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00b      	beq.n	800141a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001402:	4b49      	ldr	r3, [pc, #292]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b08      	cmp	r3, #8
 800140c:	d11c      	bne.n	8001448 <HAL_RCC_OscConfig+0x18c>
 800140e:	4b46      	ldr	r3, [pc, #280]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d116      	bne.n	8001448 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141a:	4b43      	ldr	r3, [pc, #268]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <HAL_RCC_OscConfig+0x176>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d001      	beq.n	8001432 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e1ba      	b.n	80017a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001432:	4b3d      	ldr	r3, [pc, #244]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4939      	ldr	r1, [pc, #228]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001446:	e03a      	b.n	80014be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d020      	beq.n	8001492 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001450:	4b36      	ldr	r3, [pc, #216]	; (800152c <HAL_RCC_OscConfig+0x270>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001456:	f7ff fc49 	bl	8000cec <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff fc45 	bl	8000cec <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e19b      	b.n	80017a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147c:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4927      	ldr	r1, [pc, #156]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 800148c:	4313      	orrs	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
 8001490:	e015      	b.n	80014be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001492:	4b26      	ldr	r3, [pc, #152]	; (800152c <HAL_RCC_OscConfig+0x270>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fc28 	bl	8000cec <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fc24 	bl	8000cec <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e17a      	b.n	80017a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d03a      	beq.n	8001540 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d019      	beq.n	8001506 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_RCC_OscConfig+0x274>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d8:	f7ff fc08 	bl	8000cec <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e0:	f7ff fc04 	bl	8000cec <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e15a      	b.n	80017a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014fe:	2001      	movs	r0, #1
 8001500:	f000 fac6 	bl	8001a90 <RCC_Delay>
 8001504:	e01c      	b.n	8001540 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_RCC_OscConfig+0x274>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150c:	f7ff fbee 	bl	8000cec <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001512:	e00f      	b.n	8001534 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001514:	f7ff fbea 	bl	8000cec <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d908      	bls.n	8001534 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e140      	b.n	80017a8 <HAL_RCC_OscConfig+0x4ec>
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	42420000 	.word	0x42420000
 8001530:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001534:	4b9e      	ldr	r3, [pc, #632]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1e9      	bne.n	8001514 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80a6 	beq.w	800169a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001552:	4b97      	ldr	r3, [pc, #604]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10d      	bne.n	800157a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b94      	ldr	r3, [pc, #592]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a93      	ldr	r2, [pc, #588]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	61d3      	str	r3, [r2, #28]
 800156a:	4b91      	ldr	r3, [pc, #580]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001576:	2301      	movs	r3, #1
 8001578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157a:	4b8e      	ldr	r3, [pc, #568]	; (80017b4 <HAL_RCC_OscConfig+0x4f8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001582:	2b00      	cmp	r3, #0
 8001584:	d118      	bne.n	80015b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001586:	4b8b      	ldr	r3, [pc, #556]	; (80017b4 <HAL_RCC_OscConfig+0x4f8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a8a      	ldr	r2, [pc, #552]	; (80017b4 <HAL_RCC_OscConfig+0x4f8>)
 800158c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001592:	f7ff fbab 	bl	8000cec <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159a:	f7ff fba7 	bl	8000cec <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b64      	cmp	r3, #100	; 0x64
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e0fd      	b.n	80017a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	4b81      	ldr	r3, [pc, #516]	; (80017b4 <HAL_RCC_OscConfig+0x4f8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x312>
 80015c0:	4b7b      	ldr	r3, [pc, #492]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4a7a      	ldr	r2, [pc, #488]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6213      	str	r3, [r2, #32]
 80015cc:	e02d      	b.n	800162a <HAL_RCC_OscConfig+0x36e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x334>
 80015d6:	4b76      	ldr	r3, [pc, #472]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a75      	ldr	r2, [pc, #468]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	6213      	str	r3, [r2, #32]
 80015e2:	4b73      	ldr	r3, [pc, #460]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4a72      	ldr	r2, [pc, #456]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 80015e8:	f023 0304 	bic.w	r3, r3, #4
 80015ec:	6213      	str	r3, [r2, #32]
 80015ee:	e01c      	b.n	800162a <HAL_RCC_OscConfig+0x36e>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b05      	cmp	r3, #5
 80015f6:	d10c      	bne.n	8001612 <HAL_RCC_OscConfig+0x356>
 80015f8:	4b6d      	ldr	r3, [pc, #436]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4a6c      	ldr	r2, [pc, #432]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 80015fe:	f043 0304 	orr.w	r3, r3, #4
 8001602:	6213      	str	r3, [r2, #32]
 8001604:	4b6a      	ldr	r3, [pc, #424]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4a69      	ldr	r2, [pc, #420]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6213      	str	r3, [r2, #32]
 8001610:	e00b      	b.n	800162a <HAL_RCC_OscConfig+0x36e>
 8001612:	4b67      	ldr	r3, [pc, #412]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4a66      	ldr	r2, [pc, #408]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	6213      	str	r3, [r2, #32]
 800161e:	4b64      	ldr	r3, [pc, #400]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4a63      	ldr	r2, [pc, #396]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 8001624:	f023 0304 	bic.w	r3, r3, #4
 8001628:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d015      	beq.n	800165e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001632:	f7ff fb5b 	bl	8000cec <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001638:	e00a      	b.n	8001650 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800163a:	f7ff fb57 	bl	8000cec <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	f241 3288 	movw	r2, #5000	; 0x1388
 8001648:	4293      	cmp	r3, r2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e0ab      	b.n	80017a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001650:	4b57      	ldr	r3, [pc, #348]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0ee      	beq.n	800163a <HAL_RCC_OscConfig+0x37e>
 800165c:	e014      	b.n	8001688 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165e:	f7ff fb45 	bl	8000cec <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001664:	e00a      	b.n	800167c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f7ff fb41 	bl	8000cec <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	f241 3288 	movw	r2, #5000	; 0x1388
 8001674:	4293      	cmp	r3, r2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e095      	b.n	80017a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167c:	4b4c      	ldr	r3, [pc, #304]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1ee      	bne.n	8001666 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001688:	7dfb      	ldrb	r3, [r7, #23]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d105      	bne.n	800169a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800168e:	4b48      	ldr	r3, [pc, #288]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	4a47      	ldr	r2, [pc, #284]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 8001694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001698:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8081 	beq.w	80017a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a4:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d061      	beq.n	8001774 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d146      	bne.n	8001746 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b8:	4b3f      	ldr	r3, [pc, #252]	; (80017b8 <HAL_RCC_OscConfig+0x4fc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016be:	f7ff fb15 	bl	8000cec <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c6:	f7ff fb11 	bl	8000cec <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e067      	b.n	80017a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d8:	4b35      	ldr	r3, [pc, #212]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f0      	bne.n	80016c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ec:	d108      	bne.n	8001700 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016ee:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	492d      	ldr	r1, [pc, #180]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a19      	ldr	r1, [r3, #32]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	430b      	orrs	r3, r1
 8001712:	4927      	ldr	r1, [pc, #156]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001718:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <HAL_RCC_OscConfig+0x4fc>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff fae5 	bl	8000cec <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001726:	f7ff fae1 	bl	8000cec <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e037      	b.n	80017a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001738:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x46a>
 8001744:	e02f      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001746:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <HAL_RCC_OscConfig+0x4fc>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff face 	bl	8000cec <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001754:	f7ff faca 	bl	8000cec <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e020      	b.n	80017a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x498>
 8001772:	e018      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e013      	b.n	80017a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_RCC_OscConfig+0x4f4>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	429a      	cmp	r2, r3
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d001      	beq.n	80017a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40007000 	.word	0x40007000
 80017b8:	42420060 	.word	0x42420060

080017bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0d0      	b.n	8001972 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017d0:	4b6a      	ldr	r3, [pc, #424]	; (800197c <HAL_RCC_ClockConfig+0x1c0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d910      	bls.n	8001800 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017de:	4b67      	ldr	r3, [pc, #412]	; (800197c <HAL_RCC_ClockConfig+0x1c0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 0207 	bic.w	r2, r3, #7
 80017e6:	4965      	ldr	r1, [pc, #404]	; (800197c <HAL_RCC_ClockConfig+0x1c0>)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ee:	4b63      	ldr	r3, [pc, #396]	; (800197c <HAL_RCC_ClockConfig+0x1c0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0b8      	b.n	8001972 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d020      	beq.n	800184e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001818:	4b59      	ldr	r3, [pc, #356]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	4a58      	ldr	r2, [pc, #352]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001822:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001830:	4b53      	ldr	r3, [pc, #332]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4a52      	ldr	r2, [pc, #328]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800183a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800183c:	4b50      	ldr	r3, [pc, #320]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	494d      	ldr	r1, [pc, #308]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	4313      	orrs	r3, r2
 800184c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d040      	beq.n	80018dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d107      	bne.n	8001872 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	4b47      	ldr	r3, [pc, #284]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d115      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e07f      	b.n	8001972 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187a:	4b41      	ldr	r3, [pc, #260]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e073      	b.n	8001972 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188a:	4b3d      	ldr	r3, [pc, #244]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e06b      	b.n	8001972 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189a:	4b39      	ldr	r3, [pc, #228]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f023 0203 	bic.w	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4936      	ldr	r1, [pc, #216]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018ac:	f7ff fa1e 	bl	8000cec <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b4:	f7ff fa1a 	bl	8000cec <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e053      	b.n	8001972 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	4b2d      	ldr	r3, [pc, #180]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 020c 	and.w	r2, r3, #12
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	429a      	cmp	r2, r3
 80018da:	d1eb      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018dc:	4b27      	ldr	r3, [pc, #156]	; (800197c <HAL_RCC_ClockConfig+0x1c0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d210      	bcs.n	800190c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ea:	4b24      	ldr	r3, [pc, #144]	; (800197c <HAL_RCC_ClockConfig+0x1c0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 0207 	bic.w	r2, r3, #7
 80018f2:	4922      	ldr	r1, [pc, #136]	; (800197c <HAL_RCC_ClockConfig+0x1c0>)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d001      	beq.n	800190c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e032      	b.n	8001972 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d008      	beq.n	800192a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	4916      	ldr	r1, [pc, #88]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	4313      	orrs	r3, r2
 8001928:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d009      	beq.n	800194a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	490e      	ldr	r1, [pc, #56]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	4313      	orrs	r3, r2
 8001948:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800194a:	f000 f821 	bl	8001990 <HAL_RCC_GetSysClockFreq>
 800194e:	4601      	mov	r1, r0
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 800195c:	5cd3      	ldrb	r3, [r2, r3]
 800195e:	fa21 f303 	lsr.w	r3, r1, r3
 8001962:	4a09      	ldr	r2, [pc, #36]	; (8001988 <HAL_RCC_ClockConfig+0x1cc>)
 8001964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_RCC_ClockConfig+0x1d0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff f97c 	bl	8000c68 <HAL_InitTick>

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40022000 	.word	0x40022000
 8001980:	40021000 	.word	0x40021000
 8001984:	080031e4 	.word	0x080031e4
 8001988:	20000000 	.word	0x20000000
 800198c:	20000004 	.word	0x20000004

08001990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001990:	b490      	push	{r4, r7}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001996:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001998:	1d3c      	adds	r4, r7, #4
 800199a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800199c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019a0:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d002      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0x40>
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d003      	beq.n	80019d6 <HAL_RCC_GetSysClockFreq+0x46>
 80019ce:	e02d      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019d0:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 80019d2:	623b      	str	r3, [r7, #32]
      break;
 80019d4:	e02d      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	0c9b      	lsrs	r3, r3, #18
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019e2:	4413      	add	r3, r2
 80019e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d013      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	0c5b      	lsrs	r3, r3, #17
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a02:	4413      	add	r3, r2
 8001a04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a0e:	fb02 f203 	mul.w	r2, r2, r3
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1a:	e004      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	4a0c      	ldr	r2, [pc, #48]	; (8001a50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a20:	fb02 f303 	mul.w	r3, r2, r3
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	623b      	str	r3, [r7, #32]
      break;
 8001a2a:	e002      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a2e:	623b      	str	r3, [r7, #32]
      break;
 8001a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a32:	6a3b      	ldr	r3, [r7, #32]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3728      	adds	r7, #40	; 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc90      	pop	{r4, r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	080031a4 	.word	0x080031a4
 8001a44:	080031b4 	.word	0x080031b4
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	007a1200 	.word	0x007a1200
 8001a50:	003d0900 	.word	0x003d0900

08001a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a58:	4b02      	ldr	r3, [pc, #8]	; (8001a64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	20000000 	.word	0x20000000

08001a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a6c:	f7ff fff2 	bl	8001a54 <HAL_RCC_GetHCLKFreq>
 8001a70:	4601      	mov	r1, r0
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	0adb      	lsrs	r3, r3, #11
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	4a03      	ldr	r2, [pc, #12]	; (8001a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a7e:	5cd3      	ldrb	r3, [r2, r3]
 8001a80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	080031f4 	.word	0x080031f4

08001a90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a98:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <RCC_Delay+0x34>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <RCC_Delay+0x38>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	0a5b      	lsrs	r3, r3, #9
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	fb02 f303 	mul.w	r3, r2, r3
 8001aaa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001aac:	bf00      	nop
  }
  while (Delay --);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1e5a      	subs	r2, r3, #1
 8001ab2:	60fa      	str	r2, [r7, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f9      	bne.n	8001aac <RCC_Delay+0x1c>
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	10624dd3 	.word	0x10624dd3

08001acc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d07d      	beq.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aec:	4b4f      	ldr	r3, [pc, #316]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10d      	bne.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af8:	4b4c      	ldr	r3, [pc, #304]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	4a4b      	ldr	r2, [pc, #300]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b02:	61d3      	str	r3, [r2, #28]
 8001b04:	4b49      	ldr	r3, [pc, #292]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b10:	2301      	movs	r3, #1
 8001b12:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b14:	4b46      	ldr	r3, [pc, #280]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d118      	bne.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b20:	4b43      	ldr	r3, [pc, #268]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a42      	ldr	r2, [pc, #264]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f8de 	bl	8000cec <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b32:	e008      	b.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b34:	f7ff f8da 	bl	8000cec <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e06d      	b.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b46:	4b3a      	ldr	r3, [pc, #232]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b52:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b5a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d02e      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d027      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b70:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b7a:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b80:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b86:	4a29      	ldr	r2, [pc, #164]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d014      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7ff f8a9 	bl	8000cec <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f7ff f8a5 	bl	8000cec <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e036      	b.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0ee      	beq.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4917      	ldr	r1, [pc, #92]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d105      	bne.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	490b      	ldr	r1, [pc, #44]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d008      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	4904      	ldr	r1, [pc, #16]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40007000 	.word	0x40007000
 8001c34:	42420440 	.word	0x42420440

08001c38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b08d      	sub	sp, #52	; 0x34
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c40:	4b55      	ldr	r3, [pc, #340]	; (8001d98 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001c42:	f107 040c 	add.w	r4, r7, #12
 8001c46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c4c:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
 8001c56:	2300      	movs	r3, #0
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	2300      	movs	r3, #0
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d07f      	beq.n	8001d6c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8001c6c:	2b10      	cmp	r3, #16
 8001c6e:	d002      	beq.n	8001c76 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d048      	beq.n	8001d06 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001c74:	e08b      	b.n	8001d8e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8001c76:	4b4a      	ldr	r3, [pc, #296]	; (8001da0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001c7c:	4b48      	ldr	r3, [pc, #288]	; (8001da0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d07f      	beq.n	8001d88 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	0c9b      	lsrs	r3, r3, #18
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001c94:	4413      	add	r3, r2
 8001c96:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c9a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d018      	beq.n	8001cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ca6:	4b3e      	ldr	r3, [pc, #248]	; (8001da0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	0c5b      	lsrs	r3, r3, #17
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00d      	beq.n	8001ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001cc6:	4a37      	ldr	r2, [pc, #220]	; (8001da4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	fb02 f303 	mul.w	r3, r2, r3
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd6:	e004      	b.n	8001ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	4a33      	ldr	r2, [pc, #204]	; (8001da8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001cdc:	fb02 f303 	mul.w	r3, r2, r3
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001ce2:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8001cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001cf4:	e048      	b.n	8001d88 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8001cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4a2c      	ldr	r2, [pc, #176]	; (8001dac <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001d00:	085b      	lsrs	r3, r3, #1
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001d04:	e040      	b.n	8001d88 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d16:	d108      	bne.n	8001d2a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8001d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d28:	e01f      	b.n	8001d6a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d34:	d109      	bne.n	8001d4a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8001d42:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d48:	e00f      	b.n	8001d6a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d54:	d11a      	bne.n	8001d8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8001d56:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d014      	beq.n	8001d8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8001d62:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001d68:	e010      	b.n	8001d8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8001d6a:	e00f      	b.n	8001d8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001d6c:	f7ff fe7c 	bl	8001a68 <HAL_RCC_GetPCLK2Freq>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	0b9b      	lsrs	r3, r3, #14
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001d86:	e002      	b.n	8001d8e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001d88:	bf00      	nop
 8001d8a:	e000      	b.n	8001d8e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001d8c:	bf00      	nop
    }
  }
  return (frequency);
 8001d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3734      	adds	r7, #52	; 0x34
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd90      	pop	{r4, r7, pc}
 8001d98:	080031b8 	.word	0x080031b8
 8001d9c:	080031c8 	.word	0x080031c8
 8001da0:	40021000 	.word	0x40021000
 8001da4:	007a1200 	.word	0x007a1200
 8001da8:	003d0900 	.word	0x003d0900
 8001dac:	aaaaaaab 	.word	0xaaaaaaab

08001db0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e084      	b.n	8001ed0 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7c5b      	ldrb	r3, [r3, #17]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d105      	bne.n	8001ddc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7fe fcc0 	bl	800075c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 faa0 	bl	8002328 <HAL_RTC_WaitForSynchro>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d004      	beq.n	8001df8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2204      	movs	r2, #4
 8001df2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e06b      	b.n	8001ed0 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fb59 	bl	80024b0 <RTC_EnterInitMode>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d004      	beq.n	8001e0e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2204      	movs	r2, #4
 8001e08:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e060      	b.n	8001ed0 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0207 	bic.w	r2, r2, #7
 8001e1c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001e26:	4b2c      	ldr	r3, [pc, #176]	; (8001ed8 <HAL_RTC_Init+0x128>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a2b      	ldr	r2, [pc, #172]	; (8001ed8 <HAL_RTC_Init+0x128>)
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001e32:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <HAL_RTC_Init+0x128>)
 8001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e36:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	4926      	ldr	r1, [pc, #152]	; (8001ed8 <HAL_RTC_Init+0x128>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	d003      	beq.n	8001e56 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e00e      	b.n	8001e74 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001e56:	2001      	movs	r0, #1
 8001e58:	f7ff feee 	bl	8001c38 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e5c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d104      	bne.n	8001e6e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2204      	movs	r2, #4
 8001e68:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e030      	b.n	8001ed0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f023 010f 	bic.w	r1, r3, #15
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	0c1a      	lsrs	r2, r3, #16
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	0c1b      	lsrs	r3, r3, #16
 8001e92:	041b      	lsls	r3, r3, #16
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	b291      	uxth	r1, r2
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fb2d 	bl	8002500 <RTC_ExitInitMode>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2204      	movs	r2, #4
 8001eb0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00c      	b.n	8001ed0 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001ece:	2300      	movs	r3, #0
  }
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40006c00 	.word	0x40006c00

08001edc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	2300      	movs	r3, #0
 8001eee:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_RTC_SetTime+0x20>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e080      	b.n	8002002 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	7c1b      	ldrb	r3, [r3, #16]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_RTC_SetTime+0x30>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e07a      	b.n	8002002 <HAL_RTC_SetTime+0x126>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2202      	movs	r2, #2
 8001f16:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d113      	bne.n	8001f46 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001f28:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	785b      	ldrb	r3, [r3, #1]
 8001f30:	4619      	mov	r1, r3
 8001f32:	460b      	mov	r3, r1
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	1a5b      	subs	r3, r3, r1
 8001f38:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001f3a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001f40:	4413      	add	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	e01e      	b.n	8001f84 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fb1d 	bl	800258a <RTC_Bcd2ToByte>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461a      	mov	r2, r3
 8001f54:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001f58:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	785b      	ldrb	r3, [r3, #1]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 fb12 	bl	800258a <RTC_Bcd2ToByte>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	1a9b      	subs	r3, r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001f72:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	789b      	ldrb	r3, [r3, #2]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fb06 	bl	800258a <RTC_Bcd2ToByte>
 8001f7e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001f80:	4423      	add	r3, r4
 8001f82:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001f84:	6979      	ldr	r1, [r7, #20]
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 fa2b 	bl	80023e2 <RTC_WriteTimeCounter>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2204      	movs	r2, #4
 8001f96:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e02f      	b.n	8002002 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0205 	bic.w	r2, r2, #5
 8001fb0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 fa3c 	bl	8002430 <RTC_ReadAlarmCounter>
 8001fb8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d018      	beq.n	8001ff4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d214      	bcs.n	8001ff4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001fd0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001fd4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001fd6:	6939      	ldr	r1, [r7, #16]
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 fa42 	bl	8002462 <RTC_WriteAlarmCounter>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d007      	beq.n	8001ff4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2204      	movs	r2, #4
 8001fe8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e006      	b.n	8002002 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002000:	2300      	movs	r3, #0
  }
}
 8002002:	4618      	mov	r0, r3
 8002004:	371c      	adds	r7, #28
 8002006:	46bd      	mov	sp, r7
 8002008:	bd90      	pop	{r4, r7, pc}
	...

0800200c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <HAL_RTC_GetTime+0x28>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0b5      	b.n	80021a4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0ac      	b.n	80021a4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f999 	bl	8002382 <RTC_ReadTimeCounter>
 8002050:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4a55      	ldr	r2, [pc, #340]	; (80021ac <HAL_RTC_GetTime+0x1a0>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	0adb      	lsrs	r3, r3, #11
 800205c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4b52      	ldr	r3, [pc, #328]	; (80021ac <HAL_RTC_GetTime+0x1a0>)
 8002062:	fba3 1302 	umull	r1, r3, r3, r2
 8002066:	0adb      	lsrs	r3, r3, #11
 8002068:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	4a4f      	ldr	r2, [pc, #316]	; (80021b0 <HAL_RTC_GetTime+0x1a4>)
 8002074:	fba2 2303 	umull	r2, r3, r2, r3
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	b2da      	uxtb	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	4a4a      	ldr	r2, [pc, #296]	; (80021ac <HAL_RTC_GetTime+0x1a0>)
 8002084:	fba2 1203 	umull	r1, r2, r2, r3
 8002088:	0ad2      	lsrs	r2, r2, #11
 800208a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800208e:	fb01 f202 	mul.w	r2, r1, r2
 8002092:	1a9a      	subs	r2, r3, r2
 8002094:	4b46      	ldr	r3, [pc, #280]	; (80021b0 <HAL_RTC_GetTime+0x1a4>)
 8002096:	fba3 1302 	umull	r1, r3, r3, r2
 800209a:	0959      	lsrs	r1, r3, #5
 800209c:	460b      	mov	r3, r1
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	1a5b      	subs	r3, r3, r1
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	1ad1      	subs	r1, r2, r3
 80020a6:	b2ca      	uxtb	r2, r1
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b17      	cmp	r3, #23
 80020b0:	d955      	bls.n	800215e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4a3f      	ldr	r2, [pc, #252]	; (80021b4 <HAL_RTC_GetTime+0x1a8>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80020be:	6939      	ldr	r1, [r7, #16]
 80020c0:	4b3c      	ldr	r3, [pc, #240]	; (80021b4 <HAL_RTC_GetTime+0x1a8>)
 80020c2:	fba3 2301 	umull	r2, r3, r3, r1
 80020c6:	091a      	lsrs	r2, r3, #4
 80020c8:	4613      	mov	r3, r2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	1aca      	subs	r2, r1, r3
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 f9a9 	bl	8002430 <RTC_ReadAlarmCounter>
 80020de:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e6:	d008      	beq.n	80020fa <HAL_RTC_GetTime+0xee>
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d904      	bls.n	80020fa <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	e002      	b.n	8002100 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295
 80020fe:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	4a2d      	ldr	r2, [pc, #180]	; (80021b8 <HAL_RTC_GetTime+0x1ac>)
 8002104:	fb02 f303 	mul.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800210e:	69b9      	ldr	r1, [r7, #24]
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 f966 	bl	80023e2 <RTC_WriteTimeCounter>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e041      	b.n	80021a4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002126:	d00c      	beq.n	8002142 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4413      	add	r3, r2
 800212e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002130:	69f9      	ldr	r1, [r7, #28]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f995 	bl	8002462 <RTC_WriteAlarmCounter>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e030      	b.n	80021a4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002142:	69f9      	ldr	r1, [r7, #28]
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 f98c 	bl	8002462 <RTC_WriteAlarmCounter>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e027      	b.n	80021a4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002154:	6979      	ldr	r1, [r7, #20]
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 fa34 	bl	80025c4 <RTC_DateUpdate>
 800215c:	e003      	b.n	8002166 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01a      	beq.n	80021a2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f000 f9ed 	bl	8002550 <RTC_ByteToBcd2>
 8002176:	4603      	mov	r3, r0
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	785b      	ldrb	r3, [r3, #1]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f9e4 	bl	8002550 <RTC_ByteToBcd2>
 8002188:	4603      	mov	r3, r0
 800218a:	461a      	mov	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	789b      	ldrb	r3, [r3, #2]
 8002194:	4618      	mov	r0, r3
 8002196:	f000 f9db 	bl	8002550 <RTC_ByteToBcd2>
 800219a:	4603      	mov	r3, r0
 800219c:	461a      	mov	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3720      	adds	r7, #32
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	91a2b3c5 	.word	0x91a2b3c5
 80021b0:	88888889 	.word	0x88888889
 80021b4:	aaaaaaab 	.word	0xaaaaaaab
 80021b8:	00015180 	.word	0x00015180

080021bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	2300      	movs	r3, #0
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <HAL_RTC_SetDate+0x24>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e097      	b.n	8002314 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	7c1b      	ldrb	r3, [r3, #16]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_RTC_SetDate+0x34>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e091      	b.n	8002314 <HAL_RTC_SetDate+0x158>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2202      	movs	r2, #2
 80021fa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	78da      	ldrb	r2, [r3, #3]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	785a      	ldrb	r2, [r3, #1]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	789a      	ldrb	r2, [r3, #2]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	739a      	strb	r2, [r3, #14]
 800221a:	e01a      	b.n	8002252 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	78db      	ldrb	r3, [r3, #3]
 8002220:	4618      	mov	r0, r3
 8002222:	f000 f9b2 	bl	800258a <RTC_Bcd2ToByte>
 8002226:	4603      	mov	r3, r0
 8002228:	461a      	mov	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	785b      	ldrb	r3, [r3, #1]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f9a9 	bl	800258a <RTC_Bcd2ToByte>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	789b      	ldrb	r3, [r3, #2]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 f9a0 	bl	800258a <RTC_Bcd2ToByte>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	7bdb      	ldrb	r3, [r3, #15]
 8002256:	4618      	mov	r0, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	7b59      	ldrb	r1, [r3, #13]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	7b9b      	ldrb	r3, [r3, #14]
 8002260:	461a      	mov	r2, r3
 8002262:	f000 fa8b 	bl	800277c <RTC_WeekDayNum>
 8002266:	4603      	mov	r3, r0
 8002268:	461a      	mov	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	7b1a      	ldrb	r2, [r3, #12]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f883 	bl	8002382 <RTC_ReadTimeCounter>
 800227c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	4a26      	ldr	r2, [pc, #152]	; (800231c <HAL_RTC_SetDate+0x160>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	0adb      	lsrs	r3, r3, #11
 8002288:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b18      	cmp	r3, #24
 800228e:	d93a      	bls.n	8002306 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	4a23      	ldr	r2, [pc, #140]	; (8002320 <HAL_RTC_SetDate+0x164>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	4a22      	ldr	r2, [pc, #136]	; (8002324 <HAL_RTC_SetDate+0x168>)
 800229c:	fb02 f303 	mul.w	r3, r2, r3
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80022a6:	69f9      	ldr	r1, [r7, #28]
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 f89a 	bl	80023e2 <RTC_WriteTimeCounter>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d007      	beq.n	80022c4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2204      	movs	r2, #4
 80022b8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e027      	b.n	8002314 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f8b3 	bl	8002430 <RTC_ReadAlarmCounter>
 80022ca:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d2:	d018      	beq.n	8002306 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d214      	bcs.n	8002306 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80022e2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80022e6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80022e8:	69b9      	ldr	r1, [r7, #24]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f8b9 	bl	8002462 <RTC_WriteAlarmCounter>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2204      	movs	r2, #4
 80022fa:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e006      	b.n	8002314 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3720      	adds	r7, #32
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	91a2b3c5 	.word	0x91a2b3c5
 8002320:	aaaaaaab 	.word	0xaaaaaaab
 8002324:	00015180 	.word	0x00015180

08002328 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e01d      	b.n	800237a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0208 	bic.w	r2, r2, #8
 800234c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800234e:	f7fe fccd 	bl	8000cec <HAL_GetTick>
 8002352:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002354:	e009      	b.n	800236a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002356:	f7fe fcc9 	bl	8000cec <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002364:	d901      	bls.n	800236a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e007      	b.n	800237a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0ee      	beq.n	8002356 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002382:	b480      	push	{r7}
 8002384:	b087      	sub	sp, #28
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	827b      	strh	r3, [r7, #18]
 800238e:	2300      	movs	r3, #0
 8002390:	823b      	strh	r3, [r7, #16]
 8002392:	2300      	movs	r3, #0
 8002394:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80023b2:	8a7a      	ldrh	r2, [r7, #18]
 80023b4:	8a3b      	ldrh	r3, [r7, #16]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d008      	beq.n	80023cc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80023ba:	8a3b      	ldrh	r3, [r7, #16]
 80023bc:	041a      	lsls	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	4313      	orrs	r3, r2
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	e004      	b.n	80023d6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80023cc:	8a7b      	ldrh	r3, [r7, #18]
 80023ce:	041a      	lsls	r2, r3, #16
 80023d0:	89fb      	ldrh	r3, [r7, #14]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80023d6:	697b      	ldr	r3, [r7, #20]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	371c      	adds	r7, #28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f85d 	bl	80024b0 <RTC_EnterInitMode>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
 8002400:	e011      	b.n	8002426 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	0c12      	lsrs	r2, r2, #16
 800240a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	b292      	uxth	r2, r2
 8002414:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f872 	bl	8002500 <RTC_ExitInitMode>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002426:	7bfb      	ldrb	r3, [r7, #15]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	81fb      	strh	r3, [r7, #14]
 800243c:	2300      	movs	r3, #0
 800243e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002450:	89fb      	ldrh	r3, [r7, #14]
 8002452:	041a      	lsls	r2, r3, #16
 8002454:	89bb      	ldrh	r3, [r7, #12]
 8002456:	4313      	orrs	r3, r2
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f81d 	bl	80024b0 <RTC_EnterInitMode>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	e011      	b.n	80024a6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	0c12      	lsrs	r2, r2, #16
 800248a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	b292      	uxth	r2, r2
 8002494:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f832 	bl	8002500 <RTC_ExitInitMode>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80024bc:	f7fe fc16 	bl	8000cec <HAL_GetTick>
 80024c0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80024c2:	e009      	b.n	80024d8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80024c4:	f7fe fc12 	bl	8000cec <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024d2:	d901      	bls.n	80024d8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e00f      	b.n	80024f8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0320 	and.w	r3, r3, #32
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0ee      	beq.n	80024c4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f042 0210 	orr.w	r2, r2, #16
 80024f4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0210 	bic.w	r2, r2, #16
 800251a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800251c:	f7fe fbe6 	bl	8000cec <HAL_GetTick>
 8002520:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002522:	e009      	b.n	8002538 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002524:	f7fe fbe2 	bl	8000cec <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002532:	d901      	bls.n	8002538 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e007      	b.n	8002548 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0ee      	beq.n	8002524 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800255e:	e005      	b.n	800256c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	3301      	adds	r3, #1
 8002564:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	3b0a      	subs	r3, #10
 800256a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	2b09      	cmp	r3, #9
 8002570:	d8f6      	bhi.n	8002560 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	b2da      	uxtb	r2, r3
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	4313      	orrs	r3, r2
 800257e:	b2db      	uxtb	r3, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800258a:	b480      	push	{r7}
 800258c:	b085      	sub	sp, #20
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	091b      	lsrs	r3, r3, #4
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	b2db      	uxtb	r3, r3
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	7bdb      	ldrb	r3, [r3, #15]
 80025e2:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7b5b      	ldrb	r3, [r3, #13]
 80025e8:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	7b9b      	ldrb	r3, [r3, #14]
 80025ee:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80025f0:	2300      	movs	r3, #0
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	e06f      	b.n	80026d6 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d011      	beq.n	8002620 <RTC_DateUpdate+0x5c>
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d00e      	beq.n	8002620 <RTC_DateUpdate+0x5c>
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	2b05      	cmp	r3, #5
 8002606:	d00b      	beq.n	8002620 <RTC_DateUpdate+0x5c>
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	2b07      	cmp	r3, #7
 800260c:	d008      	beq.n	8002620 <RTC_DateUpdate+0x5c>
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	2b08      	cmp	r3, #8
 8002612:	d005      	beq.n	8002620 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2b0a      	cmp	r3, #10
 8002618:	d002      	beq.n	8002620 <RTC_DateUpdate+0x5c>
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	2b0c      	cmp	r3, #12
 800261e:	d117      	bne.n	8002650 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b1e      	cmp	r3, #30
 8002624:	d803      	bhi.n	800262e <RTC_DateUpdate+0x6a>
      {
        day++;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	3301      	adds	r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800262c:	e050      	b.n	80026d0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d005      	beq.n	8002640 <RTC_DateUpdate+0x7c>
        {
          month++;
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	3301      	adds	r3, #1
 8002638:	613b      	str	r3, [r7, #16]
          day = 1U;
 800263a:	2301      	movs	r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800263e:	e047      	b.n	80026d0 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002640:	2301      	movs	r3, #1
 8002642:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002644:	2301      	movs	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
          year++;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	3301      	adds	r3, #1
 800264c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800264e:	e03f      	b.n	80026d0 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	2b04      	cmp	r3, #4
 8002654:	d008      	beq.n	8002668 <RTC_DateUpdate+0xa4>
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b06      	cmp	r3, #6
 800265a:	d005      	beq.n	8002668 <RTC_DateUpdate+0xa4>
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	2b09      	cmp	r3, #9
 8002660:	d002      	beq.n	8002668 <RTC_DateUpdate+0xa4>
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2b0b      	cmp	r3, #11
 8002666:	d10c      	bne.n	8002682 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b1d      	cmp	r3, #29
 800266c:	d803      	bhi.n	8002676 <RTC_DateUpdate+0xb2>
      {
        day++;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	3301      	adds	r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002674:	e02c      	b.n	80026d0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	3301      	adds	r3, #1
 800267a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800267c:	2301      	movs	r3, #1
 800267e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002680:	e026      	b.n	80026d0 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d123      	bne.n	80026d0 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b1b      	cmp	r3, #27
 800268c:	d803      	bhi.n	8002696 <RTC_DateUpdate+0xd2>
      {
        day++;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3301      	adds	r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	e01c      	b.n	80026d0 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b1c      	cmp	r3, #28
 800269a:	d111      	bne.n	80026c0 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 f839 	bl	8002718 <RTC_IsLeapYear>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <RTC_DateUpdate+0xf0>
        {
          day++;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	3301      	adds	r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	e00d      	b.n	80026d0 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	3301      	adds	r3, #1
 80026b8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80026ba:	2301      	movs	r3, #1
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	e007      	b.n	80026d0 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b1d      	cmp	r3, #29
 80026c4:	d104      	bne.n	80026d0 <RTC_DateUpdate+0x10c>
      {
        month++;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	3301      	adds	r3, #1
 80026ca:	613b      	str	r3, [r7, #16]
        day = 1U;
 80026cc:	2301      	movs	r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	3301      	adds	r3, #1
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d38b      	bcc.n	80025f6 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	4619      	mov	r1, r3
 8002700:	6978      	ldr	r0, [r7, #20]
 8002702:	f000 f83b 	bl	800277c <RTC_WeekDayNum>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	731a      	strb	r2, [r3, #12]
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	e01d      	b.n	800276e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	4a10      	ldr	r2, [pc, #64]	; (8002778 <RTC_IsLeapYear+0x60>)
 8002736:	fba2 1203 	umull	r1, r2, r2, r3
 800273a:	0952      	lsrs	r2, r2, #5
 800273c:	2164      	movs	r1, #100	; 0x64
 800273e:	fb01 f202 	mul.w	r2, r1, r2
 8002742:	1a9b      	subs	r3, r3, r2
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800274a:	2301      	movs	r3, #1
 800274c:	e00f      	b.n	800276e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	4a09      	ldr	r2, [pc, #36]	; (8002778 <RTC_IsLeapYear+0x60>)
 8002752:	fba2 1203 	umull	r1, r2, r2, r3
 8002756:	09d2      	lsrs	r2, r2, #7
 8002758:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800275c:	fb01 f202 	mul.w	r2, r1, r2
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800276c:	2300      	movs	r3, #0
  }
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr
 8002778:	51eb851f 	.word	0x51eb851f

0800277c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	70fb      	strb	r3, [r7, #3]
 8002788:	4613      	mov	r3, r2
 800278a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800279a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d82d      	bhi.n	80027fe <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	4613      	mov	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	4a2c      	ldr	r2, [pc, #176]	; (8002860 <RTC_WeekDayNum+0xe4>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	085a      	lsrs	r2, r3, #1
 80027b6:	78bb      	ldrb	r3, [r7, #2]
 80027b8:	441a      	add	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	441a      	add	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	441a      	add	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	4926      	ldr	r1, [pc, #152]	; (8002864 <RTC_WeekDayNum+0xe8>)
 80027cc:	fba1 1303 	umull	r1, r3, r1, r3
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	1ad2      	subs	r2, r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	4922      	ldr	r1, [pc, #136]	; (8002864 <RTC_WeekDayNum+0xe8>)
 80027da:	fba1 1303 	umull	r1, r3, r1, r3
 80027de:	09db      	lsrs	r3, r3, #7
 80027e0:	4413      	add	r3, r2
 80027e2:	1d1a      	adds	r2, r3, #4
 80027e4:	4b20      	ldr	r3, [pc, #128]	; (8002868 <RTC_WeekDayNum+0xec>)
 80027e6:	fba3 1302 	umull	r1, r3, r3, r2
 80027ea:	1ad1      	subs	r1, r2, r3
 80027ec:	0849      	lsrs	r1, r1, #1
 80027ee:	440b      	add	r3, r1
 80027f0:	0899      	lsrs	r1, r3, #2
 80027f2:	460b      	mov	r3, r1
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	1a5b      	subs	r3, r3, r1
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	e029      	b.n	8002852 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	4a15      	ldr	r2, [pc, #84]	; (8002860 <RTC_WeekDayNum+0xe4>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	085a      	lsrs	r2, r3, #1
 8002812:	78bb      	ldrb	r3, [r7, #2]
 8002814:	441a      	add	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	441a      	add	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	441a      	add	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4910      	ldr	r1, [pc, #64]	; (8002864 <RTC_WeekDayNum+0xe8>)
 8002824:	fba1 1303 	umull	r1, r3, r1, r3
 8002828:	095b      	lsrs	r3, r3, #5
 800282a:	1ad2      	subs	r2, r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	490d      	ldr	r1, [pc, #52]	; (8002864 <RTC_WeekDayNum+0xe8>)
 8002830:	fba1 1303 	umull	r1, r3, r1, r3
 8002834:	09db      	lsrs	r3, r3, #7
 8002836:	4413      	add	r3, r2
 8002838:	1c9a      	adds	r2, r3, #2
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <RTC_WeekDayNum+0xec>)
 800283c:	fba3 1302 	umull	r1, r3, r3, r2
 8002840:	1ad1      	subs	r1, r2, r3
 8002842:	0849      	lsrs	r1, r1, #1
 8002844:	440b      	add	r3, r1
 8002846:	0899      	lsrs	r1, r3, #2
 8002848:	460b      	mov	r3, r1
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	1a5b      	subs	r3, r3, r1
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	b2db      	uxtb	r3, r3
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	38e38e39 	.word	0x38e38e39
 8002864:	51eb851f 	.word	0x51eb851f
 8002868:	24924925 	.word	0x24924925

0800286c <HAL_RTCEx_SetSecond_IT>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSecond_IT(RTC_HandleTypeDef *hrtc)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check input parameters */
  if (hrtc == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RTCEx_SetSecond_IT+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e01a      	b.n	80028b4 <HAL_RTCEx_SetSecond_IT+0x48>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	7c1b      	ldrb	r3, [r3, #16]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_RTCEx_SetSecond_IT+0x1e>
 8002886:	2302      	movs	r3, #2
 8002888:	e014      	b.n	80028b4 <HAL_RTCEx_SetSecond_IT+0x48>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	745a      	strb	r2, [r3, #17]

  /* Enable Second interuption */
  __HAL_RTC_SECOND_ENABLE_IT(hrtc, RTC_IT_SEC);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0201 	orr.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

  hrtc->State = HAL_RTC_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d024      	beq.n	800291e <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d01d      	beq.n	800291e <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00b      	beq.n	8002908 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f821 	bl	8002938 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f06f 0204 	mvn.w	r2, #4
 80028fe:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2204      	movs	r2, #4
 8002904:	745a      	strb	r2, [r3, #17]
 8002906:	e005      	b.n	8002914 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f80c 	bl	8002926 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0201 	mvn.w	r2, #1
 800291c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e041      	b.n	80029e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d106      	bne.n	8002976 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7fd ff1f 	bl	80007b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3304      	adds	r3, #4
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f000 fa6b 	bl	8002e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d001      	beq.n	8002a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e03a      	b.n	8002a76 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a18      	ldr	r2, [pc, #96]	; (8002a80 <HAL_TIM_Base_Start_IT+0x98>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00e      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0x58>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2a:	d009      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0x58>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a14      	ldr	r2, [pc, #80]	; (8002a84 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d004      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0x58>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d111      	bne.n	8002a64 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b06      	cmp	r3, #6
 8002a50:	d010      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0201 	orr.w	r2, r2, #1
 8002a60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a62:	e007      	b.n	8002a74 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	40012c00 	.word	0x40012c00
 8002a84:	40000400 	.word	0x40000400
 8002a88:	40000800 	.word	0x40000800

08002a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d122      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d11b      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0202 	mvn.w	r2, #2
 8002ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f9ad 	bl	8002e2e <HAL_TIM_IC_CaptureCallback>
 8002ad4:	e005      	b.n	8002ae2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f9a0 	bl	8002e1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f9af 	bl	8002e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d122      	bne.n	8002b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d11b      	bne.n	8002b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0204 	mvn.w	r2, #4
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f983 	bl	8002e2e <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f976 	bl	8002e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f985 	bl	8002e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d122      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d11b      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0208 	mvn.w	r2, #8
 8002b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2204      	movs	r2, #4
 8002b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f959 	bl	8002e2e <HAL_TIM_IC_CaptureCallback>
 8002b7c:	e005      	b.n	8002b8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f94c 	bl	8002e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f95b 	bl	8002e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b10      	cmp	r3, #16
 8002b9c:	d122      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b10      	cmp	r3, #16
 8002baa:	d11b      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0210 	mvn.w	r2, #16
 8002bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2208      	movs	r2, #8
 8002bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f92f 	bl	8002e2e <HAL_TIM_IC_CaptureCallback>
 8002bd0:	e005      	b.n	8002bde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f922 	bl	8002e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f931 	bl	8002e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d10e      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d107      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0201 	mvn.w	r2, #1
 8002c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f8fd 	bl	8002e0a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1a:	2b80      	cmp	r3, #128	; 0x80
 8002c1c:	d10e      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c28:	2b80      	cmp	r3, #128	; 0x80
 8002c2a:	d107      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fa73 	bl	8003122 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	2b40      	cmp	r3, #64	; 0x40
 8002c48:	d10e      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c54:	2b40      	cmp	r3, #64	; 0x40
 8002c56:	d107      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f8f5 	bl	8002e52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	d10e      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d107      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0220 	mvn.w	r2, #32
 8002c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fa3e 	bl	8003110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_TIM_ConfigClockSource+0x18>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e0a6      	b.n	8002e02 <HAL_TIM_ConfigClockSource+0x166>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b40      	cmp	r3, #64	; 0x40
 8002cea:	d067      	beq.n	8002dbc <HAL_TIM_ConfigClockSource+0x120>
 8002cec:	2b40      	cmp	r3, #64	; 0x40
 8002cee:	d80b      	bhi.n	8002d08 <HAL_TIM_ConfigClockSource+0x6c>
 8002cf0:	2b10      	cmp	r3, #16
 8002cf2:	d073      	beq.n	8002ddc <HAL_TIM_ConfigClockSource+0x140>
 8002cf4:	2b10      	cmp	r3, #16
 8002cf6:	d802      	bhi.n	8002cfe <HAL_TIM_ConfigClockSource+0x62>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d06f      	beq.n	8002ddc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002cfc:	e078      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d06c      	beq.n	8002ddc <HAL_TIM_ConfigClockSource+0x140>
 8002d02:	2b30      	cmp	r3, #48	; 0x30
 8002d04:	d06a      	beq.n	8002ddc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002d06:	e073      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d08:	2b70      	cmp	r3, #112	; 0x70
 8002d0a:	d00d      	beq.n	8002d28 <HAL_TIM_ConfigClockSource+0x8c>
 8002d0c:	2b70      	cmp	r3, #112	; 0x70
 8002d0e:	d804      	bhi.n	8002d1a <HAL_TIM_ConfigClockSource+0x7e>
 8002d10:	2b50      	cmp	r3, #80	; 0x50
 8002d12:	d033      	beq.n	8002d7c <HAL_TIM_ConfigClockSource+0xe0>
 8002d14:	2b60      	cmp	r3, #96	; 0x60
 8002d16:	d041      	beq.n	8002d9c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002d18:	e06a      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d1e:	d066      	beq.n	8002dee <HAL_TIM_ConfigClockSource+0x152>
 8002d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d24:	d017      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002d26:	e063      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	6899      	ldr	r1, [r3, #8]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f000 f96d 	bl	8003016 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d4a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	609a      	str	r2, [r3, #8]
      break;
 8002d54:	e04c      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6899      	ldr	r1, [r3, #8]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f000 f956 	bl	8003016 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d78:	609a      	str	r2, [r3, #8]
      break;
 8002d7a:	e039      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	f000 f8cd 	bl	8002f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2150      	movs	r1, #80	; 0x50
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 f924 	bl	8002fe2 <TIM_ITRx_SetConfig>
      break;
 8002d9a:	e029      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	6859      	ldr	r1, [r3, #4]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	461a      	mov	r2, r3
 8002daa:	f000 f8eb 	bl	8002f84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2160      	movs	r1, #96	; 0x60
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 f914 	bl	8002fe2 <TIM_ITRx_SetConfig>
      break;
 8002dba:	e019      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f000 f8ad 	bl	8002f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2140      	movs	r1, #64	; 0x40
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 f904 	bl	8002fe2 <TIM_ITRx_SetConfig>
      break;
 8002dda:	e009      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4619      	mov	r1, r3
 8002de6:	4610      	mov	r0, r2
 8002de8:	f000 f8fb 	bl	8002fe2 <TIM_ITRx_SetConfig>
        break;
 8002dec:	e000      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002dee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr

08002e2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a29      	ldr	r2, [pc, #164]	; (8002f1c <TIM_Base_SetConfig+0xb8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00b      	beq.n	8002e94 <TIM_Base_SetConfig+0x30>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e82:	d007      	beq.n	8002e94 <TIM_Base_SetConfig+0x30>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a26      	ldr	r2, [pc, #152]	; (8002f20 <TIM_Base_SetConfig+0xbc>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d003      	beq.n	8002e94 <TIM_Base_SetConfig+0x30>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a25      	ldr	r2, [pc, #148]	; (8002f24 <TIM_Base_SetConfig+0xc0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d108      	bne.n	8002ea6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a1c      	ldr	r2, [pc, #112]	; (8002f1c <TIM_Base_SetConfig+0xb8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00b      	beq.n	8002ec6 <TIM_Base_SetConfig+0x62>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb4:	d007      	beq.n	8002ec6 <TIM_Base_SetConfig+0x62>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a19      	ldr	r2, [pc, #100]	; (8002f20 <TIM_Base_SetConfig+0xbc>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d003      	beq.n	8002ec6 <TIM_Base_SetConfig+0x62>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <TIM_Base_SetConfig+0xc0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d108      	bne.n	8002ed8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a07      	ldr	r2, [pc, #28]	; (8002f1c <TIM_Base_SetConfig+0xb8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d103      	bne.n	8002f0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	615a      	str	r2, [r3, #20]
}
 8002f12:	bf00      	nop
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40000400 	.word	0x40000400
 8002f24:	40000800 	.word	0x40000800

08002f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	f023 0201 	bic.w	r2, r3, #1
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f023 030a 	bic.w	r3, r3, #10
 8002f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	621a      	str	r2, [r3, #32]
}
 8002f7a:	bf00      	nop
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f023 0210 	bic.w	r2, r3, #16
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	031b      	lsls	r3, r3, #12
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	621a      	str	r2, [r3, #32]
}
 8002fd8:	bf00      	nop
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr

08002fe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f043 0307 	orr.w	r3, r3, #7
 8003004:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	609a      	str	r2, [r3, #8]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003016:	b480      	push	{r7}
 8003018:	b087      	sub	sp, #28
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003030:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	021a      	lsls	r2, r3, #8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	431a      	orrs	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	4313      	orrs	r3, r2
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	609a      	str	r2, [r3, #8]
}
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003068:	2302      	movs	r3, #2
 800306a:	e046      	b.n	80030fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a16      	ldr	r2, [pc, #88]	; (8003104 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00e      	beq.n	80030ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b8:	d009      	beq.n	80030ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a12      	ldr	r2, [pc, #72]	; (8003108 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d004      	beq.n	80030ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a10      	ldr	r2, [pc, #64]	; (800310c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d10c      	bne.n	80030e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	40012c00 	.word	0x40012c00
 8003108:	40000400 	.word	0x40000400
 800310c:	40000800 	.word	0x40000800

08003110 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr

08003122 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <__libc_init_array>:
 8003134:	b570      	push	{r4, r5, r6, lr}
 8003136:	2500      	movs	r5, #0
 8003138:	4e0c      	ldr	r6, [pc, #48]	; (800316c <__libc_init_array+0x38>)
 800313a:	4c0d      	ldr	r4, [pc, #52]	; (8003170 <__libc_init_array+0x3c>)
 800313c:	1ba4      	subs	r4, r4, r6
 800313e:	10a4      	asrs	r4, r4, #2
 8003140:	42a5      	cmp	r5, r4
 8003142:	d109      	bne.n	8003158 <__libc_init_array+0x24>
 8003144:	f000 f822 	bl	800318c <_init>
 8003148:	2500      	movs	r5, #0
 800314a:	4e0a      	ldr	r6, [pc, #40]	; (8003174 <__libc_init_array+0x40>)
 800314c:	4c0a      	ldr	r4, [pc, #40]	; (8003178 <__libc_init_array+0x44>)
 800314e:	1ba4      	subs	r4, r4, r6
 8003150:	10a4      	asrs	r4, r4, #2
 8003152:	42a5      	cmp	r5, r4
 8003154:	d105      	bne.n	8003162 <__libc_init_array+0x2e>
 8003156:	bd70      	pop	{r4, r5, r6, pc}
 8003158:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800315c:	4798      	blx	r3
 800315e:	3501      	adds	r5, #1
 8003160:	e7ee      	b.n	8003140 <__libc_init_array+0xc>
 8003162:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003166:	4798      	blx	r3
 8003168:	3501      	adds	r5, #1
 800316a:	e7f2      	b.n	8003152 <__libc_init_array+0x1e>
 800316c:	080031fc 	.word	0x080031fc
 8003170:	080031fc 	.word	0x080031fc
 8003174:	080031fc 	.word	0x080031fc
 8003178:	08003200 	.word	0x08003200

0800317c <memset>:
 800317c:	4603      	mov	r3, r0
 800317e:	4402      	add	r2, r0
 8003180:	4293      	cmp	r3, r2
 8003182:	d100      	bne.n	8003186 <memset+0xa>
 8003184:	4770      	bx	lr
 8003186:	f803 1b01 	strb.w	r1, [r3], #1
 800318a:	e7f9      	b.n	8003180 <memset+0x4>

0800318c <_init>:
 800318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318e:	bf00      	nop
 8003190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003192:	bc08      	pop	{r3}
 8003194:	469e      	mov	lr, r3
 8003196:	4770      	bx	lr

08003198 <_fini>:
 8003198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319a:	bf00      	nop
 800319c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319e:	bc08      	pop	{r3}
 80031a0:	469e      	mov	lr, r3
 80031a2:	4770      	bx	lr
