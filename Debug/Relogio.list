
Relogio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ad4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c30  08003c30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c30  08003c30  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c30  08003c30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c30  08003c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c34  08003c34  00013c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08003c44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08003c44  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b098  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dca  00000000  00000000  0002b0cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0002ce98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  0002da78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001719d  00000000  00000000  0002e570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c918  00000000  00000000  0004570d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000866ea  00000000  00000000  00052025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d870f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030a0  00000000  00000000  000d8764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bc8 	.word	0x08003bc8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003bc8 	.word	0x08003bc8

0800014c <PrintRelogio>:
#endif
}	//end PrintNumber


void PrintRelogio(uint8_t tempo)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	Dez_Minuto = Minutos /10;
	buffer[1] = font[Dez_Minuto];
	Uni_Minuto = Minutos % 10;
	buffer[0] = font[Uni_Minuto];
#else
	Dez_Hora = Horas / 10;
 8000156:	4b3a      	ldr	r3, [pc, #232]	; (8000240 <PrintRelogio+0xf4>)
 8000158:	781b      	ldrb	r3, [r3, #0]
 800015a:	4a3a      	ldr	r2, [pc, #232]	; (8000244 <PrintRelogio+0xf8>)
 800015c:	fba2 2303 	umull	r2, r3, r2, r3
 8000160:	08db      	lsrs	r3, r3, #3
 8000162:	b2db      	uxtb	r3, r3
 8000164:	461a      	mov	r2, r3
 8000166:	4b38      	ldr	r3, [pc, #224]	; (8000248 <PrintRelogio+0xfc>)
 8000168:	601a      	str	r2, [r3, #0]
	buffer[5] = font[Dez_Hora];
 800016a:	4b37      	ldr	r3, [pc, #220]	; (8000248 <PrintRelogio+0xfc>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a37      	ldr	r2, [pc, #220]	; (800024c <PrintRelogio+0x100>)
 8000170:	5cd2      	ldrb	r2, [r2, r3]
 8000172:	4b37      	ldr	r3, [pc, #220]	; (8000250 <PrintRelogio+0x104>)
 8000174:	715a      	strb	r2, [r3, #5]
	Uni_Hora = Horas % 10;
 8000176:	4b32      	ldr	r3, [pc, #200]	; (8000240 <PrintRelogio+0xf4>)
 8000178:	781a      	ldrb	r2, [r3, #0]
 800017a:	4b32      	ldr	r3, [pc, #200]	; (8000244 <PrintRelogio+0xf8>)
 800017c:	fba3 1302 	umull	r1, r3, r3, r2
 8000180:	08d9      	lsrs	r1, r3, #3
 8000182:	460b      	mov	r3, r1
 8000184:	009b      	lsls	r3, r3, #2
 8000186:	440b      	add	r3, r1
 8000188:	005b      	lsls	r3, r3, #1
 800018a:	1ad3      	subs	r3, r2, r3
 800018c:	b2db      	uxtb	r3, r3
 800018e:	461a      	mov	r2, r3
 8000190:	4b30      	ldr	r3, [pc, #192]	; (8000254 <PrintRelogio+0x108>)
 8000192:	601a      	str	r2, [r3, #0]
	buffer[4] = font[Uni_Hora];
 8000194:	4b2f      	ldr	r3, [pc, #188]	; (8000254 <PrintRelogio+0x108>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a2c      	ldr	r2, [pc, #176]	; (800024c <PrintRelogio+0x100>)
 800019a:	5cd2      	ldrb	r2, [r2, r3]
 800019c:	4b2c      	ldr	r3, [pc, #176]	; (8000250 <PrintRelogio+0x104>)
 800019e:	711a      	strb	r2, [r3, #4]
	Dez_Minuto = Minutos /10;
 80001a0:	4b2d      	ldr	r3, [pc, #180]	; (8000258 <PrintRelogio+0x10c>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	4a27      	ldr	r2, [pc, #156]	; (8000244 <PrintRelogio+0xf8>)
 80001a6:	fba2 2303 	umull	r2, r3, r2, r3
 80001aa:	08db      	lsrs	r3, r3, #3
 80001ac:	b2db      	uxtb	r3, r3
 80001ae:	461a      	mov	r2, r3
 80001b0:	4b2a      	ldr	r3, [pc, #168]	; (800025c <PrintRelogio+0x110>)
 80001b2:	601a      	str	r2, [r3, #0]
	buffer[3] = font[Dez_Minuto];
 80001b4:	4b29      	ldr	r3, [pc, #164]	; (800025c <PrintRelogio+0x110>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a24      	ldr	r2, [pc, #144]	; (800024c <PrintRelogio+0x100>)
 80001ba:	5cd2      	ldrb	r2, [r2, r3]
 80001bc:	4b24      	ldr	r3, [pc, #144]	; (8000250 <PrintRelogio+0x104>)
 80001be:	70da      	strb	r2, [r3, #3]
	Uni_Minuto = Minutos % 10;
 80001c0:	4b25      	ldr	r3, [pc, #148]	; (8000258 <PrintRelogio+0x10c>)
 80001c2:	781a      	ldrb	r2, [r3, #0]
 80001c4:	4b1f      	ldr	r3, [pc, #124]	; (8000244 <PrintRelogio+0xf8>)
 80001c6:	fba3 1302 	umull	r1, r3, r3, r2
 80001ca:	08d9      	lsrs	r1, r3, #3
 80001cc:	460b      	mov	r3, r1
 80001ce:	009b      	lsls	r3, r3, #2
 80001d0:	440b      	add	r3, r1
 80001d2:	005b      	lsls	r3, r3, #1
 80001d4:	1ad3      	subs	r3, r2, r3
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	461a      	mov	r2, r3
 80001da:	4b21      	ldr	r3, [pc, #132]	; (8000260 <PrintRelogio+0x114>)
 80001dc:	601a      	str	r2, [r3, #0]
	buffer[2] = font[Uni_Minuto];
 80001de:	4b20      	ldr	r3, [pc, #128]	; (8000260 <PrintRelogio+0x114>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a1a      	ldr	r2, [pc, #104]	; (800024c <PrintRelogio+0x100>)
 80001e4:	5cd2      	ldrb	r2, [r2, r3]
 80001e6:	4b1a      	ldr	r3, [pc, #104]	; (8000250 <PrintRelogio+0x104>)
 80001e8:	709a      	strb	r2, [r3, #2]
	Dez_Segundos = Segundos /10;
 80001ea:	4b1e      	ldr	r3, [pc, #120]	; (8000264 <PrintRelogio+0x118>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	4a15      	ldr	r2, [pc, #84]	; (8000244 <PrintRelogio+0xf8>)
 80001f0:	fba2 2303 	umull	r2, r3, r2, r3
 80001f4:	08db      	lsrs	r3, r3, #3
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	461a      	mov	r2, r3
 80001fa:	4b1b      	ldr	r3, [pc, #108]	; (8000268 <PrintRelogio+0x11c>)
 80001fc:	601a      	str	r2, [r3, #0]
	buffer[1] = font[Dez_Segundos];
 80001fe:	4b1a      	ldr	r3, [pc, #104]	; (8000268 <PrintRelogio+0x11c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a12      	ldr	r2, [pc, #72]	; (800024c <PrintRelogio+0x100>)
 8000204:	5cd2      	ldrb	r2, [r2, r3]
 8000206:	4b12      	ldr	r3, [pc, #72]	; (8000250 <PrintRelogio+0x104>)
 8000208:	705a      	strb	r2, [r3, #1]
	Uni_Segundos = Segundos % 10;
 800020a:	4b16      	ldr	r3, [pc, #88]	; (8000264 <PrintRelogio+0x118>)
 800020c:	781a      	ldrb	r2, [r3, #0]
 800020e:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <PrintRelogio+0xf8>)
 8000210:	fba3 1302 	umull	r1, r3, r3, r2
 8000214:	08d9      	lsrs	r1, r3, #3
 8000216:	460b      	mov	r3, r1
 8000218:	009b      	lsls	r3, r3, #2
 800021a:	440b      	add	r3, r1
 800021c:	005b      	lsls	r3, r3, #1
 800021e:	1ad3      	subs	r3, r2, r3
 8000220:	b2db      	uxtb	r3, r3
 8000222:	461a      	mov	r2, r3
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <PrintRelogio+0x120>)
 8000226:	601a      	str	r2, [r3, #0]
	buffer[0] = font[Uni_Segundos];
 8000228:	4b10      	ldr	r3, [pc, #64]	; (800026c <PrintRelogio+0x120>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a07      	ldr	r2, [pc, #28]	; (800024c <PrintRelogio+0x100>)
 800022e:	5cd2      	ldrb	r2, [r2, r3]
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <PrintRelogio+0x104>)
 8000232:	701a      	strb	r2, [r3, #0]
#endif
}
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	200000fe 	.word	0x200000fe
 8000244:	cccccccd 	.word	0xcccccccd
 8000248:	2000002c 	.word	0x2000002c
 800024c:	08003c00 	.word	0x08003c00
 8000250:	2000007c 	.word	0x2000007c
 8000254:	20000030 	.word	0x20000030
 8000258:	20000048 	.word	0x20000048
 800025c:	20000034 	.word	0x20000034
 8000260:	20000038 	.word	0x20000038
 8000264:	20000083 	.word	0x20000083
 8000268:	2000003c 	.word	0x2000003c
 800026c:	20000040 	.word	0x20000040

08000270 <MenuHora>:

void MenuHora(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	//seleciona hora
	buffer[5] = 0x76;	//H
 8000274:	4b85      	ldr	r3, [pc, #532]	; (800048c <MenuHora+0x21c>)
 8000276:	2276      	movs	r2, #118	; 0x76
 8000278:	715a      	strb	r2, [r3, #5]
	buffer[4] = 0x3F;	//O
 800027a:	4b84      	ldr	r3, [pc, #528]	; (800048c <MenuHora+0x21c>)
 800027c:	223f      	movs	r2, #63	; 0x3f
 800027e:	711a      	strb	r2, [r3, #4]

	//testando hora
	NovaHora = clkTime.Hours;
 8000280:	4b83      	ldr	r3, [pc, #524]	; (8000490 <MenuHora+0x220>)
 8000282:	781a      	ldrb	r2, [r3, #0]
 8000284:	4b83      	ldr	r3, [pc, #524]	; (8000494 <MenuHora+0x224>)
 8000286:	701a      	strb	r2, [r3, #0]
	NovaMin = clkTime.Minutes;
 8000288:	4b81      	ldr	r3, [pc, #516]	; (8000490 <MenuHora+0x220>)
 800028a:	785a      	ldrb	r2, [r3, #1]
 800028c:	4b82      	ldr	r3, [pc, #520]	; (8000498 <MenuHora+0x228>)
 800028e:	701a      	strb	r2, [r3, #0]

	buffer[3] = font[NovaHora / 10];
 8000290:	4b80      	ldr	r3, [pc, #512]	; (8000494 <MenuHora+0x224>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	4a81      	ldr	r2, [pc, #516]	; (800049c <MenuHora+0x22c>)
 8000296:	fba2 2303 	umull	r2, r3, r2, r3
 800029a:	08db      	lsrs	r3, r3, #3
 800029c:	b2db      	uxtb	r3, r3
 800029e:	461a      	mov	r2, r3
 80002a0:	4b7f      	ldr	r3, [pc, #508]	; (80004a0 <MenuHora+0x230>)
 80002a2:	5c9a      	ldrb	r2, [r3, r2]
 80002a4:	4b79      	ldr	r3, [pc, #484]	; (800048c <MenuHora+0x21c>)
 80002a6:	70da      	strb	r2, [r3, #3]
	buffer[2] = font[NovaHora % 10];
 80002a8:	4b7a      	ldr	r3, [pc, #488]	; (8000494 <MenuHora+0x224>)
 80002aa:	781a      	ldrb	r2, [r3, #0]
 80002ac:	4b7b      	ldr	r3, [pc, #492]	; (800049c <MenuHora+0x22c>)
 80002ae:	fba3 1302 	umull	r1, r3, r3, r2
 80002b2:	08d9      	lsrs	r1, r3, #3
 80002b4:	460b      	mov	r3, r1
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	440b      	add	r3, r1
 80002ba:	005b      	lsls	r3, r3, #1
 80002bc:	1ad3      	subs	r3, r2, r3
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	461a      	mov	r2, r3
 80002c2:	4b77      	ldr	r3, [pc, #476]	; (80004a0 <MenuHora+0x230>)
 80002c4:	5c9a      	ldrb	r2, [r3, r2]
 80002c6:	4b71      	ldr	r3, [pc, #452]	; (800048c <MenuHora+0x21c>)
 80002c8:	709a      	strb	r2, [r3, #2]
	buffer[1] = font[NovaMin / 10];
 80002ca:	4b73      	ldr	r3, [pc, #460]	; (8000498 <MenuHora+0x228>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	4a73      	ldr	r2, [pc, #460]	; (800049c <MenuHora+0x22c>)
 80002d0:	fba2 2303 	umull	r2, r3, r2, r3
 80002d4:	08db      	lsrs	r3, r3, #3
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	461a      	mov	r2, r3
 80002da:	4b71      	ldr	r3, [pc, #452]	; (80004a0 <MenuHora+0x230>)
 80002dc:	5c9a      	ldrb	r2, [r3, r2]
 80002de:	4b6b      	ldr	r3, [pc, #428]	; (800048c <MenuHora+0x21c>)
 80002e0:	705a      	strb	r2, [r3, #1]
	buffer[0] = font[NovaMin % 10];
 80002e2:	4b6d      	ldr	r3, [pc, #436]	; (8000498 <MenuHora+0x228>)
 80002e4:	781a      	ldrb	r2, [r3, #0]
 80002e6:	4b6d      	ldr	r3, [pc, #436]	; (800049c <MenuHora+0x22c>)
 80002e8:	fba3 1302 	umull	r1, r3, r3, r2
 80002ec:	08d9      	lsrs	r1, r3, #3
 80002ee:	460b      	mov	r3, r1
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	440b      	add	r3, r1
 80002f4:	005b      	lsls	r3, r3, #1
 80002f6:	1ad3      	subs	r3, r2, r3
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	461a      	mov	r2, r3
 80002fc:	4b68      	ldr	r3, [pc, #416]	; (80004a0 <MenuHora+0x230>)
 80002fe:	5c9a      	ldrb	r2, [r3, r2]
 8000300:	4b62      	ldr	r3, [pc, #392]	; (800048c <MenuHora+0x21c>)
 8000302:	701a      	strb	r2, [r3, #0]

	while (CH_HORA == 0)
 8000304:	e16f      	b.n	80005e6 <MenuHora+0x376>
	{
		CH_HORA = HAL_GPIO_ReadPin(CH_HORA_GPIO_Port, CH_HORA_Pin);
 8000306:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800030a:	4866      	ldr	r0, [pc, #408]	; (80004a4 <MenuHora+0x234>)
 800030c:	f001 fbb0 	bl	8001a70 <HAL_GPIO_ReadPin>
 8000310:	4603      	mov	r3, r0
 8000312:	461a      	mov	r2, r3
 8000314:	4b64      	ldr	r3, [pc, #400]	; (80004a8 <MenuHora+0x238>)
 8000316:	601a      	str	r2, [r3, #0]
		HAL_Delay(75);
 8000318:	204b      	movs	r0, #75	; 0x4b
 800031a:	f001 f8f3 	bl	8001504 <HAL_Delay>
		if (CH_HORA == 1) {
 800031e:	4b62      	ldr	r3, [pc, #392]	; (80004a8 <MenuHora+0x238>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d116      	bne.n	8000354 <MenuHora+0xe4>

			clkTime.Hours = NovaHora;
 8000326:	4b5b      	ldr	r3, [pc, #364]	; (8000494 <MenuHora+0x224>)
 8000328:	781a      	ldrb	r2, [r3, #0]
 800032a:	4b59      	ldr	r3, [pc, #356]	; (8000490 <MenuHora+0x220>)
 800032c:	701a      	strb	r2, [r3, #0]
			clkTime.Minutes = NovaMin;
 800032e:	4b5a      	ldr	r3, [pc, #360]	; (8000498 <MenuHora+0x228>)
 8000330:	781a      	ldrb	r2, [r3, #0]
 8000332:	4b57      	ldr	r3, [pc, #348]	; (8000490 <MenuHora+0x220>)
 8000334:	705a      	strb	r2, [r3, #1]
			clkTime.Seconds = 0x00;
 8000336:	4b56      	ldr	r3, [pc, #344]	; (8000490 <MenuHora+0x220>)
 8000338:	2200      	movs	r2, #0
 800033a:	709a      	strb	r2, [r3, #2]

			if(HAL_RTC_SetTime(&hrtc, &clkTime, RTC_FORMAT_BIN) != HAL_OK){
 800033c:	2200      	movs	r2, #0
 800033e:	4954      	ldr	r1, [pc, #336]	; (8000490 <MenuHora+0x220>)
 8000340:	485a      	ldr	r0, [pc, #360]	; (80004ac <MenuHora+0x23c>)
 8000342:	f002 f9ff 	bl	8002744 <HAL_RTC_SetTime>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	f000 8152 	beq.w	80005f2 <MenuHora+0x382>
				Error_Handler();
 800034e:	f000 fdbd 	bl	8000ecc <Error_Handler>
			}
			break;
 8000352:	e14e      	b.n	80005f2 <MenuHora+0x382>
		}

		//acerta hora
		Set_Hora = 1;
 8000354:	4b56      	ldr	r3, [pc, #344]	; (80004b0 <MenuHora+0x240>)
 8000356:	2201      	movs	r2, #1
 8000358:	601a      	str	r2, [r3, #0]
		DspPisca = 1;
 800035a:	4b56      	ldr	r3, [pc, #344]	; (80004b4 <MenuHora+0x244>)
 800035c:	2201      	movs	r2, #1
 800035e:	601a      	str	r2, [r3, #0]
		while (Set_Hora){
 8000360:	e087      	b.n	8000472 <MenuHora+0x202>
			BTUP = HAL_GPIO_ReadPin(BTUP_GPIO_Port, BTUP_Pin);
 8000362:	2108      	movs	r1, #8
 8000364:	4854      	ldr	r0, [pc, #336]	; (80004b8 <MenuHora+0x248>)
 8000366:	f001 fb83 	bl	8001a70 <HAL_GPIO_ReadPin>
 800036a:	4603      	mov	r3, r0
 800036c:	461a      	mov	r2, r3
 800036e:	4b53      	ldr	r3, [pc, #332]	; (80004bc <MenuHora+0x24c>)
 8000370:	601a      	str	r2, [r3, #0]
			HAL_Delay(75);
 8000372:	204b      	movs	r0, #75	; 0x4b
 8000374:	f001 f8c6 	bl	8001504 <HAL_Delay>
			if (BTUP == 0){
 8000378:	4b50      	ldr	r3, [pc, #320]	; (80004bc <MenuHora+0x24c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d10f      	bne.n	80003a0 <MenuHora+0x130>
				NovaHora ++;
 8000380:	4b44      	ldr	r3, [pc, #272]	; (8000494 <MenuHora+0x224>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	3301      	adds	r3, #1
 8000386:	b2da      	uxtb	r2, r3
 8000388:	4b42      	ldr	r3, [pc, #264]	; (8000494 <MenuHora+0x224>)
 800038a:	701a      	strb	r2, [r3, #0]
				if (NovaHora == 24){
 800038c:	4b41      	ldr	r3, [pc, #260]	; (8000494 <MenuHora+0x224>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b18      	cmp	r3, #24
 8000392:	d102      	bne.n	800039a <MenuHora+0x12a>
					NovaHora = 0;
 8000394:	4b3f      	ldr	r3, [pc, #252]	; (8000494 <MenuHora+0x224>)
 8000396:	2200      	movs	r2, #0
 8000398:	701a      	strb	r2, [r3, #0]
				}
				BTUP = 1;
 800039a:	4b48      	ldr	r3, [pc, #288]	; (80004bc <MenuHora+0x24c>)
 800039c:	2201      	movs	r2, #1
 800039e:	601a      	str	r2, [r3, #0]
			}

			BTDOWN = HAL_GPIO_ReadPin(BTDOWN_GPIO_Port, BTDOWN_Pin);
 80003a0:	2110      	movs	r1, #16
 80003a2:	4845      	ldr	r0, [pc, #276]	; (80004b8 <MenuHora+0x248>)
 80003a4:	f001 fb64 	bl	8001a70 <HAL_GPIO_ReadPin>
 80003a8:	4603      	mov	r3, r0
 80003aa:	461a      	mov	r2, r3
 80003ac:	4b44      	ldr	r3, [pc, #272]	; (80004c0 <MenuHora+0x250>)
 80003ae:	601a      	str	r2, [r3, #0]
			HAL_Delay(75);
 80003b0:	204b      	movs	r0, #75	; 0x4b
 80003b2:	f001 f8a7 	bl	8001504 <HAL_Delay>
			if (BTDOWN == 0) {
 80003b6:	4b42      	ldr	r3, [pc, #264]	; (80004c0 <MenuHora+0x250>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d113      	bne.n	80003e6 <MenuHora+0x176>
				NovaHora --;
 80003be:	4b35      	ldr	r3, [pc, #212]	; (8000494 <MenuHora+0x224>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	4b33      	ldr	r3, [pc, #204]	; (8000494 <MenuHora+0x224>)
 80003c8:	701a      	strb	r2, [r3, #0]
				if (NovaHora == 0 || NovaHora == 255) {
 80003ca:	4b32      	ldr	r3, [pc, #200]	; (8000494 <MenuHora+0x224>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d003      	beq.n	80003da <MenuHora+0x16a>
 80003d2:	4b30      	ldr	r3, [pc, #192]	; (8000494 <MenuHora+0x224>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2bff      	cmp	r3, #255	; 0xff
 80003d8:	d102      	bne.n	80003e0 <MenuHora+0x170>
					NovaHora = 23;
 80003da:	4b2e      	ldr	r3, [pc, #184]	; (8000494 <MenuHora+0x224>)
 80003dc:	2217      	movs	r2, #23
 80003de:	701a      	strb	r2, [r3, #0]
				}
				BTDOWN = 1;
 80003e0:	4b37      	ldr	r3, [pc, #220]	; (80004c0 <MenuHora+0x250>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	601a      	str	r2, [r3, #0]
			}

			if (DspPisca) {
 80003e6:	4b33      	ldr	r3, [pc, #204]	; (80004b4 <MenuHora+0x244>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d023      	beq.n	8000436 <MenuHora+0x1c6>
				buffer[3] = font[NovaHora / 10];
 80003ee:	4b29      	ldr	r3, [pc, #164]	; (8000494 <MenuHora+0x224>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	4a2a      	ldr	r2, [pc, #168]	; (800049c <MenuHora+0x22c>)
 80003f4:	fba2 2303 	umull	r2, r3, r2, r3
 80003f8:	08db      	lsrs	r3, r3, #3
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	461a      	mov	r2, r3
 80003fe:	4b28      	ldr	r3, [pc, #160]	; (80004a0 <MenuHora+0x230>)
 8000400:	5c9a      	ldrb	r2, [r3, r2]
 8000402:	4b22      	ldr	r3, [pc, #136]	; (800048c <MenuHora+0x21c>)
 8000404:	70da      	strb	r2, [r3, #3]
				buffer[2] = font[NovaHora % 10];
 8000406:	4b23      	ldr	r3, [pc, #140]	; (8000494 <MenuHora+0x224>)
 8000408:	781a      	ldrb	r2, [r3, #0]
 800040a:	4b24      	ldr	r3, [pc, #144]	; (800049c <MenuHora+0x22c>)
 800040c:	fba3 1302 	umull	r1, r3, r3, r2
 8000410:	08d9      	lsrs	r1, r3, #3
 8000412:	460b      	mov	r3, r1
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	440b      	add	r3, r1
 8000418:	005b      	lsls	r3, r3, #1
 800041a:	1ad3      	subs	r3, r2, r3
 800041c:	b2db      	uxtb	r3, r3
 800041e:	461a      	mov	r2, r3
 8000420:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <MenuHora+0x230>)
 8000422:	5c9a      	ldrb	r2, [r3, r2]
 8000424:	4b19      	ldr	r3, [pc, #100]	; (800048c <MenuHora+0x21c>)
 8000426:	709a      	strb	r2, [r3, #2]
				HAL_Delay(25);
 8000428:	2019      	movs	r0, #25
 800042a:	f001 f86b 	bl	8001504 <HAL_Delay>
				DspPisca = 0;
 800042e:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <MenuHora+0x244>)
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	e00b      	b.n	800044e <MenuHora+0x1de>
			} else {
				buffer[3] = 0x00;	//Apagado
 8000436:	4b15      	ldr	r3, [pc, #84]	; (800048c <MenuHora+0x21c>)
 8000438:	2200      	movs	r2, #0
 800043a:	70da      	strb	r2, [r3, #3]
				buffer[2] = 0x00;	//Apagado
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <MenuHora+0x21c>)
 800043e:	2200      	movs	r2, #0
 8000440:	709a      	strb	r2, [r3, #2]
				HAL_Delay(25);
 8000442:	2019      	movs	r0, #25
 8000444:	f001 f85e 	bl	8001504 <HAL_Delay>
				DspPisca = 1;
 8000448:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <MenuHora+0x244>)
 800044a:	2201      	movs	r2, #1
 800044c:	601a      	str	r2, [r3, #0]
			}

			BTSET = HAL_GPIO_ReadPin(BTSET_GPIO_Port, BTSET_Pin);
 800044e:	2180      	movs	r1, #128	; 0x80
 8000450:	4819      	ldr	r0, [pc, #100]	; (80004b8 <MenuHora+0x248>)
 8000452:	f001 fb0d 	bl	8001a70 <HAL_GPIO_ReadPin>
 8000456:	4603      	mov	r3, r0
 8000458:	461a      	mov	r2, r3
 800045a:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <MenuHora+0x254>)
 800045c:	601a      	str	r2, [r3, #0]
			HAL_Delay(75);
 800045e:	204b      	movs	r0, #75	; 0x4b
 8000460:	f001 f850 	bl	8001504 <HAL_Delay>
			if (!BTSET) {
 8000464:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <MenuHora+0x254>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d102      	bne.n	8000472 <MenuHora+0x202>
				Set_Hora = 0;
 800046c:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <MenuHora+0x240>)
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
		while (Set_Hora){
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MenuHora+0x240>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	f47f af73 	bne.w	8000362 <MenuHora+0xf2>
			}
		}

		// acerta minuto
		Set_Min = 1;
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <MenuHora+0x258>)
 800047e:	2201      	movs	r2, #1
 8000480:	601a      	str	r2, [r3, #0]
		DspPisca = 1;
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MenuHora+0x244>)
 8000484:	2201      	movs	r2, #1
 8000486:	601a      	str	r2, [r3, #0]
		while (Set_Min){
 8000488:	e0a8      	b.n	80005dc <MenuHora+0x36c>
 800048a:	bf00      	nop
 800048c:	2000007c 	.word	0x2000007c
 8000490:	20000064 	.word	0x20000064
 8000494:	2000005c 	.word	0x2000005c
 8000498:	200000fc 	.word	0x200000fc
 800049c:	cccccccd 	.word	0xcccccccd
 80004a0:	08003c00 	.word	0x08003c00
 80004a4:	40010800 	.word	0x40010800
 80004a8:	20000068 	.word	0x20000068
 80004ac:	20000084 	.word	0x20000084
 80004b0:	2000009c 	.word	0x2000009c
 80004b4:	20000074 	.word	0x20000074
 80004b8:	40010c00 	.word	0x40010c00
 80004bc:	200000a0 	.word	0x200000a0
 80004c0:	20000060 	.word	0x20000060
 80004c4:	200000f8 	.word	0x200000f8
 80004c8:	20000078 	.word	0x20000078
			BTUP = HAL_GPIO_ReadPin(BTUP_GPIO_Port, BTUP_Pin);
 80004cc:	2108      	movs	r1, #8
 80004ce:	484a      	ldr	r0, [pc, #296]	; (80005f8 <MenuHora+0x388>)
 80004d0:	f001 face 	bl	8001a70 <HAL_GPIO_ReadPin>
 80004d4:	4603      	mov	r3, r0
 80004d6:	461a      	mov	r2, r3
 80004d8:	4b48      	ldr	r3, [pc, #288]	; (80005fc <MenuHora+0x38c>)
 80004da:	601a      	str	r2, [r3, #0]
			HAL_Delay(75);
 80004dc:	204b      	movs	r0, #75	; 0x4b
 80004de:	f001 f811 	bl	8001504 <HAL_Delay>
			if (BTUP == 0){
 80004e2:	4b46      	ldr	r3, [pc, #280]	; (80005fc <MenuHora+0x38c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d10f      	bne.n	800050a <MenuHora+0x29a>
				NovaMin ++;
 80004ea:	4b45      	ldr	r3, [pc, #276]	; (8000600 <MenuHora+0x390>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	3301      	adds	r3, #1
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	4b43      	ldr	r3, [pc, #268]	; (8000600 <MenuHora+0x390>)
 80004f4:	701a      	strb	r2, [r3, #0]
				if (NovaMin == 59){
 80004f6:	4b42      	ldr	r3, [pc, #264]	; (8000600 <MenuHora+0x390>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b3b      	cmp	r3, #59	; 0x3b
 80004fc:	d102      	bne.n	8000504 <MenuHora+0x294>
					NovaMin = 0;
 80004fe:	4b40      	ldr	r3, [pc, #256]	; (8000600 <MenuHora+0x390>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
				}
				BTUP = 1;
 8000504:	4b3d      	ldr	r3, [pc, #244]	; (80005fc <MenuHora+0x38c>)
 8000506:	2201      	movs	r2, #1
 8000508:	601a      	str	r2, [r3, #0]
			}

			BTDOWN = HAL_GPIO_ReadPin(BTDOWN_GPIO_Port, BTDOWN_Pin);
 800050a:	2110      	movs	r1, #16
 800050c:	483a      	ldr	r0, [pc, #232]	; (80005f8 <MenuHora+0x388>)
 800050e:	f001 faaf 	bl	8001a70 <HAL_GPIO_ReadPin>
 8000512:	4603      	mov	r3, r0
 8000514:	461a      	mov	r2, r3
 8000516:	4b3b      	ldr	r3, [pc, #236]	; (8000604 <MenuHora+0x394>)
 8000518:	601a      	str	r2, [r3, #0]
			HAL_Delay(75);
 800051a:	204b      	movs	r0, #75	; 0x4b
 800051c:	f000 fff2 	bl	8001504 <HAL_Delay>
			if (BTDOWN == 0) {
 8000520:	4b38      	ldr	r3, [pc, #224]	; (8000604 <MenuHora+0x394>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d113      	bne.n	8000550 <MenuHora+0x2e0>
				NovaMin --;
 8000528:	4b35      	ldr	r3, [pc, #212]	; (8000600 <MenuHora+0x390>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	3b01      	subs	r3, #1
 800052e:	b2da      	uxtb	r2, r3
 8000530:	4b33      	ldr	r3, [pc, #204]	; (8000600 <MenuHora+0x390>)
 8000532:	701a      	strb	r2, [r3, #0]
				if (NovaMin == 0 || NovaMin == 255) {
 8000534:	4b32      	ldr	r3, [pc, #200]	; (8000600 <MenuHora+0x390>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d003      	beq.n	8000544 <MenuHora+0x2d4>
 800053c:	4b30      	ldr	r3, [pc, #192]	; (8000600 <MenuHora+0x390>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2bff      	cmp	r3, #255	; 0xff
 8000542:	d102      	bne.n	800054a <MenuHora+0x2da>
					NovaMin = 59;
 8000544:	4b2e      	ldr	r3, [pc, #184]	; (8000600 <MenuHora+0x390>)
 8000546:	223b      	movs	r2, #59	; 0x3b
 8000548:	701a      	strb	r2, [r3, #0]
				}
				BTDOWN = 1;
 800054a:	4b2e      	ldr	r3, [pc, #184]	; (8000604 <MenuHora+0x394>)
 800054c:	2201      	movs	r2, #1
 800054e:	601a      	str	r2, [r3, #0]
			}

			if (DspPisca) {
 8000550:	4b2d      	ldr	r3, [pc, #180]	; (8000608 <MenuHora+0x398>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d023      	beq.n	80005a0 <MenuHora+0x330>
				buffer[1] = font[NovaMin / 10];
 8000558:	4b29      	ldr	r3, [pc, #164]	; (8000600 <MenuHora+0x390>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4a2b      	ldr	r2, [pc, #172]	; (800060c <MenuHora+0x39c>)
 800055e:	fba2 2303 	umull	r2, r3, r2, r3
 8000562:	08db      	lsrs	r3, r3, #3
 8000564:	b2db      	uxtb	r3, r3
 8000566:	461a      	mov	r2, r3
 8000568:	4b29      	ldr	r3, [pc, #164]	; (8000610 <MenuHora+0x3a0>)
 800056a:	5c9a      	ldrb	r2, [r3, r2]
 800056c:	4b29      	ldr	r3, [pc, #164]	; (8000614 <MenuHora+0x3a4>)
 800056e:	705a      	strb	r2, [r3, #1]
				buffer[0] = font[NovaMin % 10];
 8000570:	4b23      	ldr	r3, [pc, #140]	; (8000600 <MenuHora+0x390>)
 8000572:	781a      	ldrb	r2, [r3, #0]
 8000574:	4b25      	ldr	r3, [pc, #148]	; (800060c <MenuHora+0x39c>)
 8000576:	fba3 1302 	umull	r1, r3, r3, r2
 800057a:	08d9      	lsrs	r1, r3, #3
 800057c:	460b      	mov	r3, r1
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	440b      	add	r3, r1
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	b2db      	uxtb	r3, r3
 8000588:	461a      	mov	r2, r3
 800058a:	4b21      	ldr	r3, [pc, #132]	; (8000610 <MenuHora+0x3a0>)
 800058c:	5c9a      	ldrb	r2, [r3, r2]
 800058e:	4b21      	ldr	r3, [pc, #132]	; (8000614 <MenuHora+0x3a4>)
 8000590:	701a      	strb	r2, [r3, #0]
				HAL_Delay(50);
 8000592:	2032      	movs	r0, #50	; 0x32
 8000594:	f000 ffb6 	bl	8001504 <HAL_Delay>
				DspPisca = 0;
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <MenuHora+0x398>)
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	e00b      	b.n	80005b8 <MenuHora+0x348>
			} else {
				buffer[1] = 0x00;		//Apagado
 80005a0:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <MenuHora+0x3a4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	705a      	strb	r2, [r3, #1]
				buffer[0] = 0x00;		//Apagado
 80005a6:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <MenuHora+0x3a4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
				HAL_Delay(50);
 80005ac:	2032      	movs	r0, #50	; 0x32
 80005ae:	f000 ffa9 	bl	8001504 <HAL_Delay>
				DspPisca = 1;
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MenuHora+0x398>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	601a      	str	r2, [r3, #0]
			}

			BTSET = HAL_GPIO_ReadPin(BTSET_GPIO_Port, BTSET_Pin);
 80005b8:	2180      	movs	r1, #128	; 0x80
 80005ba:	480f      	ldr	r0, [pc, #60]	; (80005f8 <MenuHora+0x388>)
 80005bc:	f001 fa58 	bl	8001a70 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <MenuHora+0x3a8>)
 80005c6:	601a      	str	r2, [r3, #0]
			HAL_Delay(75);
 80005c8:	204b      	movs	r0, #75	; 0x4b
 80005ca:	f000 ff9b 	bl	8001504 <HAL_Delay>
			if (!BTSET) {
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MenuHora+0x3a8>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d102      	bne.n	80005dc <MenuHora+0x36c>
				Set_Min = 0;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MenuHora+0x3ac>)
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
		while (Set_Min){
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MenuHora+0x3ac>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	f47f af73 	bne.w	80004cc <MenuHora+0x25c>
	while (CH_HORA == 0)
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MenuHora+0x3b0>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	f43f ae8b 	beq.w	8000306 <MenuHora+0x96>
			}
		}
	}
}
 80005f0:	e000      	b.n	80005f4 <MenuHora+0x384>
			break;
 80005f2:	bf00      	nop
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40010c00 	.word	0x40010c00
 80005fc:	200000a0 	.word	0x200000a0
 8000600:	200000fc 	.word	0x200000fc
 8000604:	20000060 	.word	0x20000060
 8000608:	20000074 	.word	0x20000074
 800060c:	cccccccd 	.word	0xcccccccd
 8000610:	08003c00 	.word	0x08003c00
 8000614:	2000007c 	.word	0x2000007c
 8000618:	200000f8 	.word	0x200000f8
 800061c:	20000078 	.word	0x20000078
 8000620:	20000068 	.word	0x20000068

08000624 <MenuAlarme>:

void MenuAlarme(void){
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	//seleciona alarme
	buffer[5] = 0x77;	//mostra letra A
 8000628:	4b86      	ldr	r3, [pc, #536]	; (8000844 <MenuAlarme+0x220>)
 800062a:	2277      	movs	r2, #119	; 0x77
 800062c:	715a      	strb	r2, [r3, #5]
	buffer[4] = 0x38;	//mostra letra L
 800062e:	4b85      	ldr	r3, [pc, #532]	; (8000844 <MenuAlarme+0x220>)
 8000630:	2238      	movs	r2, #56	; 0x38
 8000632:	711a      	strb	r2, [r3, #4]

	//testando alarme
	AlHora = sAlarm.AlarmTime.Hours;
 8000634:	4b84      	ldr	r3, [pc, #528]	; (8000848 <MenuAlarme+0x224>)
 8000636:	781a      	ldrb	r2, [r3, #0]
 8000638:	4b84      	ldr	r3, [pc, #528]	; (800084c <MenuAlarme+0x228>)
 800063a:	701a      	strb	r2, [r3, #0]
	AlMin = sAlarm.AlarmTime.Minutes;
 800063c:	4b82      	ldr	r3, [pc, #520]	; (8000848 <MenuAlarme+0x224>)
 800063e:	785a      	ldrb	r2, [r3, #1]
 8000640:	4b83      	ldr	r3, [pc, #524]	; (8000850 <MenuAlarme+0x22c>)
 8000642:	701a      	strb	r2, [r3, #0]

	buffer[3] = font[AlHora / 10];
 8000644:	4b81      	ldr	r3, [pc, #516]	; (800084c <MenuAlarme+0x228>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4a82      	ldr	r2, [pc, #520]	; (8000854 <MenuAlarme+0x230>)
 800064a:	fba2 2303 	umull	r2, r3, r2, r3
 800064e:	08db      	lsrs	r3, r3, #3
 8000650:	b2db      	uxtb	r3, r3
 8000652:	461a      	mov	r2, r3
 8000654:	4b80      	ldr	r3, [pc, #512]	; (8000858 <MenuAlarme+0x234>)
 8000656:	5c9a      	ldrb	r2, [r3, r2]
 8000658:	4b7a      	ldr	r3, [pc, #488]	; (8000844 <MenuAlarme+0x220>)
 800065a:	70da      	strb	r2, [r3, #3]
	buffer[2] = font[AlHora % 10];
 800065c:	4b7b      	ldr	r3, [pc, #492]	; (800084c <MenuAlarme+0x228>)
 800065e:	781a      	ldrb	r2, [r3, #0]
 8000660:	4b7c      	ldr	r3, [pc, #496]	; (8000854 <MenuAlarme+0x230>)
 8000662:	fba3 1302 	umull	r1, r3, r3, r2
 8000666:	08d9      	lsrs	r1, r3, #3
 8000668:	460b      	mov	r3, r1
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	440b      	add	r3, r1
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	461a      	mov	r2, r3
 8000676:	4b78      	ldr	r3, [pc, #480]	; (8000858 <MenuAlarme+0x234>)
 8000678:	5c9a      	ldrb	r2, [r3, r2]
 800067a:	4b72      	ldr	r3, [pc, #456]	; (8000844 <MenuAlarme+0x220>)
 800067c:	709a      	strb	r2, [r3, #2]
	buffer[1] = font[AlMin / 10];
 800067e:	4b74      	ldr	r3, [pc, #464]	; (8000850 <MenuAlarme+0x22c>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	4a74      	ldr	r2, [pc, #464]	; (8000854 <MenuAlarme+0x230>)
 8000684:	fba2 2303 	umull	r2, r3, r2, r3
 8000688:	08db      	lsrs	r3, r3, #3
 800068a:	b2db      	uxtb	r3, r3
 800068c:	461a      	mov	r2, r3
 800068e:	4b72      	ldr	r3, [pc, #456]	; (8000858 <MenuAlarme+0x234>)
 8000690:	5c9a      	ldrb	r2, [r3, r2]
 8000692:	4b6c      	ldr	r3, [pc, #432]	; (8000844 <MenuAlarme+0x220>)
 8000694:	705a      	strb	r2, [r3, #1]
	buffer[0] = font[AlMin % 10];
 8000696:	4b6e      	ldr	r3, [pc, #440]	; (8000850 <MenuAlarme+0x22c>)
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	4b6e      	ldr	r3, [pc, #440]	; (8000854 <MenuAlarme+0x230>)
 800069c:	fba3 1302 	umull	r1, r3, r3, r2
 80006a0:	08d9      	lsrs	r1, r3, #3
 80006a2:	460b      	mov	r3, r1
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	440b      	add	r3, r1
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b69      	ldr	r3, [pc, #420]	; (8000858 <MenuAlarme+0x234>)
 80006b2:	5c9a      	ldrb	r2, [r3, r2]
 80006b4:	4b63      	ldr	r3, [pc, #396]	; (8000844 <MenuAlarme+0x220>)
 80006b6:	701a      	strb	r2, [r3, #0]

	while (CH_AL == 0)
 80006b8:	e171      	b.n	800099e <MenuAlarme+0x37a>
	{
		CH_AL = HAL_GPIO_ReadPin(CH_AL_GPIO_Port, CH_AL_Pin);
 80006ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006be:	4867      	ldr	r0, [pc, #412]	; (800085c <MenuAlarme+0x238>)
 80006c0:	f001 f9d6 	bl	8001a70 <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b65      	ldr	r3, [pc, #404]	; (8000860 <MenuAlarme+0x23c>)
 80006ca:	601a      	str	r2, [r3, #0]
		HAL_Delay(75);
 80006cc:	204b      	movs	r0, #75	; 0x4b
 80006ce:	f000 ff19 	bl	8001504 <HAL_Delay>
		if (CH_AL == 1) {
 80006d2:	4b63      	ldr	r3, [pc, #396]	; (8000860 <MenuAlarme+0x23c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d119      	bne.n	800070e <MenuAlarme+0xea>
			sAlarm.AlarmTime.Hours = AlHora;
 80006da:	4b5c      	ldr	r3, [pc, #368]	; (800084c <MenuAlarme+0x228>)
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	4b5a      	ldr	r3, [pc, #360]	; (8000848 <MenuAlarme+0x224>)
 80006e0:	701a      	strb	r2, [r3, #0]
			sAlarm.AlarmTime.Minutes = AlMin;
 80006e2:	4b5b      	ldr	r3, [pc, #364]	; (8000850 <MenuAlarme+0x22c>)
 80006e4:	781a      	ldrb	r2, [r3, #0]
 80006e6:	4b58      	ldr	r3, [pc, #352]	; (8000848 <MenuAlarme+0x224>)
 80006e8:	705a      	strb	r2, [r3, #1]
			sAlarm.AlarmTime.Seconds = 0x00;
 80006ea:	4b57      	ldr	r3, [pc, #348]	; (8000848 <MenuAlarme+0x224>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	709a      	strb	r2, [r3, #2]
			sAlarm.Alarm = RTC_ALARM_A;
 80006f0:	4b55      	ldr	r3, [pc, #340]	; (8000848 <MenuAlarme+0x224>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
			if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK){
 80006f6:	2200      	movs	r2, #0
 80006f8:	4953      	ldr	r1, [pc, #332]	; (8000848 <MenuAlarme+0x224>)
 80006fa:	485a      	ldr	r0, [pc, #360]	; (8000864 <MenuAlarme+0x240>)
 80006fc:	f002 fa48 	bl	8002b90 <HAL_RTC_SetAlarm_IT>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	f000 8151 	beq.w	80009aa <MenuAlarme+0x386>
				Error_Handler();
 8000708:	f000 fbe0 	bl	8000ecc <Error_Handler>
			}
			break;
 800070c:	e14d      	b.n	80009aa <MenuAlarme+0x386>
		}

		//acerta hora do alarme
		Set_Hora = 1;
 800070e:	4b56      	ldr	r3, [pc, #344]	; (8000868 <MenuAlarme+0x244>)
 8000710:	2201      	movs	r2, #1
 8000712:	601a      	str	r2, [r3, #0]
		DspPisca = 1;
 8000714:	4b55      	ldr	r3, [pc, #340]	; (800086c <MenuAlarme+0x248>)
 8000716:	2201      	movs	r2, #1
 8000718:	601a      	str	r2, [r3, #0]
		while (Set_Hora){
 800071a:	e087      	b.n	800082c <MenuAlarme+0x208>
			BTUP = HAL_GPIO_ReadPin(BTUP_GPIO_Port, BTUP_Pin);
 800071c:	2108      	movs	r1, #8
 800071e:	4854      	ldr	r0, [pc, #336]	; (8000870 <MenuAlarme+0x24c>)
 8000720:	f001 f9a6 	bl	8001a70 <HAL_GPIO_ReadPin>
 8000724:	4603      	mov	r3, r0
 8000726:	461a      	mov	r2, r3
 8000728:	4b52      	ldr	r3, [pc, #328]	; (8000874 <MenuAlarme+0x250>)
 800072a:	601a      	str	r2, [r3, #0]
			HAL_Delay(75);
 800072c:	204b      	movs	r0, #75	; 0x4b
 800072e:	f000 fee9 	bl	8001504 <HAL_Delay>
			if (BTUP == 0){
 8000732:	4b50      	ldr	r3, [pc, #320]	; (8000874 <MenuAlarme+0x250>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d10f      	bne.n	800075a <MenuAlarme+0x136>
				AlHora ++;
 800073a:	4b44      	ldr	r3, [pc, #272]	; (800084c <MenuAlarme+0x228>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b42      	ldr	r3, [pc, #264]	; (800084c <MenuAlarme+0x228>)
 8000744:	701a      	strb	r2, [r3, #0]
				if (AlHora == 24){
 8000746:	4b41      	ldr	r3, [pc, #260]	; (800084c <MenuAlarme+0x228>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b18      	cmp	r3, #24
 800074c:	d102      	bne.n	8000754 <MenuAlarme+0x130>
					AlHora = 0;
 800074e:	4b3f      	ldr	r3, [pc, #252]	; (800084c <MenuAlarme+0x228>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
				}
				BTUP = 1;
 8000754:	4b47      	ldr	r3, [pc, #284]	; (8000874 <MenuAlarme+0x250>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
			}

			BTDOWN = HAL_GPIO_ReadPin(BTDOWN_GPIO_Port, BTDOWN_Pin);
 800075a:	2110      	movs	r1, #16
 800075c:	4844      	ldr	r0, [pc, #272]	; (8000870 <MenuAlarme+0x24c>)
 800075e:	f001 f987 	bl	8001a70 <HAL_GPIO_ReadPin>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	4b44      	ldr	r3, [pc, #272]	; (8000878 <MenuAlarme+0x254>)
 8000768:	601a      	str	r2, [r3, #0]
			HAL_Delay(75);
 800076a:	204b      	movs	r0, #75	; 0x4b
 800076c:	f000 feca 	bl	8001504 <HAL_Delay>
			if (BTDOWN == 0){
 8000770:	4b41      	ldr	r3, [pc, #260]	; (8000878 <MenuAlarme+0x254>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d113      	bne.n	80007a0 <MenuAlarme+0x17c>
				AlHora --;
 8000778:	4b34      	ldr	r3, [pc, #208]	; (800084c <MenuAlarme+0x228>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	3b01      	subs	r3, #1
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b32      	ldr	r3, [pc, #200]	; (800084c <MenuAlarme+0x228>)
 8000782:	701a      	strb	r2, [r3, #0]
				if (AlHora == 0 || AlHora == 255){
 8000784:	4b31      	ldr	r3, [pc, #196]	; (800084c <MenuAlarme+0x228>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d003      	beq.n	8000794 <MenuAlarme+0x170>
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <MenuAlarme+0x228>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2bff      	cmp	r3, #255	; 0xff
 8000792:	d102      	bne.n	800079a <MenuAlarme+0x176>
					AlHora = 23;
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MenuAlarme+0x228>)
 8000796:	2217      	movs	r2, #23
 8000798:	701a      	strb	r2, [r3, #0]
				}
				BTDOWN = 1;
 800079a:	4b37      	ldr	r3, [pc, #220]	; (8000878 <MenuAlarme+0x254>)
 800079c:	2201      	movs	r2, #1
 800079e:	601a      	str	r2, [r3, #0]
			}

			if (DspPisca){
 80007a0:	4b32      	ldr	r3, [pc, #200]	; (800086c <MenuAlarme+0x248>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d023      	beq.n	80007f0 <MenuAlarme+0x1cc>
				buffer[3] = font[AlHora / 10];
 80007a8:	4b28      	ldr	r3, [pc, #160]	; (800084c <MenuAlarme+0x228>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4a29      	ldr	r2, [pc, #164]	; (8000854 <MenuAlarme+0x230>)
 80007ae:	fba2 2303 	umull	r2, r3, r2, r3
 80007b2:	08db      	lsrs	r3, r3, #3
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	4b27      	ldr	r3, [pc, #156]	; (8000858 <MenuAlarme+0x234>)
 80007ba:	5c9a      	ldrb	r2, [r3, r2]
 80007bc:	4b21      	ldr	r3, [pc, #132]	; (8000844 <MenuAlarme+0x220>)
 80007be:	70da      	strb	r2, [r3, #3]
				buffer[2] = font[AlHora % 10];
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <MenuAlarme+0x228>)
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MenuAlarme+0x230>)
 80007c6:	fba3 1302 	umull	r1, r3, r3, r2
 80007ca:	08d9      	lsrs	r1, r3, #3
 80007cc:	460b      	mov	r3, r1
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	440b      	add	r3, r1
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	461a      	mov	r2, r3
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <MenuAlarme+0x234>)
 80007dc:	5c9a      	ldrb	r2, [r3, r2]
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MenuAlarme+0x220>)
 80007e0:	709a      	strb	r2, [r3, #2]
				HAL_Delay(50);
 80007e2:	2032      	movs	r0, #50	; 0x32
 80007e4:	f000 fe8e 	bl	8001504 <HAL_Delay>
				DspPisca = 0;
 80007e8:	4b20      	ldr	r3, [pc, #128]	; (800086c <MenuAlarme+0x248>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	e00b      	b.n	8000808 <MenuAlarme+0x1e4>
			} else {
				buffer[3] = 0x00;		//apaga display
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MenuAlarme+0x220>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	70da      	strb	r2, [r3, #3]
				buffer[2] = 0x00;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MenuAlarme+0x220>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	709a      	strb	r2, [r3, #2]
				HAL_Delay(50);
 80007fc:	2032      	movs	r0, #50	; 0x32
 80007fe:	f000 fe81 	bl	8001504 <HAL_Delay>
				DspPisca = 1;
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MenuAlarme+0x248>)
 8000804:	2201      	movs	r2, #1
 8000806:	601a      	str	r2, [r3, #0]
			}

			BTSET = HAL_GPIO_ReadPin(BTSET_GPIO_Port, BTSET_Pin);
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	4819      	ldr	r0, [pc, #100]	; (8000870 <MenuAlarme+0x24c>)
 800080c:	f001 f930 	bl	8001a70 <HAL_GPIO_ReadPin>
 8000810:	4603      	mov	r3, r0
 8000812:	461a      	mov	r2, r3
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <MenuAlarme+0x258>)
 8000816:	601a      	str	r2, [r3, #0]
			HAL_Delay(75);
 8000818:	204b      	movs	r0, #75	; 0x4b
 800081a:	f000 fe73 	bl	8001504 <HAL_Delay>
			if (!BTSET){
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <MenuAlarme+0x258>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d102      	bne.n	800082c <MenuAlarme+0x208>
				Set_Hora = 0;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MenuAlarme+0x244>)
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
		while (Set_Hora){
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MenuAlarme+0x244>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	f47f af73 	bne.w	800071c <MenuAlarme+0xf8>
			}
		}

		//acerta minuto do alarme
		Set_Min = 1;
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MenuAlarme+0x25c>)
 8000838:	2201      	movs	r2, #1
 800083a:	601a      	str	r2, [r3, #0]
		DspPisca = 1;
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MenuAlarme+0x248>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
		while (Set_Min){
 8000842:	e0a7      	b.n	8000994 <MenuAlarme+0x370>
 8000844:	2000007c 	.word	0x2000007c
 8000848:	2000006c 	.word	0x2000006c
 800084c:	200000f4 	.word	0x200000f4
 8000850:	20000098 	.word	0x20000098
 8000854:	cccccccd 	.word	0xcccccccd
 8000858:	08003c00 	.word	0x08003c00
 800085c:	40010800 	.word	0x40010800
 8000860:	200000a4 	.word	0x200000a4
 8000864:	20000084 	.word	0x20000084
 8000868:	2000009c 	.word	0x2000009c
 800086c:	20000074 	.word	0x20000074
 8000870:	40010c00 	.word	0x40010c00
 8000874:	200000a0 	.word	0x200000a0
 8000878:	20000060 	.word	0x20000060
 800087c:	200000f8 	.word	0x200000f8
 8000880:	20000078 	.word	0x20000078
			BTUP = HAL_GPIO_ReadPin(BTUP_GPIO_Port, BTUP_Pin);
 8000884:	2108      	movs	r1, #8
 8000886:	484a      	ldr	r0, [pc, #296]	; (80009b0 <MenuAlarme+0x38c>)
 8000888:	f001 f8f2 	bl	8001a70 <HAL_GPIO_ReadPin>
 800088c:	4603      	mov	r3, r0
 800088e:	461a      	mov	r2, r3
 8000890:	4b48      	ldr	r3, [pc, #288]	; (80009b4 <MenuAlarme+0x390>)
 8000892:	601a      	str	r2, [r3, #0]
			HAL_Delay(75);
 8000894:	204b      	movs	r0, #75	; 0x4b
 8000896:	f000 fe35 	bl	8001504 <HAL_Delay>
			if (BTUP == 0){
 800089a:	4b46      	ldr	r3, [pc, #280]	; (80009b4 <MenuAlarme+0x390>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d10f      	bne.n	80008c2 <MenuAlarme+0x29e>
				AlMin ++;
 80008a2:	4b45      	ldr	r3, [pc, #276]	; (80009b8 <MenuAlarme+0x394>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	3301      	adds	r3, #1
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b43      	ldr	r3, [pc, #268]	; (80009b8 <MenuAlarme+0x394>)
 80008ac:	701a      	strb	r2, [r3, #0]
				if (AlMin == 59){
 80008ae:	4b42      	ldr	r3, [pc, #264]	; (80009b8 <MenuAlarme+0x394>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b3b      	cmp	r3, #59	; 0x3b
 80008b4:	d102      	bne.n	80008bc <MenuAlarme+0x298>
					AlMin = 0;
 80008b6:	4b40      	ldr	r3, [pc, #256]	; (80009b8 <MenuAlarme+0x394>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
				}
				BTUP = 1;
 80008bc:	4b3d      	ldr	r3, [pc, #244]	; (80009b4 <MenuAlarme+0x390>)
 80008be:	2201      	movs	r2, #1
 80008c0:	601a      	str	r2, [r3, #0]
			}

			BTDOWN = HAL_GPIO_ReadPin(BTDOWN_GPIO_Port, BTDOWN_Pin);
 80008c2:	2110      	movs	r1, #16
 80008c4:	483a      	ldr	r0, [pc, #232]	; (80009b0 <MenuAlarme+0x38c>)
 80008c6:	f001 f8d3 	bl	8001a70 <HAL_GPIO_ReadPin>
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b3b      	ldr	r3, [pc, #236]	; (80009bc <MenuAlarme+0x398>)
 80008d0:	601a      	str	r2, [r3, #0]
			HAL_Delay(75);
 80008d2:	204b      	movs	r0, #75	; 0x4b
 80008d4:	f000 fe16 	bl	8001504 <HAL_Delay>
			if (BTDOWN == 0){
 80008d8:	4b38      	ldr	r3, [pc, #224]	; (80009bc <MenuAlarme+0x398>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d113      	bne.n	8000908 <MenuAlarme+0x2e4>
				AlMin --;
 80008e0:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <MenuAlarme+0x394>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	3b01      	subs	r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b33      	ldr	r3, [pc, #204]	; (80009b8 <MenuAlarme+0x394>)
 80008ea:	701a      	strb	r2, [r3, #0]
				if (AlMin == 0 || AlMin == 255){
 80008ec:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <MenuAlarme+0x394>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d003      	beq.n	80008fc <MenuAlarme+0x2d8>
 80008f4:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <MenuAlarme+0x394>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2bff      	cmp	r3, #255	; 0xff
 80008fa:	d102      	bne.n	8000902 <MenuAlarme+0x2de>
					AlMin = 59;
 80008fc:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <MenuAlarme+0x394>)
 80008fe:	223b      	movs	r2, #59	; 0x3b
 8000900:	701a      	strb	r2, [r3, #0]
				}
				BTDOWN = 1;
 8000902:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <MenuAlarme+0x398>)
 8000904:	2201      	movs	r2, #1
 8000906:	601a      	str	r2, [r3, #0]
			}

			if(DspPisca){
 8000908:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <MenuAlarme+0x39c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d023      	beq.n	8000958 <MenuAlarme+0x334>
				buffer[1] = font[AlMin / 10];
 8000910:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <MenuAlarme+0x394>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4a2b      	ldr	r2, [pc, #172]	; (80009c4 <MenuAlarme+0x3a0>)
 8000916:	fba2 2303 	umull	r2, r3, r2, r3
 800091a:	08db      	lsrs	r3, r3, #3
 800091c:	b2db      	uxtb	r3, r3
 800091e:	461a      	mov	r2, r3
 8000920:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <MenuAlarme+0x3a4>)
 8000922:	5c9a      	ldrb	r2, [r3, r2]
 8000924:	4b29      	ldr	r3, [pc, #164]	; (80009cc <MenuAlarme+0x3a8>)
 8000926:	705a      	strb	r2, [r3, #1]
				buffer[0] = font[AlMin % 10];
 8000928:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <MenuAlarme+0x394>)
 800092a:	781a      	ldrb	r2, [r3, #0]
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <MenuAlarme+0x3a0>)
 800092e:	fba3 1302 	umull	r1, r3, r3, r2
 8000932:	08d9      	lsrs	r1, r3, #3
 8000934:	460b      	mov	r3, r1
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	440b      	add	r3, r1
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	b2db      	uxtb	r3, r3
 8000940:	461a      	mov	r2, r3
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <MenuAlarme+0x3a4>)
 8000944:	5c9a      	ldrb	r2, [r3, r2]
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <MenuAlarme+0x3a8>)
 8000948:	701a      	strb	r2, [r3, #0]
				HAL_Delay(50);
 800094a:	2032      	movs	r0, #50	; 0x32
 800094c:	f000 fdda 	bl	8001504 <HAL_Delay>
				DspPisca = 0;
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MenuAlarme+0x39c>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	e00b      	b.n	8000970 <MenuAlarme+0x34c>
			} else {
				buffer[1] = 0x00;		//apaga display
 8000958:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MenuAlarme+0x3a8>)
 800095a:	2200      	movs	r2, #0
 800095c:	705a      	strb	r2, [r3, #1]
				buffer[0] = 0x00;
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MenuAlarme+0x3a8>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
				HAL_Delay(50);
 8000964:	2032      	movs	r0, #50	; 0x32
 8000966:	f000 fdcd 	bl	8001504 <HAL_Delay>
				DspPisca = 1;
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MenuAlarme+0x39c>)
 800096c:	2201      	movs	r2, #1
 800096e:	601a      	str	r2, [r3, #0]
			}

			BTSET = HAL_GPIO_ReadPin(BTSET_GPIO_Port, BTSET_Pin);
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	480f      	ldr	r0, [pc, #60]	; (80009b0 <MenuAlarme+0x38c>)
 8000974:	f001 f87c 	bl	8001a70 <HAL_GPIO_ReadPin>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MenuAlarme+0x3ac>)
 800097e:	601a      	str	r2, [r3, #0]
			HAL_Delay(75);
 8000980:	204b      	movs	r0, #75	; 0x4b
 8000982:	f000 fdbf 	bl	8001504 <HAL_Delay>
			if (!BTSET) {
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MenuAlarme+0x3ac>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d102      	bne.n	8000994 <MenuAlarme+0x370>
				Set_Min = 0;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MenuAlarme+0x3b0>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
		while (Set_Min){
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MenuAlarme+0x3b0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	f47f af73 	bne.w	8000884 <MenuAlarme+0x260>
	while (CH_AL == 0)
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MenuAlarme+0x3b4>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f43f ae89 	beq.w	80006ba <MenuAlarme+0x96>
			}
		}
	}
}
 80009a8:	e000      	b.n	80009ac <MenuAlarme+0x388>
			break;
 80009aa:	bf00      	nop
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40010c00 	.word	0x40010c00
 80009b4:	200000a0 	.word	0x200000a0
 80009b8:	20000098 	.word	0x20000098
 80009bc:	20000060 	.word	0x20000060
 80009c0:	20000074 	.word	0x20000074
 80009c4:	cccccccd 	.word	0xcccccccd
 80009c8:	08003c00 	.word	0x08003c00
 80009cc:	2000007c 	.word	0x2000007c
 80009d0:	200000f8 	.word	0x200000f8
 80009d4:	20000078 	.word	0x20000078
 80009d8:	200000a4 	.word	0x200000a4

080009dc <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	alarmflag = 1;
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_RTC_AlarmAEventCallback+0x18>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	701a      	strb	r2, [r3, #0]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	20000028 	.word	0x20000028

080009f8 <Alarm_On>:

void Alarm_On(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZAL_GPIO_Port, BUZAL_Pin, GPIO_PIN_SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <Alarm_On+0x20>)
 8000a04:	f001 f84b 	bl	8001a9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LAMPAL_GPIO_Port, LAMPAL_Pin, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a0e:	4803      	ldr	r0, [pc, #12]	; (8000a1c <Alarm_On+0x24>)
 8000a10:	f001 f845 	bl	8001a9e <HAL_GPIO_WritePin>
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40010800 	.word	0x40010800
 8000a1c:	40010c00 	.word	0x40010c00

08000a20 <Alarm_Off>:

void Alarm_Off(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZAL_GPIO_Port, BUZAL_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2a:	480a      	ldr	r0, [pc, #40]	; (8000a54 <Alarm_Off+0x34>)
 8000a2c:	f001 f837 	bl	8001a9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDAL_GPIO_Port, LEDAL_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a36:	4807      	ldr	r0, [pc, #28]	; (8000a54 <Alarm_Off+0x34>)
 8000a38:	f001 f831 	bl	8001a9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LAMPAL_GPIO_Port, LAMPAL_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <Alarm_Off+0x38>)
 8000a44:	f001 f82b 	bl	8001a9e <HAL_GPIO_WritePin>
	alarmflag = 0;
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <Alarm_Off+0x3c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40010800 	.word	0x40010800
 8000a58:	40010c00 	.word	0x40010c00
 8000a5c:	20000028 	.word	0x20000028

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a64:	f000 fcec 	bl	8001440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a68:	f000 f8a6 	bl	8000bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6c:	f000 f998 	bl	8000da0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000a70:	f000 f900 	bl	8000c74 <MX_RTC_Init>
  MX_TIM2_Init();
 8000a74:	f000 f948 	bl	8000d08 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	//inicializa timer 2
	HAL_TIM_Base_Start_IT(&htim2);
 8000a78:	4842      	ldr	r0, [pc, #264]	; (8000b84 <main+0x124>)
 8000a7a:	f002 fcc5 	bl	8003408 <HAL_TIM_Base_Start_IT>

	HAL_RTC_Init(&hrtc);
 8000a7e:	4842      	ldr	r0, [pc, #264]	; (8000b88 <main+0x128>)
 8000a80:	f001 fdca 	bl	8002618 <HAL_RTC_Init>
	HAL_RTCEx_SetSecond_IT(&hrtc);
 8000a84:	4840      	ldr	r0, [pc, #256]	; (8000b88 <main+0x128>)
 8000a86:	f002 fc01 	bl	800328c <HAL_RTCEx_SetSecond_IT>
#endif
	  testeok = 0;

#else

	  HAL_RTC_GetTime(&hrtc, &clkTime, RTC_FORMAT_BIN);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	493f      	ldr	r1, [pc, #252]	; (8000b8c <main+0x12c>)
 8000a8e:	483e      	ldr	r0, [pc, #248]	; (8000b88 <main+0x128>)
 8000a90:	f001 fef0 	bl	8002874 <HAL_RTC_GetTime>
	  Horas = clkTime.Hours;
 8000a94:	4b3d      	ldr	r3, [pc, #244]	; (8000b8c <main+0x12c>)
 8000a96:	781a      	ldrb	r2, [r3, #0]
 8000a98:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <main+0x130>)
 8000a9a:	701a      	strb	r2, [r3, #0]
	  Minutos = clkTime.Minutes;
 8000a9c:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <main+0x12c>)
 8000a9e:	785a      	ldrb	r2, [r3, #1]
 8000aa0:	4b3c      	ldr	r3, [pc, #240]	; (8000b94 <main+0x134>)
 8000aa2:	701a      	strb	r2, [r3, #0]
#if ComSeg
	  Segundos = clkTime.Seconds;
 8000aa4:	4b39      	ldr	r3, [pc, #228]	; (8000b8c <main+0x12c>)
 8000aa6:	789a      	ldrb	r2, [r3, #2]
 8000aa8:	4b3b      	ldr	r3, [pc, #236]	; (8000b98 <main+0x138>)
 8000aaa:	701a      	strb	r2, [r3, #0]
	  if (!(Segundos % 2)) {
 8000aac:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <main+0x138>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d103      	bne.n	8000ac2 <main+0x62>
		  buffer[6] = 0x80;
 8000aba:	4b38      	ldr	r3, [pc, #224]	; (8000b9c <main+0x13c>)
 8000abc:	2280      	movs	r2, #128	; 0x80
 8000abe:	719a      	strb	r2, [r3, #6]
 8000ac0:	e002      	b.n	8000ac8 <main+0x68>
	  }else buffer[6] = 0x00;
 8000ac2:	4b36      	ldr	r3, [pc, #216]	; (8000b9c <main+0x13c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	719a      	strb	r2, [r3, #6]
	  PrintRelogio(Segundos);
 8000ac8:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <main+0x138>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fb3d 	bl	800014c <PrintRelogio>
#endif
	  PrintRelogio(Minutos);
 8000ad2:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <main+0x134>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fb38 	bl	800014c <PrintRelogio>
	  PrintRelogio(Horas);
 8000adc:	4b2c      	ldr	r3, [pc, #176]	; (8000b90 <main+0x130>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fb33 	bl	800014c <PrintRelogio>

	  //Verifica botao Hora
	  if (HAL_GPIO_ReadPin(CH_HORA_GPIO_Port, CH_HORA_Pin) == GPIO_PIN_RESET){
 8000ae6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aea:	482d      	ldr	r0, [pc, #180]	; (8000ba0 <main+0x140>)
 8000aec:	f000 ffc0 	bl	8001a70 <HAL_GPIO_ReadPin>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d107      	bne.n	8000b06 <main+0xa6>
		  HAL_Delay(125);
 8000af6:	207d      	movs	r0, #125	; 0x7d
 8000af8:	f000 fd04 	bl	8001504 <HAL_Delay>
		  CH_HORA = 0;
 8000afc:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <main+0x144>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
		  MenuHora();
 8000b02:	f7ff fbb5 	bl	8000270 <MenuHora>
	  }

	  //verifica botao de Alarme
	  if (HAL_GPIO_ReadPin(CH_AL_GPIO_Port, CH_AL_Pin) == GPIO_PIN_RESET){
 8000b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b0a:	4825      	ldr	r0, [pc, #148]	; (8000ba0 <main+0x140>)
 8000b0c:	f000 ffb0 	bl	8001a70 <HAL_GPIO_ReadPin>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d107      	bne.n	8000b26 <main+0xc6>
		  HAL_Delay(125);
 8000b16:	207d      	movs	r0, #125	; 0x7d
 8000b18:	f000 fcf4 	bl	8001504 <HAL_Delay>
		  CH_AL = 0;
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <main+0x148>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
		  MenuAlarme();
 8000b22:	f7ff fd7f 	bl	8000624 <MenuAlarme>
	  }

	  //Alarme ligado
	  ALON = HAL_GPIO_ReadPin(ALON_GPIO_Port, ALON_Pin);
 8000b26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b2a:	481d      	ldr	r0, [pc, #116]	; (8000ba0 <main+0x140>)
 8000b2c:	f000 ffa0 	bl	8001a70 <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	461a      	mov	r2, r3
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <main+0x14c>)
 8000b36:	601a      	str	r2, [r3, #0]
	  if (ALON == 0){
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <main+0x14c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d106      	bne.n	8000b4e <main+0xee>
		  HAL_GPIO_WritePin(LEDAL_GPIO_Port, LEDAL_Pin, GPIO_PIN_SET);		//Led Alarme Ativado
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b46:	4816      	ldr	r0, [pc, #88]	; (8000ba0 <main+0x140>)
 8000b48:	f000 ffa9 	bl	8001a9e <HAL_GPIO_WritePin>
 8000b4c:	e005      	b.n	8000b5a <main+0xfa>
	  } else {
		  HAL_GPIO_WritePin(LEDAL_GPIO_Port, LEDAL_Pin, GPIO_PIN_RESET);	//Led Alarme Desativado
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b54:	4812      	ldr	r0, [pc, #72]	; (8000ba0 <main+0x140>)
 8000b56:	f000 ffa2 	bl	8001a9e <HAL_GPIO_WritePin>
	  }

	  if (alarmflag){
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <main+0x150>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d005      	beq.n	8000b6e <main+0x10e>
		  if (ALON == 0){
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <main+0x14c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d101      	bne.n	8000b6e <main+0x10e>
			  Alarm_On();
 8000b6a:	f7ff ff45 	bl	80009f8 <Alarm_On>
		  }
	  }

	  if (HAL_GPIO_ReadPin(BTESC_GPIO_Port, BTESC_Pin) == GPIO_PIN_RESET){
 8000b6e:	2140      	movs	r1, #64	; 0x40
 8000b70:	4810      	ldr	r0, [pc, #64]	; (8000bb4 <main+0x154>)
 8000b72:	f000 ff7d 	bl	8001a70 <HAL_GPIO_ReadPin>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d186      	bne.n	8000a8a <main+0x2a>
		  Alarm_Off();
 8000b7c:	f7ff ff50 	bl	8000a20 <Alarm_Off>
	  HAL_RTC_GetTime(&hrtc, &clkTime, RTC_FORMAT_BIN);
 8000b80:	e783      	b.n	8000a8a <main+0x2a>
 8000b82:	bf00      	nop
 8000b84:	200000ac 	.word	0x200000ac
 8000b88:	20000084 	.word	0x20000084
 8000b8c:	20000064 	.word	0x20000064
 8000b90:	200000fe 	.word	0x200000fe
 8000b94:	20000048 	.word	0x20000048
 8000b98:	20000083 	.word	0x20000083
 8000b9c:	2000007c 	.word	0x2000007c
 8000ba0:	40010800 	.word	0x40010800
 8000ba4:	20000068 	.word	0x20000068
 8000ba8:	200000a4 	.word	0x200000a4
 8000bac:	20000058 	.word	0x20000058
 8000bb0:	20000028 	.word	0x20000028
 8000bb4:	40010c00 	.word	0x40010c00

08000bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b094      	sub	sp, #80	; 0x50
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc2:	2228      	movs	r2, #40	; 0x28
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 fff6 	bl	8003bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000be8:	2305      	movs	r3, #5
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c08:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 ff80 	bl	8001b18 <HAL_RCC_OscConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c1e:	f000 f955 	bl	8000ecc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c22:	230f      	movs	r3, #15
 8000c24:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c32:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 f9ea 	bl	8002018 <HAL_RCC_ClockConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c4a:	f000 f93f 	bl	8000ecc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c56:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fb62 	bl	8002324 <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000c66:	f000 f931 	bl	8000ecc <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3750      	adds	r7, #80	; 0x50
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	460a      	mov	r2, r1
 8000c80:	801a      	strh	r2, [r3, #0]
 8000c82:	460a      	mov	r2, r1
 8000c84:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <MX_RTC_Init+0x8c>)
 8000c8c:	4a1d      	ldr	r2, [pc, #116]	; (8000d04 <MX_RTC_Init+0x90>)
 8000c8e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MX_RTC_Init+0x8c>)
 8000c92:	f04f 32ff 	mov.w	r2, #4294967295
 8000c96:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <MX_RTC_Init+0x8c>)
 8000c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c9e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ca0:	4817      	ldr	r0, [pc, #92]	; (8000d00 <MX_RTC_Init+0x8c>)
 8000ca2:	f001 fcb9 	bl	8002618 <HAL_RTC_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000cac:	f000 f90e 	bl	8000ecc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480f      	ldr	r0, [pc, #60]	; (8000d00 <MX_RTC_Init+0x8c>)
 8000cc4:	f001 fd3e 	bl	8002744 <HAL_RTC_SetTime>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000cce:	f000 f8fd 	bl	8000ecc <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_RTC_Init+0x8c>)
 8000cea:	f001 fe9b 	bl	8002a24 <HAL_RTC_SetDate>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000cf4:	f000 f8ea 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000084 	.word	0x20000084
 8000d04:	40002800 	.word	0x40002800

08000d08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <MX_TIM2_Init+0x94>)
 8000d26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <MX_TIM2_Init+0x94>)
 8000d2e:	2247      	movs	r2, #71	; 0x47
 8000d30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_TIM2_Init+0x94>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d38:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <MX_TIM2_Init+0x94>)
 8000d3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_TIM2_Init+0x94>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <MX_TIM2_Init+0x94>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d4c:	4813      	ldr	r0, [pc, #76]	; (8000d9c <MX_TIM2_Init+0x94>)
 8000d4e:	f002 fb0c 	bl	800336a <HAL_TIM_Base_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d58:	f000 f8b8 	bl	8000ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	4619      	mov	r1, r3
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <MX_TIM2_Init+0x94>)
 8000d6a:	f002 fca7 	bl	80036bc <HAL_TIM_ConfigClockSource>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d74:	f000 f8aa 	bl	8000ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d80:	463b      	mov	r3, r7
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_TIM2_Init+0x94>)
 8000d86:	f002 fe83 	bl	8003a90 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d90:	f000 f89c 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200000ac 	.word	0x200000ac

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db4:	4b42      	ldr	r3, [pc, #264]	; (8000ec0 <MX_GPIO_Init+0x120>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a41      	ldr	r2, [pc, #260]	; (8000ec0 <MX_GPIO_Init+0x120>)
 8000dba:	f043 0310 	orr.w	r3, r3, #16
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b3f      	ldr	r3, [pc, #252]	; (8000ec0 <MX_GPIO_Init+0x120>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0310 	and.w	r3, r3, #16
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dcc:	4b3c      	ldr	r3, [pc, #240]	; (8000ec0 <MX_GPIO_Init+0x120>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a3b      	ldr	r2, [pc, #236]	; (8000ec0 <MX_GPIO_Init+0x120>)
 8000dd2:	f043 0320 	orr.w	r3, r3, #32
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b39      	ldr	r3, [pc, #228]	; (8000ec0 <MX_GPIO_Init+0x120>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0320 	and.w	r3, r3, #32
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	4b36      	ldr	r3, [pc, #216]	; (8000ec0 <MX_GPIO_Init+0x120>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a35      	ldr	r2, [pc, #212]	; (8000ec0 <MX_GPIO_Init+0x120>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b33      	ldr	r3, [pc, #204]	; (8000ec0 <MX_GPIO_Init+0x120>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	4b30      	ldr	r3, [pc, #192]	; (8000ec0 <MX_GPIO_Init+0x120>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a2f      	ldr	r2, [pc, #188]	; (8000ec0 <MX_GPIO_Init+0x120>)
 8000e02:	f043 0308 	orr.w	r3, r3, #8
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <MX_GPIO_Init+0x120>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEGA_Pin|SEGB_Pin|SEGC_Pin|SEGD_Pin
 8000e14:	2200      	movs	r2, #0
 8000e16:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000e1a:	482a      	ldr	r0, [pc, #168]	; (8000ec4 <MX_GPIO_Init+0x124>)
 8000e1c:	f000 fe3f 	bl	8001a9e <HAL_GPIO_WritePin>
                          |SEGE_Pin|SEGF_Pin|SEGG_Pin|SEGP_Pin
                          |DIG_6_Pin|BUZAL_Pin|LEDAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIG_1_Pin|DIG_2_Pin|DIG_3_Pin|DIG_4_Pin
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 417d 	mov.w	r1, #64768	; 0xfd00
 8000e26:	4828      	ldr	r0, [pc, #160]	; (8000ec8 <MX_GPIO_Init+0x128>)
 8000e28:	f000 fe39 	bl	8001a9e <HAL_GPIO_WritePin>
                          |DIG_LED_Pin|DIG_5_Pin|LAMPAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEGA_Pin SEGB_Pin SEGC_Pin SEGD_Pin
                           SEGE_Pin SEGF_Pin SEGG_Pin SEGP_Pin
                           DIG_6_Pin BUZAL_Pin */
  GPIO_InitStruct.Pin = SEGA_Pin|SEGB_Pin|SEGC_Pin|SEGD_Pin
 8000e2c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000e30:	613b      	str	r3, [r7, #16]
                          |SEGE_Pin|SEGF_Pin|SEGG_Pin|SEGP_Pin
                          |DIG_6_Pin|BUZAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	4619      	mov	r1, r3
 8000e44:	481f      	ldr	r0, [pc, #124]	; (8000ec4 <MX_GPIO_Init+0x124>)
 8000e46:	f000 fc8f 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG_1_Pin DIG_2_Pin DIG_3_Pin DIG_4_Pin
                           DIG_LED_Pin DIG_5_Pin LAMPAL_Pin */
  GPIO_InitStruct.Pin = DIG_1_Pin|DIG_2_Pin|DIG_3_Pin|DIG_4_Pin
 8000e4a:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000e4e:	613b      	str	r3, [r7, #16]
                          |DIG_LED_Pin|DIG_5_Pin|LAMPAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	4619      	mov	r1, r3
 8000e62:	4819      	ldr	r0, [pc, #100]	; (8000ec8 <MX_GPIO_Init+0x128>)
 8000e64:	f000 fc80 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDAL_Pin */
  GPIO_InitStruct.Pin = LEDAL_Pin;
 8000e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDAL_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 0310 	add.w	r3, r7, #16
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4810      	ldr	r0, [pc, #64]	; (8000ec4 <MX_GPIO_Init+0x124>)
 8000e82:	f000 fc71 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH_HORA_Pin CH_AL_Pin ALON_Pin */
  GPIO_InitStruct.Pin = CH_HORA_Pin|CH_AL_Pin|ALON_Pin;
 8000e86:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8000e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480a      	ldr	r0, [pc, #40]	; (8000ec4 <MX_GPIO_Init+0x124>)
 8000e9c:	f000 fc64 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTUP_Pin BTDOWN_Pin BTESC_Pin BTSET_Pin */
  GPIO_InitStruct.Pin = BTUP_Pin|BTDOWN_Pin|BTESC_Pin|BTSET_Pin;
 8000ea0:	23d8      	movs	r3, #216	; 0xd8
 8000ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_GPIO_Init+0x128>)
 8000eb4:	f000 fc58 	bl	8001768 <HAL_GPIO_Init>

}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010800 	.word	0x40010800
 8000ec8:	40010c00 	.word	0x40010c00

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <HAL_MspInit+0x5c>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <HAL_MspInit+0x5c>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6193      	str	r3, [r2, #24]
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_MspInit+0x5c>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_MspInit+0x5c>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <HAL_MspInit+0x5c>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	61d3      	str	r3, [r2, #28]
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_MspInit+0x5c>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_MspInit+0x60>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_MspInit+0x60>)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010000 	.word	0x40010000

08000f3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <HAL_RTC_MspInit+0x5c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d120      	bne.n	8000f90 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000f4e:	f000 fdd7 	bl	8001b00 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_RTC_MspInit+0x60>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <HAL_RTC_MspInit+0x60>)
 8000f58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <HAL_RTC_MspInit+0x60>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <HAL_RTC_MspInit+0x64>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 fbc0 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f000 fbd9 	bl	8001732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	2029      	movs	r0, #41	; 0x29
 8000f86:	f000 fbb8 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000f8a:	2029      	movs	r0, #41	; 0x29
 8000f8c:	f000 fbd1 	bl	8001732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40002800 	.word	0x40002800
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	4242043c 	.word	0x4242043c

08000fa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb4:	d113      	bne.n	8000fde <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <HAL_TIM_Base_MspInit+0x44>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <HAL_TIM_Base_MspInit+0x44>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <HAL_TIM_Base_MspInit+0x44>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	201c      	movs	r0, #28
 8000fd4:	f000 fb91 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fd8:	201c      	movs	r0, #28
 8000fda:	f000 fbaa 	bl	8001732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <HardFault_Handler+0x4>

08000ffe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <MemManage_Handler+0x4>

08001004 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <BusFault_Handler+0x4>

0800100a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <UsageFault_Handler+0x4>

08001010 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001038:	f000 fa48 	bl	80014cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <RTC_IRQHandler+0x10>)
 8001046:	f002 f94a 	bl	80032de <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000084 	.word	0x20000084

08001054 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001058:	48c1      	ldr	r0, [pc, #772]	; (8001360 <TIM2_IRQHandler+0x30c>)
 800105a:	f002 fa27 	bl	80034ac <HAL_TIM_IRQHandler>
  static uint8_t digit=0;

#if !(Relogio)
  if (testeok == 0){
#else
  if (testeok == 1){
 800105e:	4bc1      	ldr	r3, [pc, #772]	; (8001364 <TIM2_IRQHandler+0x310>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d123      	bne.n	80010ae <TIM2_IRQHandler+0x5a>
#endif
	  HAL_GPIO_TogglePin(DIG_LED_GPIO_Port, DIG_LED_Pin);
 8001066:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800106a:	48bf      	ldr	r0, [pc, #764]	; (8001368 <TIM2_IRQHandler+0x314>)
 800106c:	f000 fd2f 	bl	8001ace <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DIG_1_GPIO_Port, DIG_1_Pin);
 8001070:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001074:	48bc      	ldr	r0, [pc, #752]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001076:	f000 fd2a 	bl	8001ace <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DIG_2_GPIO_Port, DIG_2_Pin);
 800107a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107e:	48ba      	ldr	r0, [pc, #744]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001080:	f000 fd25 	bl	8001ace <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DIG_3_GPIO_Port, DIG_3_Pin);
 8001084:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001088:	48b7      	ldr	r0, [pc, #732]	; (8001368 <TIM2_IRQHandler+0x314>)
 800108a:	f000 fd20 	bl	8001ace <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DIG_4_GPIO_Port, DIG_4_Pin);
 800108e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001092:	48b5      	ldr	r0, [pc, #724]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001094:	f000 fd1b 	bl	8001ace <HAL_GPIO_TogglePin>
#if ComSeg
	  HAL_GPIO_TogglePin(DIG_5_GPIO_Port, DIG_5_Pin);
 8001098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800109c:	48b2      	ldr	r0, [pc, #712]	; (8001368 <TIM2_IRQHandler+0x314>)
 800109e:	f000 fd16 	bl	8001ace <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DIG_6_GPIO_Port, DIG_6_Pin);
 80010a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a6:	48b1      	ldr	r0, [pc, #708]	; (800136c <TIM2_IRQHandler+0x318>)
 80010a8:	f000 fd11 	bl	8001ace <HAL_GPIO_TogglePin>
		  digit = 0;
		}
  }

  /* USER CODE END TIM2_IRQn 1 */
}
 80010ac:	e156      	b.n	800135c <TIM2_IRQHandler+0x308>
  GPIOA -> ODR = buffer[digit];
 80010ae:	4bb0      	ldr	r3, [pc, #704]	; (8001370 <TIM2_IRQHandler+0x31c>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	4baf      	ldr	r3, [pc, #700]	; (8001374 <TIM2_IRQHandler+0x320>)
 80010b6:	5c9a      	ldrb	r2, [r3, r2]
 80010b8:	4bac      	ldr	r3, [pc, #688]	; (800136c <TIM2_IRQHandler+0x318>)
 80010ba:	60da      	str	r2, [r3, #12]
	  	  switch(digit){
 80010bc:	4bac      	ldr	r3, [pc, #688]	; (8001370 <TIM2_IRQHandler+0x31c>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b06      	cmp	r3, #6
 80010c2:	f200 813e 	bhi.w	8001342 <TIM2_IRQHandler+0x2ee>
 80010c6:	a201      	add	r2, pc, #4	; (adr r2, 80010cc <TIM2_IRQHandler+0x78>)
 80010c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010cc:	080010e9 	.word	0x080010e9
 80010d0:	0800113f 	.word	0x0800113f
 80010d4:	08001195 	.word	0x08001195
 80010d8:	080011eb 	.word	0x080011eb
 80010dc:	08001241 	.word	0x08001241
 80010e0:	08001297 	.word	0x08001297
 80010e4:	080012ed 	.word	0x080012ed
			  HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ee:	489e      	ldr	r0, [pc, #632]	; (8001368 <TIM2_IRQHandler+0x314>)
 80010f0:	f000 fcd5 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010fa:	489b      	ldr	r0, [pc, #620]	; (8001368 <TIM2_IRQHandler+0x314>)
 80010fc:	f000 fccf 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001106:	4898      	ldr	r0, [pc, #608]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001108:	f000 fcc9 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001112:	4895      	ldr	r0, [pc, #596]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001114:	f000 fcc3 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800111e:	4892      	ldr	r0, [pc, #584]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001120:	f000 fcbd 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112a:	4890      	ldr	r0, [pc, #576]	; (800136c <TIM2_IRQHandler+0x318>)
 800112c:	f000 fcb7 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001136:	488c      	ldr	r0, [pc, #560]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001138:	f000 fcb1 	bl	8001a9e <HAL_GPIO_WritePin>
			  break;
 800113c:	e101      	b.n	8001342 <TIM2_IRQHandler+0x2ee>
			  HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001144:	4888      	ldr	r0, [pc, #544]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001146:	f000 fcaa 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001150:	4885      	ldr	r0, [pc, #532]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001152:	f000 fca4 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800115c:	4882      	ldr	r0, [pc, #520]	; (8001368 <TIM2_IRQHandler+0x314>)
 800115e:	f000 fc9e 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001168:	487f      	ldr	r0, [pc, #508]	; (8001368 <TIM2_IRQHandler+0x314>)
 800116a:	f000 fc98 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001174:	487c      	ldr	r0, [pc, #496]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001176:	f000 fc92 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001180:	487a      	ldr	r0, [pc, #488]	; (800136c <TIM2_IRQHandler+0x318>)
 8001182:	f000 fc8c 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118c:	4876      	ldr	r0, [pc, #472]	; (8001368 <TIM2_IRQHandler+0x314>)
 800118e:	f000 fc86 	bl	8001a9e <HAL_GPIO_WritePin>
			  break;
 8001192:	e0d6      	b.n	8001342 <TIM2_IRQHandler+0x2ee>
			  HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119a:	4873      	ldr	r0, [pc, #460]	; (8001368 <TIM2_IRQHandler+0x314>)
 800119c:	f000 fc7f 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011a6:	4870      	ldr	r0, [pc, #448]	; (8001368 <TIM2_IRQHandler+0x314>)
 80011a8:	f000 fc79 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b2:	486d      	ldr	r0, [pc, #436]	; (8001368 <TIM2_IRQHandler+0x314>)
 80011b4:	f000 fc73 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011be:	486a      	ldr	r0, [pc, #424]	; (8001368 <TIM2_IRQHandler+0x314>)
 80011c0:	f000 fc6d 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ca:	4867      	ldr	r0, [pc, #412]	; (8001368 <TIM2_IRQHandler+0x314>)
 80011cc:	f000 fc67 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d6:	4865      	ldr	r0, [pc, #404]	; (800136c <TIM2_IRQHandler+0x318>)
 80011d8:	f000 fc61 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e2:	4861      	ldr	r0, [pc, #388]	; (8001368 <TIM2_IRQHandler+0x314>)
 80011e4:	f000 fc5b 	bl	8001a9e <HAL_GPIO_WritePin>
			  break;
 80011e8:	e0ab      	b.n	8001342 <TIM2_IRQHandler+0x2ee>
			  HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f0:	485d      	ldr	r0, [pc, #372]	; (8001368 <TIM2_IRQHandler+0x314>)
 80011f2:	f000 fc54 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011fc:	485a      	ldr	r0, [pc, #360]	; (8001368 <TIM2_IRQHandler+0x314>)
 80011fe:	f000 fc4e 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001208:	4857      	ldr	r0, [pc, #348]	; (8001368 <TIM2_IRQHandler+0x314>)
 800120a:	f000 fc48 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_SET);
 800120e:	2201      	movs	r2, #1
 8001210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001214:	4854      	ldr	r0, [pc, #336]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001216:	f000 fc42 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001220:	4851      	ldr	r0, [pc, #324]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001222:	f000 fc3c 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	f44f 7180 	mov.w	r1, #256	; 0x100
 800122c:	484f      	ldr	r0, [pc, #316]	; (800136c <TIM2_IRQHandler+0x318>)
 800122e:	f000 fc36 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001238:	484b      	ldr	r0, [pc, #300]	; (8001368 <TIM2_IRQHandler+0x314>)
 800123a:	f000 fc30 	bl	8001a9e <HAL_GPIO_WritePin>
			  break;
 800123e:	e080      	b.n	8001342 <TIM2_IRQHandler+0x2ee>
			  HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001246:	4848      	ldr	r0, [pc, #288]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001248:	f000 fc29 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001252:	4845      	ldr	r0, [pc, #276]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001254:	f000 fc23 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125e:	4842      	ldr	r0, [pc, #264]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001260:	f000 fc1d 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126a:	483f      	ldr	r0, [pc, #252]	; (8001368 <TIM2_IRQHandler+0x314>)
 800126c:	f000 fc17 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001276:	483c      	ldr	r0, [pc, #240]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001278:	f000 fc11 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001282:	483a      	ldr	r0, [pc, #232]	; (800136c <TIM2_IRQHandler+0x318>)
 8001284:	f000 fc0b 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128e:	4836      	ldr	r0, [pc, #216]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001290:	f000 fc05 	bl	8001a9e <HAL_GPIO_WritePin>
			  break;
 8001294:	e055      	b.n	8001342 <TIM2_IRQHandler+0x2ee>
			  HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129c:	4832      	ldr	r0, [pc, #200]	; (8001368 <TIM2_IRQHandler+0x314>)
 800129e:	f000 fbfe 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a8:	482f      	ldr	r0, [pc, #188]	; (8001368 <TIM2_IRQHandler+0x314>)
 80012aa:	f000 fbf8 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b4:	482c      	ldr	r0, [pc, #176]	; (8001368 <TIM2_IRQHandler+0x314>)
 80012b6:	f000 fbf2 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c0:	4829      	ldr	r0, [pc, #164]	; (8001368 <TIM2_IRQHandler+0x314>)
 80012c2:	f000 fbec 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012cc:	4826      	ldr	r0, [pc, #152]	; (8001368 <TIM2_IRQHandler+0x314>)
 80012ce:	f000 fbe6 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012d8:	4824      	ldr	r0, [pc, #144]	; (800136c <TIM2_IRQHandler+0x318>)
 80012da:	f000 fbe0 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e4:	4820      	ldr	r0, [pc, #128]	; (8001368 <TIM2_IRQHandler+0x314>)
 80012e6:	f000 fbda 	bl	8001a9e <HAL_GPIO_WritePin>
			  break;
 80012ea:	e02a      	b.n	8001342 <TIM2_IRQHandler+0x2ee>
			  HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f2:	481d      	ldr	r0, [pc, #116]	; (8001368 <TIM2_IRQHandler+0x314>)
 80012f4:	f000 fbd3 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fe:	481a      	ldr	r0, [pc, #104]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001300:	f000 fbcd 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130a:	4817      	ldr	r0, [pc, #92]	; (8001368 <TIM2_IRQHandler+0x314>)
 800130c:	f000 fbc7 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001316:	4814      	ldr	r0, [pc, #80]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001318:	f000 fbc1 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001322:	4811      	ldr	r0, [pc, #68]	; (8001368 <TIM2_IRQHandler+0x314>)
 8001324:	f000 fbbb 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800132e:	480f      	ldr	r0, [pc, #60]	; (800136c <TIM2_IRQHandler+0x318>)
 8001330:	f000 fbb5 	bl	8001a9e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800133a:	480b      	ldr	r0, [pc, #44]	; (8001368 <TIM2_IRQHandler+0x314>)
 800133c:	f000 fbaf 	bl	8001a9e <HAL_GPIO_WritePin>
			  break;
 8001340:	bf00      	nop
		digit++;
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <TIM2_IRQHandler+0x31c>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	3301      	adds	r3, #1
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <TIM2_IRQHandler+0x31c>)
 800134c:	701a      	strb	r2, [r3, #0]
		if (digit > (SS_DIGIT - 1)){
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <TIM2_IRQHandler+0x31c>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b07      	cmp	r3, #7
 8001354:	d902      	bls.n	800135c <TIM2_IRQHandler+0x308>
		  digit = 0;
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <TIM2_IRQHandler+0x31c>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200000ac 	.word	0x200000ac
 8001364:	20000054 	.word	0x20000054
 8001368:	40010c00 	.word	0x40010c00
 800136c:	40010800 	.word	0x40010800
 8001370:	20000044 	.word	0x20000044
 8001374:	2000007c 	.word	0x2000007c

08001378 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <RTC_Alarm_IRQHandler+0x10>)
 800137e:	f001 fcbb 	bl	8002cf8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000084 	.word	0x20000084

0800138c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <SystemInit+0x5c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <SystemInit+0x5c>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <SystemInit+0x5c>)
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	4911      	ldr	r1, [pc, #68]	; (80013e8 <SystemInit+0x5c>)
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <SystemInit+0x60>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <SystemInit+0x5c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <SystemInit+0x5c>)
 80013ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80013b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <SystemInit+0x5c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <SystemInit+0x5c>)
 80013be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <SystemInit+0x5c>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <SystemInit+0x5c>)
 80013ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80013ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <SystemInit+0x5c>)
 80013d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80013d6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <SystemInit+0x64>)
 80013da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013de:	609a      	str	r2, [r3, #8]
#endif 
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	40021000 	.word	0x40021000
 80013ec:	f8ff0000 	.word	0xf8ff0000
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013f6:	e003      	b.n	8001400 <LoopCopyDataInit>

080013f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80013fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013fe:	3104      	adds	r1, #4

08001400 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001400:	480a      	ldr	r0, [pc, #40]	; (800142c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001404:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001406:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001408:	d3f6      	bcc.n	80013f8 <CopyDataInit>
  ldr r2, =_sbss
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800140c:	e002      	b.n	8001414 <LoopFillZerobss>

0800140e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001410:	f842 3b04 	str.w	r3, [r2], #4

08001414 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001416:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001418:	d3f9      	bcc.n	800140e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800141a:	f7ff ffb7 	bl	800138c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800141e:	f002 fba7 	bl	8003b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001422:	f7ff fb1d 	bl	8000a60 <main>
  bx lr
 8001426:	4770      	bx	lr
  ldr r3, =_sidata
 8001428:	08003c38 	.word	0x08003c38
  ldr r0, =_sdata
 800142c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001430:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001434:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001438:	20000104 	.word	0x20000104

0800143c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800143c:	e7fe      	b.n	800143c <ADC1_2_IRQHandler>
	...

08001440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_Init+0x28>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_Init+0x28>)
 800144a:	f043 0310 	orr.w	r3, r3, #16
 800144e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 f947 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001456:	2000      	movs	r0, #0
 8001458:	f000 f808 	bl	800146c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145c:	f7ff fd3c 	bl	8000ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40022000 	.word	0x40022000

0800146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_InitTick+0x54>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_InitTick+0x58>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001482:	fbb3 f3f1 	udiv	r3, r3, r1
 8001486:	fbb2 f3f3 	udiv	r3, r2, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f95f 	bl	800174e <HAL_SYSTICK_Config>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e00e      	b.n	80014b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d80a      	bhi.n	80014b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f000 f927 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ac:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <HAL_InitTick+0x5c>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000004 	.word	0x20000004

080014cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_IncTick+0x1c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_IncTick+0x20>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a03      	ldr	r2, [pc, #12]	; (80014ec <HAL_IncTick+0x20>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	20000008 	.word	0x20000008
 80014ec:	20000100 	.word	0x20000100

080014f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b02      	ldr	r3, [pc, #8]	; (8001500 <HAL_GetTick+0x10>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	20000100 	.word	0x20000100

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff fff0 	bl	80014f0 <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffe0 	bl	80014f0 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db0b      	blt.n	80015da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	f003 021f 	and.w	r2, r3, #31
 80015c8:	4906      	ldr	r1, [pc, #24]	; (80015e4 <__NVIC_EnableIRQ+0x34>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	2001      	movs	r0, #1
 80015d2:	fa00 f202 	lsl.w	r2, r0, r2
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff90 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff2d 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800170c:	f7ff ff42 	bl	8001594 <__NVIC_GetPriorityGrouping>
 8001710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	f7ff ff90 	bl	800163c <NVIC_EncodePriority>
 800171c:	4602      	mov	r2, r0
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff5f 	bl	80015e8 <__NVIC_SetPriority>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff35 	bl	80015b0 <__NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffa2 	bl	80016a0 <SysTick_Config>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001768:	b480      	push	{r7}
 800176a:	b08b      	sub	sp, #44	; 0x2c
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800177a:	e169      	b.n	8001a50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800177c:	2201      	movs	r2, #1
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	429a      	cmp	r2, r3
 8001796:	f040 8158 	bne.w	8001a4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4a9a      	ldr	r2, [pc, #616]	; (8001a08 <HAL_GPIO_Init+0x2a0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d05e      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017a4:	4a98      	ldr	r2, [pc, #608]	; (8001a08 <HAL_GPIO_Init+0x2a0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d875      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017aa:	4a98      	ldr	r2, [pc, #608]	; (8001a0c <HAL_GPIO_Init+0x2a4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d058      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017b0:	4a96      	ldr	r2, [pc, #600]	; (8001a0c <HAL_GPIO_Init+0x2a4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d86f      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017b6:	4a96      	ldr	r2, [pc, #600]	; (8001a10 <HAL_GPIO_Init+0x2a8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d052      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017bc:	4a94      	ldr	r2, [pc, #592]	; (8001a10 <HAL_GPIO_Init+0x2a8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d869      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017c2:	4a94      	ldr	r2, [pc, #592]	; (8001a14 <HAL_GPIO_Init+0x2ac>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d04c      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017c8:	4a92      	ldr	r2, [pc, #584]	; (8001a14 <HAL_GPIO_Init+0x2ac>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d863      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017ce:	4a92      	ldr	r2, [pc, #584]	; (8001a18 <HAL_GPIO_Init+0x2b0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d046      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017d4:	4a90      	ldr	r2, [pc, #576]	; (8001a18 <HAL_GPIO_Init+0x2b0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d85d      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017da:	2b12      	cmp	r3, #18
 80017dc:	d82a      	bhi.n	8001834 <HAL_GPIO_Init+0xcc>
 80017de:	2b12      	cmp	r3, #18
 80017e0:	d859      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017e2:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <HAL_GPIO_Init+0x80>)
 80017e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e8:	08001863 	.word	0x08001863
 80017ec:	0800183d 	.word	0x0800183d
 80017f0:	0800184f 	.word	0x0800184f
 80017f4:	08001891 	.word	0x08001891
 80017f8:	08001897 	.word	0x08001897
 80017fc:	08001897 	.word	0x08001897
 8001800:	08001897 	.word	0x08001897
 8001804:	08001897 	.word	0x08001897
 8001808:	08001897 	.word	0x08001897
 800180c:	08001897 	.word	0x08001897
 8001810:	08001897 	.word	0x08001897
 8001814:	08001897 	.word	0x08001897
 8001818:	08001897 	.word	0x08001897
 800181c:	08001897 	.word	0x08001897
 8001820:	08001897 	.word	0x08001897
 8001824:	08001897 	.word	0x08001897
 8001828:	08001897 	.word	0x08001897
 800182c:	08001845 	.word	0x08001845
 8001830:	08001859 	.word	0x08001859
 8001834:	4a79      	ldr	r2, [pc, #484]	; (8001a1c <HAL_GPIO_Init+0x2b4>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d013      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800183a:	e02c      	b.n	8001896 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	623b      	str	r3, [r7, #32]
          break;
 8001842:	e029      	b.n	8001898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	3304      	adds	r3, #4
 800184a:	623b      	str	r3, [r7, #32]
          break;
 800184c:	e024      	b.n	8001898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	3308      	adds	r3, #8
 8001854:	623b      	str	r3, [r7, #32]
          break;
 8001856:	e01f      	b.n	8001898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	330c      	adds	r3, #12
 800185e:	623b      	str	r3, [r7, #32]
          break;
 8001860:	e01a      	b.n	8001898 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800186a:	2304      	movs	r3, #4
 800186c:	623b      	str	r3, [r7, #32]
          break;
 800186e:	e013      	b.n	8001898 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d105      	bne.n	8001884 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001878:	2308      	movs	r3, #8
 800187a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	611a      	str	r2, [r3, #16]
          break;
 8001882:	e009      	b.n	8001898 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001884:	2308      	movs	r3, #8
 8001886:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	615a      	str	r2, [r3, #20]
          break;
 800188e:	e003      	b.n	8001898 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
          break;
 8001894:	e000      	b.n	8001898 <HAL_GPIO_Init+0x130>
          break;
 8001896:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	2bff      	cmp	r3, #255	; 0xff
 800189c:	d801      	bhi.n	80018a2 <HAL_GPIO_Init+0x13a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	e001      	b.n	80018a6 <HAL_GPIO_Init+0x13e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3304      	adds	r3, #4
 80018a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2bff      	cmp	r3, #255	; 0xff
 80018ac:	d802      	bhi.n	80018b4 <HAL_GPIO_Init+0x14c>
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	e002      	b.n	80018ba <HAL_GPIO_Init+0x152>
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	3b08      	subs	r3, #8
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	210f      	movs	r1, #15
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	fa01 f303 	lsl.w	r3, r1, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	401a      	ands	r2, r3
 80018cc:	6a39      	ldr	r1, [r7, #32]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	431a      	orrs	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 80b1 	beq.w	8001a4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018e8:	4b4d      	ldr	r3, [pc, #308]	; (8001a20 <HAL_GPIO_Init+0x2b8>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a4c      	ldr	r2, [pc, #304]	; (8001a20 <HAL_GPIO_Init+0x2b8>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b4a      	ldr	r3, [pc, #296]	; (8001a20 <HAL_GPIO_Init+0x2b8>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001900:	4a48      	ldr	r2, [pc, #288]	; (8001a24 <HAL_GPIO_Init+0x2bc>)
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	089b      	lsrs	r3, r3, #2
 8001906:	3302      	adds	r3, #2
 8001908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	220f      	movs	r2, #15
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4013      	ands	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a40      	ldr	r2, [pc, #256]	; (8001a28 <HAL_GPIO_Init+0x2c0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d013      	beq.n	8001954 <HAL_GPIO_Init+0x1ec>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a3f      	ldr	r2, [pc, #252]	; (8001a2c <HAL_GPIO_Init+0x2c4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d00d      	beq.n	8001950 <HAL_GPIO_Init+0x1e8>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a3e      	ldr	r2, [pc, #248]	; (8001a30 <HAL_GPIO_Init+0x2c8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d007      	beq.n	800194c <HAL_GPIO_Init+0x1e4>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a3d      	ldr	r2, [pc, #244]	; (8001a34 <HAL_GPIO_Init+0x2cc>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d101      	bne.n	8001948 <HAL_GPIO_Init+0x1e0>
 8001944:	2303      	movs	r3, #3
 8001946:	e006      	b.n	8001956 <HAL_GPIO_Init+0x1ee>
 8001948:	2304      	movs	r3, #4
 800194a:	e004      	b.n	8001956 <HAL_GPIO_Init+0x1ee>
 800194c:	2302      	movs	r3, #2
 800194e:	e002      	b.n	8001956 <HAL_GPIO_Init+0x1ee>
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <HAL_GPIO_Init+0x1ee>
 8001954:	2300      	movs	r3, #0
 8001956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001958:	f002 0203 	and.w	r2, r2, #3
 800195c:	0092      	lsls	r2, r2, #2
 800195e:	4093      	lsls	r3, r2
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	4313      	orrs	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001966:	492f      	ldr	r1, [pc, #188]	; (8001a24 <HAL_GPIO_Init+0x2bc>)
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	3302      	adds	r3, #2
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001980:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	492c      	ldr	r1, [pc, #176]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	600b      	str	r3, [r1, #0]
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800198e:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	43db      	mvns	r3, r3
 8001996:	4928      	ldr	r1, [pc, #160]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 8001998:	4013      	ands	r3, r2
 800199a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019a8:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	4922      	ldr	r1, [pc, #136]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	43db      	mvns	r3, r3
 80019be:	491e      	ldr	r1, [pc, #120]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	4918      	ldr	r1, [pc, #96]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	608b      	str	r3, [r1, #8]
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4914      	ldr	r1, [pc, #80]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d021      	beq.n	8001a3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	490e      	ldr	r1, [pc, #56]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60cb      	str	r3, [r1, #12]
 8001a04:	e021      	b.n	8001a4a <HAL_GPIO_Init+0x2e2>
 8001a06:	bf00      	nop
 8001a08:	10320000 	.word	0x10320000
 8001a0c:	10310000 	.word	0x10310000
 8001a10:	10220000 	.word	0x10220000
 8001a14:	10210000 	.word	0x10210000
 8001a18:	10120000 	.word	0x10120000
 8001a1c:	10110000 	.word	0x10110000
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000
 8001a28:	40010800 	.word	0x40010800
 8001a2c:	40010c00 	.word	0x40010c00
 8001a30:	40011000 	.word	0x40011000
 8001a34:	40011400 	.word	0x40011400
 8001a38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_GPIO_Init+0x304>)
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	4909      	ldr	r1, [pc, #36]	; (8001a6c <HAL_GPIO_Init+0x304>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f47f ae8e 	bne.w	800177c <HAL_GPIO_Init+0x14>
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	372c      	adds	r7, #44	; 0x2c
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	40010400 	.word	0x40010400

08001a70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	e001      	b.n	8001a92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	807b      	strh	r3, [r7, #2]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aae:	787b      	ldrb	r3, [r7, #1]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab4:	887a      	ldrh	r2, [r7, #2]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aba:	e003      	b.n	8001ac4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	041a      	lsls	r2, r3, #16
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	611a      	str	r2, [r3, #16]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b085      	sub	sp, #20
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ae0:	887a      	ldrh	r2, [r7, #2]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	041a      	lsls	r2, r3, #16
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	887b      	ldrh	r3, [r7, #2]
 8001aee:	400b      	ands	r3, r1
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	611a      	str	r2, [r3, #16]
}
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	420e0020 	.word	0x420e0020

08001b18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e26c      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8087 	beq.w	8001c46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b38:	4b92      	ldr	r3, [pc, #584]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d00c      	beq.n	8001b5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b44:	4b8f      	ldr	r3, [pc, #572]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d112      	bne.n	8001b76 <HAL_RCC_OscConfig+0x5e>
 8001b50:	4b8c      	ldr	r3, [pc, #560]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5c:	d10b      	bne.n	8001b76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5e:	4b89      	ldr	r3, [pc, #548]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d06c      	beq.n	8001c44 <HAL_RCC_OscConfig+0x12c>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d168      	bne.n	8001c44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e246      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x76>
 8001b80:	4b80      	ldr	r3, [pc, #512]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a7f      	ldr	r2, [pc, #508]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	e02e      	b.n	8001bec <HAL_RCC_OscConfig+0xd4>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x98>
 8001b96:	4b7b      	ldr	r3, [pc, #492]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a7a      	ldr	r2, [pc, #488]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	4b78      	ldr	r3, [pc, #480]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a77      	ldr	r2, [pc, #476]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e01d      	b.n	8001bec <HAL_RCC_OscConfig+0xd4>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0xbc>
 8001bba:	4b72      	ldr	r3, [pc, #456]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a71      	ldr	r2, [pc, #452]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b6f      	ldr	r3, [pc, #444]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a6e      	ldr	r2, [pc, #440]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e00b      	b.n	8001bec <HAL_RCC_OscConfig+0xd4>
 8001bd4:	4b6b      	ldr	r3, [pc, #428]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a6a      	ldr	r2, [pc, #424]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b68      	ldr	r3, [pc, #416]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a67      	ldr	r2, [pc, #412]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fc7c 	bl	80014f0 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff fc78 	bl	80014f0 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	; 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e1fa      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	4b5d      	ldr	r3, [pc, #372]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0xe4>
 8001c1a:	e014      	b.n	8001c46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fc68 	bl	80014f0 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff fc64 	bl	80014f0 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	; 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e1e6      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	4b53      	ldr	r3, [pc, #332]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x10c>
 8001c42:	e000      	b.n	8001c46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d063      	beq.n	8001d1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c52:	4b4c      	ldr	r3, [pc, #304]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00b      	beq.n	8001c76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c5e:	4b49      	ldr	r3, [pc, #292]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d11c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x18c>
 8001c6a:	4b46      	ldr	r3, [pc, #280]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d116      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c76:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d005      	beq.n	8001c8e <HAL_RCC_OscConfig+0x176>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e1ba      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8e:	4b3d      	ldr	r3, [pc, #244]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4939      	ldr	r1, [pc, #228]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca2:	e03a      	b.n	8001d1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d020      	beq.n	8001cee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cac:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7ff fc1d 	bl	80014f0 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cba:	f7ff fc19 	bl	80014f0 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e19b      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4927      	ldr	r1, [pc, #156]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]
 8001cec:	e015      	b.n	8001d1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fbfc 	bl	80014f0 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfc:	f7ff fbf8 	bl	80014f0 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e17a      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d03a      	beq.n	8001d9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d019      	beq.n	8001d62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <HAL_RCC_OscConfig+0x274>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d34:	f7ff fbdc 	bl	80014f0 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3c:	f7ff fbd8 	bl	80014f0 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e15a      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f000 fac4 	bl	80022e8 <RCC_Delay>
 8001d60:	e01c      	b.n	8001d9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_RCC_OscConfig+0x274>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d68:	f7ff fbc2 	bl	80014f0 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d6e:	e00f      	b.n	8001d90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d70:	f7ff fbbe 	bl	80014f0 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d908      	bls.n	8001d90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e140      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000
 8001d88:	42420000 	.word	0x42420000
 8001d8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d90:	4b9e      	ldr	r3, [pc, #632]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e9      	bne.n	8001d70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80a6 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dae:	4b97      	ldr	r3, [pc, #604]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10d      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b94      	ldr	r3, [pc, #592]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4a93      	ldr	r2, [pc, #588]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	61d3      	str	r3, [r2, #28]
 8001dc6:	4b91      	ldr	r3, [pc, #580]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd6:	4b8e      	ldr	r3, [pc, #568]	; (8002010 <HAL_RCC_OscConfig+0x4f8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d118      	bne.n	8001e14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de2:	4b8b      	ldr	r3, [pc, #556]	; (8002010 <HAL_RCC_OscConfig+0x4f8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a8a      	ldr	r2, [pc, #552]	; (8002010 <HAL_RCC_OscConfig+0x4f8>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dee:	f7ff fb7f 	bl	80014f0 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df6:	f7ff fb7b 	bl	80014f0 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b64      	cmp	r3, #100	; 0x64
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e0fd      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e08:	4b81      	ldr	r3, [pc, #516]	; (8002010 <HAL_RCC_OscConfig+0x4f8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x312>
 8001e1c:	4b7b      	ldr	r3, [pc, #492]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4a7a      	ldr	r2, [pc, #488]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6213      	str	r3, [r2, #32]
 8001e28:	e02d      	b.n	8001e86 <HAL_RCC_OscConfig+0x36e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x334>
 8001e32:	4b76      	ldr	r3, [pc, #472]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4a75      	ldr	r2, [pc, #468]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	6213      	str	r3, [r2, #32]
 8001e3e:	4b73      	ldr	r3, [pc, #460]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4a72      	ldr	r2, [pc, #456]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	6213      	str	r3, [r2, #32]
 8001e4a:	e01c      	b.n	8001e86 <HAL_RCC_OscConfig+0x36e>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d10c      	bne.n	8001e6e <HAL_RCC_OscConfig+0x356>
 8001e54:	4b6d      	ldr	r3, [pc, #436]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4a6c      	ldr	r2, [pc, #432]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6213      	str	r3, [r2, #32]
 8001e60:	4b6a      	ldr	r3, [pc, #424]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a69      	ldr	r2, [pc, #420]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6213      	str	r3, [r2, #32]
 8001e6c:	e00b      	b.n	8001e86 <HAL_RCC_OscConfig+0x36e>
 8001e6e:	4b67      	ldr	r3, [pc, #412]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	4a66      	ldr	r2, [pc, #408]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	6213      	str	r3, [r2, #32]
 8001e7a:	4b64      	ldr	r3, [pc, #400]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4a63      	ldr	r2, [pc, #396]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	f023 0304 	bic.w	r3, r3, #4
 8001e84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d015      	beq.n	8001eba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8e:	f7ff fb2f 	bl	80014f0 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e94:	e00a      	b.n	8001eac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e96:	f7ff fb2b 	bl	80014f0 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e0ab      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eac:	4b57      	ldr	r3, [pc, #348]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ee      	beq.n	8001e96 <HAL_RCC_OscConfig+0x37e>
 8001eb8:	e014      	b.n	8001ee4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eba:	f7ff fb19 	bl	80014f0 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f7ff fb15 	bl	80014f0 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e095      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed8:	4b4c      	ldr	r3, [pc, #304]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1ee      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d105      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eea:	4b48      	ldr	r3, [pc, #288]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a47      	ldr	r2, [pc, #284]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8081 	beq.w	8002002 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f00:	4b42      	ldr	r3, [pc, #264]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d061      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d146      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f14:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <HAL_RCC_OscConfig+0x4fc>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1a:	f7ff fae9 	bl	80014f0 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f22:	f7ff fae5 	bl	80014f0 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e067      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f34:	4b35      	ldr	r3, [pc, #212]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f48:	d108      	bne.n	8001f5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f4a:	4b30      	ldr	r3, [pc, #192]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	492d      	ldr	r1, [pc, #180]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a19      	ldr	r1, [r3, #32]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	4927      	ldr	r1, [pc, #156]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <HAL_RCC_OscConfig+0x4fc>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7a:	f7ff fab9 	bl	80014f0 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f82:	f7ff fab5 	bl	80014f0 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e037      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f94:	4b1d      	ldr	r3, [pc, #116]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x46a>
 8001fa0:	e02f      	b.n	8002002 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <HAL_RCC_OscConfig+0x4fc>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7ff faa2 	bl	80014f0 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7ff fa9e 	bl	80014f0 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e020      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x498>
 8001fce:	e018      	b.n	8002002 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e013      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d106      	bne.n	8001ffe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d001      	beq.n	8002002 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	40007000 	.word	0x40007000
 8002014:	42420060 	.word	0x42420060

08002018 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0d0      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800202c:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d910      	bls.n	800205c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b67      	ldr	r3, [pc, #412]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 0207 	bic.w	r2, r3, #7
 8002042:	4965      	ldr	r1, [pc, #404]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b63      	ldr	r3, [pc, #396]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0b8      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d020      	beq.n	80020aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002074:	4b59      	ldr	r3, [pc, #356]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a58      	ldr	r2, [pc, #352]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800207e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800208c:	4b53      	ldr	r3, [pc, #332]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4a52      	ldr	r2, [pc, #328]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002096:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002098:	4b50      	ldr	r3, [pc, #320]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	494d      	ldr	r1, [pc, #308]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d040      	beq.n	8002138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b47      	ldr	r3, [pc, #284]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d115      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e07f      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d6:	4b41      	ldr	r3, [pc, #260]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e073      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e6:	4b3d      	ldr	r3, [pc, #244]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e06b      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f6:	4b39      	ldr	r3, [pc, #228]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f023 0203 	bic.w	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4936      	ldr	r1, [pc, #216]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002108:	f7ff f9f2 	bl	80014f0 <HAL_GetTick>
 800210c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	e00a      	b.n	8002126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002110:	f7ff f9ee 	bl	80014f0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	; 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e053      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 020c 	and.w	r2, r3, #12
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	429a      	cmp	r2, r3
 8002136:	d1eb      	bne.n	8002110 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002138:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d210      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 0207 	bic.w	r2, r3, #7
 800214e:	4922      	ldr	r1, [pc, #136]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e032      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4916      	ldr	r1, [pc, #88]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490e      	ldr	r1, [pc, #56]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021a6:	f000 f821 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490a      	ldr	r1, [pc, #40]	; (80021e0 <HAL_RCC_ClockConfig+0x1c8>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <HAL_RCC_ClockConfig+0x1cc>)
 80021c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <HAL_RCC_ClockConfig+0x1d0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff f950 	bl	800146c <HAL_InitTick>

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40022000 	.word	0x40022000
 80021dc:	40021000 	.word	0x40021000
 80021e0:	08003c18 	.word	0x08003c18
 80021e4:	20000000 	.word	0x20000000
 80021e8:	20000004 	.word	0x20000004

080021ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ec:	b490      	push	{r4, r7}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021f2:	4b2a      	ldr	r3, [pc, #168]	; (800229c <HAL_RCC_GetSysClockFreq+0xb0>)
 80021f4:	1d3c      	adds	r4, r7, #4
 80021f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021fc:	f240 2301 	movw	r3, #513	; 0x201
 8002200:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002216:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b04      	cmp	r3, #4
 8002224:	d002      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x40>
 8002226:	2b08      	cmp	r3, #8
 8002228:	d003      	beq.n	8002232 <HAL_RCC_GetSysClockFreq+0x46>
 800222a:	e02d      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800222c:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800222e:	623b      	str	r3, [r7, #32]
      break;
 8002230:	e02d      	b.n	800228e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	0c9b      	lsrs	r3, r3, #18
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800223e:	4413      	add	r3, r2
 8002240:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002244:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d013      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	0c5b      	lsrs	r3, r3, #17
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800225e:	4413      	add	r3, r2
 8002260:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002264:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	4a0e      	ldr	r2, [pc, #56]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800226a:	fb02 f203 	mul.w	r2, r2, r3
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	fbb2 f3f3 	udiv	r3, r2, r3
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
 8002276:	e004      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800227c:	fb02 f303 	mul.w	r3, r2, r3
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	623b      	str	r3, [r7, #32]
      break;
 8002286:	e002      	b.n	800228e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800228a:	623b      	str	r3, [r7, #32]
      break;
 800228c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800228e:	6a3b      	ldr	r3, [r7, #32]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3728      	adds	r7, #40	; 0x28
 8002294:	46bd      	mov	sp, r7
 8002296:	bc90      	pop	{r4, r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	08003be0 	.word	0x08003be0
 80022a0:	40021000 	.word	0x40021000
 80022a4:	007a1200 	.word	0x007a1200
 80022a8:	003d0900 	.word	0x003d0900

080022ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b0:	4b02      	ldr	r3, [pc, #8]	; (80022bc <HAL_RCC_GetHCLKFreq+0x10>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	20000000 	.word	0x20000000

080022c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022c4:	f7ff fff2 	bl	80022ac <HAL_RCC_GetHCLKFreq>
 80022c8:	4602      	mov	r2, r0
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	0adb      	lsrs	r3, r3, #11
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	4903      	ldr	r1, [pc, #12]	; (80022e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022d6:	5ccb      	ldrb	r3, [r1, r3]
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022dc:	4618      	mov	r0, r3
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	08003c28 	.word	0x08003c28

080022e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <RCC_Delay+0x34>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <RCC_Delay+0x38>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0a5b      	lsrs	r3, r3, #9
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002304:	bf00      	nop
  }
  while (Delay --);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1e5a      	subs	r2, r3, #1
 800230a:	60fa      	str	r2, [r7, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f9      	bne.n	8002304 <RCC_Delay+0x1c>
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	20000000 	.word	0x20000000
 8002320:	10624dd3 	.word	0x10624dd3

08002324 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d07d      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002340:	2300      	movs	r3, #0
 8002342:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002344:	4b4f      	ldr	r3, [pc, #316]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10d      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002350:	4b4c      	ldr	r3, [pc, #304]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	4a4b      	ldr	r2, [pc, #300]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235a:	61d3      	str	r3, [r2, #28]
 800235c:	4b49      	ldr	r3, [pc, #292]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002368:	2301      	movs	r3, #1
 800236a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	4b46      	ldr	r3, [pc, #280]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d118      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002378:	4b43      	ldr	r3, [pc, #268]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a42      	ldr	r2, [pc, #264]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002382:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002384:	f7ff f8b4 	bl	80014f0 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238a:	e008      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238c:	f7ff f8b0 	bl	80014f0 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	; 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e06d      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239e:	4b3a      	ldr	r3, [pc, #232]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023aa:	4b36      	ldr	r3, [pc, #216]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d02e      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d027      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023c8:	4b2e      	ldr	r3, [pc, #184]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023d2:	4b2e      	ldr	r3, [pc, #184]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023d8:	4b2c      	ldr	r3, [pc, #176]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023de:	4a29      	ldr	r2, [pc, #164]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d014      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ee:	f7ff f87f 	bl	80014f0 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f4:	e00a      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f6:	f7ff f87b 	bl	80014f0 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	f241 3288 	movw	r2, #5000	; 0x1388
 8002404:	4293      	cmp	r3, r2
 8002406:	d901      	bls.n	800240c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e036      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0ee      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002418:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4917      	ldr	r1, [pc, #92]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002426:	4313      	orrs	r3, r2
 8002428:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800242a:	7dfb      	ldrb	r3, [r7, #23]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d105      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	4a13      	ldr	r2, [pc, #76]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002448:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	490b      	ldr	r1, [pc, #44]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	4904      	ldr	r1, [pc, #16]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	40007000 	.word	0x40007000
 800248c:	42420440 	.word	0x42420440

08002490 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b08d      	sub	sp, #52	; 0x34
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002498:	4b5a      	ldr	r3, [pc, #360]	; (8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800249a:	f107 040c 	add.w	r4, r7, #12
 800249e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024a4:	f240 2301 	movw	r3, #513	; 0x201
 80024a8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
 80024ae:	2300      	movs	r3, #0
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024b2:	2300      	movs	r3, #0
 80024b4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	2300      	movs	r3, #0
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b10      	cmp	r3, #16
 80024c2:	d00a      	beq.n	80024da <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	f200 8091 	bhi.w	80025ee <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d04c      	beq.n	800256c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d07c      	beq.n	80025d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80024d8:	e089      	b.n	80025ee <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80024da:	4b4b      	ldr	r3, [pc, #300]	; (8002608 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80024e0:	4b49      	ldr	r3, [pc, #292]	; (8002608 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 8082 	beq.w	80025f2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	0c9b      	lsrs	r3, r3, #18
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80024fa:	4413      	add	r3, r2
 80024fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002500:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d018      	beq.n	800253e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800250c:	4b3e      	ldr	r3, [pc, #248]	; (8002608 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	0c5b      	lsrs	r3, r3, #17
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800251a:	4413      	add	r3, r2
 800251c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00d      	beq.n	8002548 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800252c:	4a37      	ldr	r2, [pc, #220]	; (800260c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	fbb2 f2f3 	udiv	r2, r2, r3
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	fb02 f303 	mul.w	r3, r2, r3
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800253c:	e004      	b.n	8002548 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	4a33      	ldr	r2, [pc, #204]	; (8002610 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002548:	4b2f      	ldr	r3, [pc, #188]	; (8002608 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002554:	d102      	bne.n	800255c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800255a:	e04a      	b.n	80025f2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 800255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4a2c      	ldr	r2, [pc, #176]	; (8002614 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	085b      	lsrs	r3, r3, #1
 8002568:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800256a:	e042      	b.n	80025f2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 800256c:	4b26      	ldr	r3, [pc, #152]	; (8002608 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800257c:	d108      	bne.n	8002590 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8002588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
 800258e:	e01f      	b.n	80025d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800259a:	d109      	bne.n	80025b0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800259c:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80025a8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ae:	e00f      	b.n	80025d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025ba:	d11c      	bne.n	80025f6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d016      	beq.n	80025f6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80025c8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80025ce:	e012      	b.n	80025f6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80025d0:	e011      	b.n	80025f6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80025d2:	f7ff fe75 	bl	80022c0 <HAL_RCC_GetPCLK2Freq>
 80025d6:	4602      	mov	r2, r0
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	0b9b      	lsrs	r3, r3, #14
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	3301      	adds	r3, #1
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80025ec:	e004      	b.n	80025f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80025ee:	bf00      	nop
 80025f0:	e002      	b.n	80025f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80025f2:	bf00      	nop
 80025f4:	e000      	b.n	80025f8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80025f6:	bf00      	nop
    }
  }
  return (frequency);
 80025f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3734      	adds	r7, #52	; 0x34
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd90      	pop	{r4, r7, pc}
 8002602:	bf00      	nop
 8002604:	08003bf0 	.word	0x08003bf0
 8002608:	40021000 	.word	0x40021000
 800260c:	007a1200 	.word	0x007a1200
 8002610:	003d0900 	.word	0x003d0900
 8002614:	aaaaaaab 	.word	0xaaaaaaab

08002618 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e084      	b.n	8002738 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	7c5b      	ldrb	r3, [r3, #17]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe fc7c 	bl	8000f3c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fb7c 	bl	8002d48 <HAL_RTC_WaitForSynchro>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d004      	beq.n	8002660 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2204      	movs	r2, #4
 800265a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e06b      	b.n	8002738 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fc35 	bl	8002ed0 <RTC_EnterInitMode>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d004      	beq.n	8002676 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2204      	movs	r2, #4
 8002670:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e060      	b.n	8002738 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0207 	bic.w	r2, r2, #7
 8002684:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800268e:	4b2c      	ldr	r3, [pc, #176]	; (8002740 <HAL_RTC_Init+0x128>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a2b      	ldr	r2, [pc, #172]	; (8002740 <HAL_RTC_Init+0x128>)
 8002694:	f023 0301 	bic.w	r3, r3, #1
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800269a:	4b29      	ldr	r3, [pc, #164]	; (8002740 <HAL_RTC_Init+0x128>)
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	4926      	ldr	r1, [pc, #152]	; (8002740 <HAL_RTC_Init+0x128>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d003      	beq.n	80026be <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	e00e      	b.n	80026dc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80026be:	2001      	movs	r0, #1
 80026c0:	f7ff fee6 	bl	8002490 <HAL_RCCEx_GetPeriphCLKFreq>
 80026c4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d104      	bne.n	80026d6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2204      	movs	r2, #4
 80026d0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e030      	b.n	8002738 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3b01      	subs	r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f023 010f 	bic.w	r1, r3, #15
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	0c1a      	lsrs	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0c1b      	lsrs	r3, r3, #16
 80026fa:	041b      	lsls	r3, r3, #16
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	b291      	uxth	r1, r2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	430b      	orrs	r3, r1
 8002706:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 fc09 	bl	8002f20 <RTC_ExitInitMode>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d004      	beq.n	800271e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2204      	movs	r2, #4
 8002718:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e00c      	b.n	8002738 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002736:	2300      	movs	r3, #0
  }
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40006c00 	.word	0x40006c00

08002744 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_RTC_SetTime+0x20>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e080      	b.n	800286a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	7c1b      	ldrb	r3, [r3, #16]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_RTC_SetTime+0x30>
 8002770:	2302      	movs	r3, #2
 8002772:	e07a      	b.n	800286a <HAL_RTC_SetTime+0x126>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2201      	movs	r2, #1
 8002778:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2202      	movs	r2, #2
 800277e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d113      	bne.n	80027ae <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002790:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	785b      	ldrb	r3, [r3, #1]
 8002798:	4619      	mov	r1, r3
 800279a:	460b      	mov	r3, r1
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	1a5b      	subs	r3, r3, r1
 80027a0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80027a2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80027a8:	4413      	add	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	e01e      	b.n	80027ec <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fbf9 	bl	8002faa <RTC_Bcd2ToByte>
 80027b8:	4603      	mov	r3, r0
 80027ba:	461a      	mov	r2, r3
 80027bc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80027c0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	785b      	ldrb	r3, [r3, #1]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fbee 	bl	8002faa <RTC_Bcd2ToByte>
 80027ce:	4603      	mov	r3, r0
 80027d0:	461a      	mov	r2, r3
 80027d2:	4613      	mov	r3, r2
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80027da:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	789b      	ldrb	r3, [r3, #2]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fbe2 	bl	8002faa <RTC_Bcd2ToByte>
 80027e6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80027e8:	4423      	add	r3, r4
 80027ea:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80027ec:	6979      	ldr	r1, [r7, #20]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 fb07 	bl	8002e02 <RTC_WriteTimeCounter>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2204      	movs	r2, #4
 80027fe:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e02f      	b.n	800286a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0205 	bic.w	r2, r2, #5
 8002818:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 fb18 	bl	8002e50 <RTC_ReadAlarmCounter>
 8002820:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d018      	beq.n	800285c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	429a      	cmp	r2, r3
 8002830:	d214      	bcs.n	800285c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002838:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800283c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800283e:	6939      	ldr	r1, [r7, #16]
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 fb1e 	bl	8002e82 <RTC_WriteAlarmCounter>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d007      	beq.n	800285c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2204      	movs	r2, #4
 8002850:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e006      	b.n	800286a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002868:	2300      	movs	r3, #0
  }
}
 800286a:	4618      	mov	r0, r3
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	bd90      	pop	{r4, r7, pc}
	...

08002874 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <HAL_RTC_GetTime+0x28>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0b5      	b.n	8002a0c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0ac      	b.n	8002a0c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fa75 	bl	8002da2 <RTC_ReadTimeCounter>
 80028b8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4a55      	ldr	r2, [pc, #340]	; (8002a14 <HAL_RTC_GetTime+0x1a0>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0adb      	lsrs	r3, r3, #11
 80028c4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4b52      	ldr	r3, [pc, #328]	; (8002a14 <HAL_RTC_GetTime+0x1a0>)
 80028ca:	fba3 1302 	umull	r1, r3, r3, r2
 80028ce:	0adb      	lsrs	r3, r3, #11
 80028d0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	4a4f      	ldr	r2, [pc, #316]	; (8002a18 <HAL_RTC_GetTime+0x1a4>)
 80028dc:	fba2 2303 	umull	r2, r3, r2, r3
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	4a4a      	ldr	r2, [pc, #296]	; (8002a14 <HAL_RTC_GetTime+0x1a0>)
 80028ec:	fba2 1203 	umull	r1, r2, r2, r3
 80028f0:	0ad2      	lsrs	r2, r2, #11
 80028f2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80028f6:	fb01 f202 	mul.w	r2, r1, r2
 80028fa:	1a9a      	subs	r2, r3, r2
 80028fc:	4b46      	ldr	r3, [pc, #280]	; (8002a18 <HAL_RTC_GetTime+0x1a4>)
 80028fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002902:	0959      	lsrs	r1, r3, #5
 8002904:	460b      	mov	r3, r1
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	1a5b      	subs	r3, r3, r1
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	1ad1      	subs	r1, r2, r3
 800290e:	b2ca      	uxtb	r2, r1
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	2b17      	cmp	r3, #23
 8002918:	d955      	bls.n	80029c6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4a3f      	ldr	r2, [pc, #252]	; (8002a1c <HAL_RTC_GetTime+0x1a8>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002926:	6939      	ldr	r1, [r7, #16]
 8002928:	4b3c      	ldr	r3, [pc, #240]	; (8002a1c <HAL_RTC_GetTime+0x1a8>)
 800292a:	fba3 2301 	umull	r2, r3, r3, r1
 800292e:	091a      	lsrs	r2, r3, #4
 8002930:	4613      	mov	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	1aca      	subs	r2, r1, r3
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fa85 	bl	8002e50 <RTC_ReadAlarmCounter>
 8002946:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294e:	d008      	beq.n	8002962 <HAL_RTC_GetTime+0xee>
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	429a      	cmp	r2, r3
 8002956:	d904      	bls.n	8002962 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	61fb      	str	r3, [r7, #28]
 8002960:	e002      	b.n	8002968 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8002962:	f04f 33ff 	mov.w	r3, #4294967295
 8002966:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	4a2d      	ldr	r2, [pc, #180]	; (8002a20 <HAL_RTC_GetTime+0x1ac>)
 800296c:	fb02 f303 	mul.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002976:	69b9      	ldr	r1, [r7, #24]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fa42 	bl	8002e02 <RTC_WriteTimeCounter>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e041      	b.n	8002a0c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298e:	d00c      	beq.n	80029aa <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4413      	add	r3, r2
 8002996:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002998:	69f9      	ldr	r1, [r7, #28]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 fa71 	bl	8002e82 <RTC_WriteAlarmCounter>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e030      	b.n	8002a0c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80029aa:	69f9      	ldr	r1, [r7, #28]
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 fa68 	bl	8002e82 <RTC_WriteAlarmCounter>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e027      	b.n	8002a0c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80029bc:	6979      	ldr	r1, [r7, #20]
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fb10 	bl	8002fe4 <RTC_DateUpdate>
 80029c4:	e003      	b.n	80029ce <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01a      	beq.n	8002a0a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fac9 	bl	8002f70 <RTC_ByteToBcd2>
 80029de:	4603      	mov	r3, r0
 80029e0:	461a      	mov	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	785b      	ldrb	r3, [r3, #1]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 fac0 	bl	8002f70 <RTC_ByteToBcd2>
 80029f0:	4603      	mov	r3, r0
 80029f2:	461a      	mov	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	789b      	ldrb	r3, [r3, #2]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fab7 	bl	8002f70 <RTC_ByteToBcd2>
 8002a02:	4603      	mov	r3, r0
 8002a04:	461a      	mov	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3720      	adds	r7, #32
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	91a2b3c5 	.word	0x91a2b3c5
 8002a18:	88888889 	.word	0x88888889
 8002a1c:	aaaaaaab 	.word	0xaaaaaaab
 8002a20:	00015180 	.word	0x00015180

08002a24 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	2300      	movs	r3, #0
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <HAL_RTC_SetDate+0x24>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e097      	b.n	8002b7c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	7c1b      	ldrb	r3, [r3, #16]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_RTC_SetDate+0x34>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e091      	b.n	8002b7c <HAL_RTC_SetDate+0x158>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2202      	movs	r2, #2
 8002a62:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10c      	bne.n	8002a84 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	78da      	ldrb	r2, [r3, #3]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	785a      	ldrb	r2, [r3, #1]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	789a      	ldrb	r2, [r3, #2]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	739a      	strb	r2, [r3, #14]
 8002a82:	e01a      	b.n	8002aba <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	78db      	ldrb	r3, [r3, #3]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 fa8e 	bl	8002faa <RTC_Bcd2ToByte>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	461a      	mov	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	785b      	ldrb	r3, [r3, #1]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 fa85 	bl	8002faa <RTC_Bcd2ToByte>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	789b      	ldrb	r3, [r3, #2]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fa7c 	bl	8002faa <RTC_Bcd2ToByte>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	7bdb      	ldrb	r3, [r3, #15]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	7b59      	ldrb	r1, [r3, #13]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	7b9b      	ldrb	r3, [r3, #14]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f000 fb67 	bl	800319c <RTC_WeekDayNum>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	7b1a      	ldrb	r2, [r3, #12]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f95f 	bl	8002da2 <RTC_ReadTimeCounter>
 8002ae4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	4a26      	ldr	r2, [pc, #152]	; (8002b84 <HAL_RTC_SetDate+0x160>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	0adb      	lsrs	r3, r3, #11
 8002af0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b18      	cmp	r3, #24
 8002af6:	d93a      	bls.n	8002b6e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	4a23      	ldr	r2, [pc, #140]	; (8002b88 <HAL_RTC_SetDate+0x164>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	4a22      	ldr	r2, [pc, #136]	; (8002b8c <HAL_RTC_SetDate+0x168>)
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002b0e:	69f9      	ldr	r1, [r7, #28]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f976 	bl	8002e02 <RTC_WriteTimeCounter>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d007      	beq.n	8002b2c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2204      	movs	r2, #4
 8002b20:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e027      	b.n	8002b7c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f98f 	bl	8002e50 <RTC_ReadAlarmCounter>
 8002b32:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3a:	d018      	beq.n	8002b6e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d214      	bcs.n	8002b6e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002b4a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002b4e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002b50:	69b9      	ldr	r1, [r7, #24]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f995 	bl	8002e82 <RTC_WriteAlarmCounter>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2204      	movs	r2, #4
 8002b62:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e006      	b.n	8002b7c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2201      	movs	r2, #1
 8002b72:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3720      	adds	r7, #32
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	91a2b3c5 	.word	0x91a2b3c5
 8002b88:	aaaaaaab 	.word	0xaaaaaaab
 8002b8c:	00015180 	.word	0x00015180

08002b90 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	460a      	mov	r2, r1
 8002ba8:	801a      	strh	r2, [r3, #0]
 8002baa:	460a      	mov	r2, r1
 8002bac:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_RTC_SetAlarm_IT+0x2a>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e096      	b.n	8002cec <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	7c1b      	ldrb	r3, [r3, #16]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_RTC_SetAlarm_IT+0x3a>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e090      	b.n	8002cec <HAL_RTC_SetAlarm_IT+0x15c>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002bd6:	f107 0314 	add.w	r3, r7, #20
 8002bda:	2200      	movs	r2, #0
 8002bdc:	4619      	mov	r1, r3
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f7ff fe48 	bl	8002874 <HAL_RTC_GetTime>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e07e      	b.n	8002cec <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002bee:	7d3b      	ldrb	r3, [r7, #20]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002bf6:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8002bfa:	7d7b      	ldrb	r3, [r7, #21]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	460b      	mov	r3, r1
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	1a5b      	subs	r3, r3, r1
 8002c04:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002c06:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8002c08:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002c0a:	4413      	add	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d113      	bne.n	8002c3c <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002c1e:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	785b      	ldrb	r3, [r3, #1]
 8002c26:	4619      	mov	r1, r3
 8002c28:	460b      	mov	r3, r1
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a5b      	subs	r3, r3, r1
 8002c2e:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002c30:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002c36:	4413      	add	r3, r2
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	e01e      	b.n	8002c7a <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 f9b2 	bl	8002faa <RTC_Bcd2ToByte>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002c4e:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	785b      	ldrb	r3, [r3, #1]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f9a7 	bl	8002faa <RTC_Bcd2ToByte>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4613      	mov	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002c68:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	789b      	ldrb	r3, [r3, #2]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f99b 	bl	8002faa <RTC_Bcd2ToByte>
 8002c74:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002c76:	4423      	add	r3, r4
 8002c78:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d205      	bcs.n	8002c8e <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002c88:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c8c:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002c8e:	69f9      	ldr	r1, [r7, #28]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f8f6 	bl	8002e82 <RTC_WriteAlarmCounter>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e01f      	b.n	8002cec <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0202 	mvn.w	r2, #2
 8002cb4:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0202 	orr.w	r2, r2, #2
 8002cc4:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RTC_SetAlarm_IT+0x164>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <HAL_RTC_SetAlarm_IT+0x164>)
 8002ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd0:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002cd2:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <HAL_RTC_SetAlarm_IT+0x164>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	4a07      	ldr	r2, [pc, #28]	; (8002cf4 <HAL_RTC_SetAlarm_IT+0x164>)
 8002cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cdc:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002cea:	2300      	movs	r3, #0
  }
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3724      	adds	r7, #36	; 0x24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd90      	pop	{r4, r7, pc}
 8002cf4:	40010400 	.word	0x40010400

08002cf8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00e      	beq.n	8002d2c <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7fd fe5d 	bl	80009dc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f06f 0202 	mvn.w	r2, #2
 8002d2a:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8002d2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d32:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	745a      	strb	r2, [r3, #17]
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40010400 	.word	0x40010400

08002d48 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e01d      	b.n	8002d9a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0208 	bic.w	r2, r2, #8
 8002d6c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002d6e:	f7fe fbbf 	bl	80014f0 <HAL_GetTick>
 8002d72:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002d74:	e009      	b.n	8002d8a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002d76:	f7fe fbbb 	bl	80014f0 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d84:	d901      	bls.n	8002d8a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e007      	b.n	8002d9a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0ee      	beq.n	8002d76 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b087      	sub	sp, #28
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	827b      	strh	r3, [r7, #18]
 8002dae:	2300      	movs	r3, #0
 8002db0:	823b      	strh	r3, [r7, #16]
 8002db2:	2300      	movs	r3, #0
 8002db4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002dd2:	8a7a      	ldrh	r2, [r7, #18]
 8002dd4:	8a3b      	ldrh	r3, [r7, #16]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d008      	beq.n	8002dec <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002dda:	8a3b      	ldrh	r3, [r7, #16]
 8002ddc:	041a      	lsls	r2, r3, #16
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	e004      	b.n	8002df6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002dec:	8a7b      	ldrh	r3, [r7, #18]
 8002dee:	041a      	lsls	r2, r3, #16
 8002df0:	89fb      	ldrh	r3, [r7, #14]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002df6:	697b      	ldr	r3, [r7, #20]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr

08002e02 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f85d 	bl	8002ed0 <RTC_EnterInitMode>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
 8002e20:	e011      	b.n	8002e46 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	0c12      	lsrs	r2, r2, #16
 8002e2a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	b292      	uxth	r2, r2
 8002e34:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f872 	bl	8002f20 <RTC_ExitInitMode>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	81fb      	strh	r3, [r7, #14]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002e70:	89fb      	ldrh	r3, [r7, #14]
 8002e72:	041a      	lsls	r2, r3, #16
 8002e74:	89bb      	ldrh	r3, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f81d 	bl	8002ed0 <RTC_EnterInitMode>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
 8002ea0:	e011      	b.n	8002ec6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	0c12      	lsrs	r2, r2, #16
 8002eaa:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	b292      	uxth	r2, r2
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f832 	bl	8002f20 <RTC_ExitInitMode>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002edc:	f7fe fb08 	bl	80014f0 <HAL_GetTick>
 8002ee0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002ee2:	e009      	b.n	8002ef8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002ee4:	f7fe fb04 	bl	80014f0 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ef2:	d901      	bls.n	8002ef8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e00f      	b.n	8002f18 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0ee      	beq.n	8002ee4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0210 	orr.w	r2, r2, #16
 8002f14:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0210 	bic.w	r2, r2, #16
 8002f3a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002f3c:	f7fe fad8 	bl	80014f0 <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002f42:	e009      	b.n	8002f58 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002f44:	f7fe fad4 	bl	80014f0 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f52:	d901      	bls.n	8002f58 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e007      	b.n	8002f68 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0ee      	beq.n	8002f44 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002f7e:	e005      	b.n	8002f8c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	3301      	adds	r3, #1
 8002f84:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	3b0a      	subs	r3, #10
 8002f8a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	2b09      	cmp	r3, #9
 8002f90:	d8f6      	bhi.n	8002f80 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	b2db      	uxtb	r3, r3
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b085      	sub	sp, #20
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	b2db      	uxtb	r3, r3
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	7bdb      	ldrb	r3, [r3, #15]
 8003002:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	7b5b      	ldrb	r3, [r3, #13]
 8003008:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7b9b      	ldrb	r3, [r3, #14]
 800300e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003010:	2300      	movs	r3, #0
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	e06f      	b.n	80030f6 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d011      	beq.n	8003040 <RTC_DateUpdate+0x5c>
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d00e      	beq.n	8003040 <RTC_DateUpdate+0x5c>
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b05      	cmp	r3, #5
 8003026:	d00b      	beq.n	8003040 <RTC_DateUpdate+0x5c>
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	2b07      	cmp	r3, #7
 800302c:	d008      	beq.n	8003040 <RTC_DateUpdate+0x5c>
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b08      	cmp	r3, #8
 8003032:	d005      	beq.n	8003040 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	2b0a      	cmp	r3, #10
 8003038:	d002      	beq.n	8003040 <RTC_DateUpdate+0x5c>
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b0c      	cmp	r3, #12
 800303e:	d117      	bne.n	8003070 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b1e      	cmp	r3, #30
 8003044:	d803      	bhi.n	800304e <RTC_DateUpdate+0x6a>
      {
        day++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3301      	adds	r3, #1
 800304a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800304c:	e050      	b.n	80030f0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b0c      	cmp	r3, #12
 8003052:	d005      	beq.n	8003060 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	3301      	adds	r3, #1
 8003058:	613b      	str	r3, [r7, #16]
          day = 1U;
 800305a:	2301      	movs	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800305e:	e047      	b.n	80030f0 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003060:	2301      	movs	r3, #1
 8003062:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003064:	2301      	movs	r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
          year++;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	3301      	adds	r3, #1
 800306c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800306e:	e03f      	b.n	80030f0 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	2b04      	cmp	r3, #4
 8003074:	d008      	beq.n	8003088 <RTC_DateUpdate+0xa4>
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2b06      	cmp	r3, #6
 800307a:	d005      	beq.n	8003088 <RTC_DateUpdate+0xa4>
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b09      	cmp	r3, #9
 8003080:	d002      	beq.n	8003088 <RTC_DateUpdate+0xa4>
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2b0b      	cmp	r3, #11
 8003086:	d10c      	bne.n	80030a2 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b1d      	cmp	r3, #29
 800308c:	d803      	bhi.n	8003096 <RTC_DateUpdate+0xb2>
      {
        day++;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3301      	adds	r3, #1
 8003092:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003094:	e02c      	b.n	80030f0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	3301      	adds	r3, #1
 800309a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800309c:	2301      	movs	r3, #1
 800309e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80030a0:	e026      	b.n	80030f0 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d123      	bne.n	80030f0 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b1b      	cmp	r3, #27
 80030ac:	d803      	bhi.n	80030b6 <RTC_DateUpdate+0xd2>
      {
        day++;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3301      	adds	r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	e01c      	b.n	80030f0 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b1c      	cmp	r3, #28
 80030ba:	d111      	bne.n	80030e0 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 f839 	bl	8003138 <RTC_IsLeapYear>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <RTC_DateUpdate+0xf0>
        {
          day++;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3301      	adds	r3, #1
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	e00d      	b.n	80030f0 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	3301      	adds	r3, #1
 80030d8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80030da:	2301      	movs	r3, #1
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	e007      	b.n	80030f0 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2b1d      	cmp	r3, #29
 80030e4:	d104      	bne.n	80030f0 <RTC_DateUpdate+0x10c>
      {
        month++;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	3301      	adds	r3, #1
 80030ea:	613b      	str	r3, [r7, #16]
        day = 1U;
 80030ec:	2301      	movs	r3, #1
 80030ee:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	3301      	adds	r3, #1
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d38b      	bcc.n	8003016 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	b2da      	uxtb	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	b2da      	uxtb	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	4619      	mov	r1, r3
 8003120:	6978      	ldr	r0, [r7, #20]
 8003122:	f000 f83b 	bl	800319c <RTC_WeekDayNum>
 8003126:	4603      	mov	r3, r0
 8003128:	461a      	mov	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	731a      	strb	r2, [r3, #12]
}
 800312e:	bf00      	nop
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	e01d      	b.n	800318e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	4a10      	ldr	r2, [pc, #64]	; (8003198 <RTC_IsLeapYear+0x60>)
 8003156:	fba2 1203 	umull	r1, r2, r2, r3
 800315a:	0952      	lsrs	r2, r2, #5
 800315c:	2164      	movs	r1, #100	; 0x64
 800315e:	fb01 f202 	mul.w	r2, r1, r2
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800316a:	2301      	movs	r3, #1
 800316c:	e00f      	b.n	800318e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	4a09      	ldr	r2, [pc, #36]	; (8003198 <RTC_IsLeapYear+0x60>)
 8003172:	fba2 1203 	umull	r1, r2, r2, r3
 8003176:	09d2      	lsrs	r2, r2, #7
 8003178:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800317c:	fb01 f202 	mul.w	r2, r1, r2
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	b29b      	uxth	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800318c:	2300      	movs	r3, #0
  }
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	51eb851f 	.word	0x51eb851f

0800319c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	70fb      	strb	r3, [r7, #3]
 80031a8:	4613      	mov	r3, r2
 80031aa:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80031ba:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d82d      	bhi.n	800321e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	4a2c      	ldr	r2, [pc, #176]	; (8003280 <RTC_WeekDayNum+0xe4>)
 80031d0:	fba2 2303 	umull	r2, r3, r2, r3
 80031d4:	085a      	lsrs	r2, r3, #1
 80031d6:	78bb      	ldrb	r3, [r7, #2]
 80031d8:	441a      	add	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	441a      	add	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	089b      	lsrs	r3, r3, #2
 80031e4:	441a      	add	r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	3b01      	subs	r3, #1
 80031ea:	4926      	ldr	r1, [pc, #152]	; (8003284 <RTC_WeekDayNum+0xe8>)
 80031ec:	fba1 1303 	umull	r1, r3, r1, r3
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	1ad2      	subs	r2, r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	4922      	ldr	r1, [pc, #136]	; (8003284 <RTC_WeekDayNum+0xe8>)
 80031fa:	fba1 1303 	umull	r1, r3, r1, r3
 80031fe:	09db      	lsrs	r3, r3, #7
 8003200:	4413      	add	r3, r2
 8003202:	1d1a      	adds	r2, r3, #4
 8003204:	4b20      	ldr	r3, [pc, #128]	; (8003288 <RTC_WeekDayNum+0xec>)
 8003206:	fba3 1302 	umull	r1, r3, r3, r2
 800320a:	1ad1      	subs	r1, r2, r3
 800320c:	0849      	lsrs	r1, r1, #1
 800320e:	440b      	add	r3, r1
 8003210:	0899      	lsrs	r1, r3, #2
 8003212:	460b      	mov	r3, r1
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	1a5b      	subs	r3, r3, r1
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	e029      	b.n	8003272 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	4613      	mov	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	4a15      	ldr	r2, [pc, #84]	; (8003280 <RTC_WeekDayNum+0xe4>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	085a      	lsrs	r2, r3, #1
 8003232:	78bb      	ldrb	r3, [r7, #2]
 8003234:	441a      	add	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	441a      	add	r2, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	441a      	add	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4910      	ldr	r1, [pc, #64]	; (8003284 <RTC_WeekDayNum+0xe8>)
 8003244:	fba1 1303 	umull	r1, r3, r1, r3
 8003248:	095b      	lsrs	r3, r3, #5
 800324a:	1ad2      	subs	r2, r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	490d      	ldr	r1, [pc, #52]	; (8003284 <RTC_WeekDayNum+0xe8>)
 8003250:	fba1 1303 	umull	r1, r3, r1, r3
 8003254:	09db      	lsrs	r3, r3, #7
 8003256:	4413      	add	r3, r2
 8003258:	1c9a      	adds	r2, r3, #2
 800325a:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <RTC_WeekDayNum+0xec>)
 800325c:	fba3 1302 	umull	r1, r3, r3, r2
 8003260:	1ad1      	subs	r1, r2, r3
 8003262:	0849      	lsrs	r1, r1, #1
 8003264:	440b      	add	r3, r1
 8003266:	0899      	lsrs	r1, r3, #2
 8003268:	460b      	mov	r3, r1
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	1a5b      	subs	r3, r3, r1
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	b2db      	uxtb	r3, r3
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	38e38e39 	.word	0x38e38e39
 8003284:	51eb851f 	.word	0x51eb851f
 8003288:	24924925 	.word	0x24924925

0800328c <HAL_RTCEx_SetSecond_IT>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSecond_IT(RTC_HandleTypeDef *hrtc)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check input parameters */
  if (hrtc == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RTCEx_SetSecond_IT+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e01a      	b.n	80032d4 <HAL_RTCEx_SetSecond_IT+0x48>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	7c1b      	ldrb	r3, [r3, #16]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_RTCEx_SetSecond_IT+0x1e>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e014      	b.n	80032d4 <HAL_RTCEx_SetSecond_IT+0x48>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	745a      	strb	r2, [r3, #17]

  /* Enable Second interuption */
  __HAL_RTC_SECOND_ENABLE_IT(hrtc, RTC_IT_SEC);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0201 	orr.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

  hrtc->State = HAL_RTC_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d024      	beq.n	800333e <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d01d      	beq.n	800333e <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00b      	beq.n	8003328 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f821 	bl	8003358 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f06f 0204 	mvn.w	r2, #4
 800331e:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2204      	movs	r2, #4
 8003324:	745a      	strb	r2, [r3, #17]
 8003326:	e005      	b.n	8003334 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f80c 	bl	8003346 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0201 	mvn.w	r2, #1
 800333c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr

0800336a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e041      	b.n	8003400 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d106      	bne.n	8003396 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7fd fe07 	bl	8000fa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2202      	movs	r2, #2
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3304      	adds	r3, #4
 80033a6:	4619      	mov	r1, r3
 80033a8:	4610      	mov	r0, r2
 80033aa:	f000 fa79 	bl	80038a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b01      	cmp	r3, #1
 800341a:	d001      	beq.n	8003420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e03a      	b.n	8003496 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <HAL_TIM_Base_Start_IT+0x98>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00e      	beq.n	8003460 <HAL_TIM_Base_Start_IT+0x58>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344a:	d009      	beq.n	8003460 <HAL_TIM_Base_Start_IT+0x58>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d004      	beq.n	8003460 <HAL_TIM_Base_Start_IT+0x58>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a13      	ldr	r2, [pc, #76]	; (80034a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d111      	bne.n	8003484 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b06      	cmp	r3, #6
 8003470:	d010      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0201 	orr.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003482:	e007      	b.n	8003494 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	40012c00 	.word	0x40012c00
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40000800 	.word	0x40000800

080034ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d122      	bne.n	8003508 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d11b      	bne.n	8003508 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0202 	mvn.w	r2, #2
 80034d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f9ba 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 80034f4:	e005      	b.n	8003502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f9ad 	bl	8003856 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f9bc 	bl	800387a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b04      	cmp	r3, #4
 8003514:	d122      	bne.n	800355c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b04      	cmp	r3, #4
 8003522:	d11b      	bne.n	800355c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0204 	mvn.w	r2, #4
 800352c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f990 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f983 	bl	8003856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f992 	bl	800387a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b08      	cmp	r3, #8
 8003568:	d122      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b08      	cmp	r3, #8
 8003576:	d11b      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0208 	mvn.w	r2, #8
 8003580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2204      	movs	r2, #4
 8003586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f966 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 800359c:	e005      	b.n	80035aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f959 	bl	8003856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f968 	bl	800387a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	2b10      	cmp	r3, #16
 80035bc:	d122      	bne.n	8003604 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b10      	cmp	r3, #16
 80035ca:	d11b      	bne.n	8003604 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0210 	mvn.w	r2, #16
 80035d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2208      	movs	r2, #8
 80035da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f93c 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 80035f0:	e005      	b.n	80035fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f92f 	bl	8003856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f93e 	bl	800387a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b01      	cmp	r3, #1
 8003610:	d10e      	bne.n	8003630 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b01      	cmp	r3, #1
 800361e:	d107      	bne.n	8003630 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0201 	mvn.w	r2, #1
 8003628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f90a 	bl	8003844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363a:	2b80      	cmp	r3, #128	; 0x80
 800363c:	d10e      	bne.n	800365c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003648:	2b80      	cmp	r3, #128	; 0x80
 800364a:	d107      	bne.n	800365c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fa81 	bl	8003b5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d10e      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	2b40      	cmp	r3, #64	; 0x40
 8003676:	d107      	bne.n	8003688 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f902 	bl	800388c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b20      	cmp	r3, #32
 8003694:	d10e      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d107      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0220 	mvn.w	r2, #32
 80036ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fa4c 	bl	8003b4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_TIM_ConfigClockSource+0x18>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e0b3      	b.n	800383c <HAL_TIM_ConfigClockSource+0x180>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370c:	d03e      	beq.n	800378c <HAL_TIM_ConfigClockSource+0xd0>
 800370e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003712:	f200 8087 	bhi.w	8003824 <HAL_TIM_ConfigClockSource+0x168>
 8003716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371a:	f000 8085 	beq.w	8003828 <HAL_TIM_ConfigClockSource+0x16c>
 800371e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003722:	d87f      	bhi.n	8003824 <HAL_TIM_ConfigClockSource+0x168>
 8003724:	2b70      	cmp	r3, #112	; 0x70
 8003726:	d01a      	beq.n	800375e <HAL_TIM_ConfigClockSource+0xa2>
 8003728:	2b70      	cmp	r3, #112	; 0x70
 800372a:	d87b      	bhi.n	8003824 <HAL_TIM_ConfigClockSource+0x168>
 800372c:	2b60      	cmp	r3, #96	; 0x60
 800372e:	d050      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x116>
 8003730:	2b60      	cmp	r3, #96	; 0x60
 8003732:	d877      	bhi.n	8003824 <HAL_TIM_ConfigClockSource+0x168>
 8003734:	2b50      	cmp	r3, #80	; 0x50
 8003736:	d03c      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0xf6>
 8003738:	2b50      	cmp	r3, #80	; 0x50
 800373a:	d873      	bhi.n	8003824 <HAL_TIM_ConfigClockSource+0x168>
 800373c:	2b40      	cmp	r3, #64	; 0x40
 800373e:	d058      	beq.n	80037f2 <HAL_TIM_ConfigClockSource+0x136>
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d86f      	bhi.n	8003824 <HAL_TIM_ConfigClockSource+0x168>
 8003744:	2b30      	cmp	r3, #48	; 0x30
 8003746:	d064      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0x156>
 8003748:	2b30      	cmp	r3, #48	; 0x30
 800374a:	d86b      	bhi.n	8003824 <HAL_TIM_ConfigClockSource+0x168>
 800374c:	2b20      	cmp	r3, #32
 800374e:	d060      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0x156>
 8003750:	2b20      	cmp	r3, #32
 8003752:	d867      	bhi.n	8003824 <HAL_TIM_ConfigClockSource+0x168>
 8003754:	2b00      	cmp	r3, #0
 8003756:	d05c      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0x156>
 8003758:	2b10      	cmp	r3, #16
 800375a:	d05a      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800375c:	e062      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	6899      	ldr	r1, [r3, #8]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f000 f970 	bl	8003a52 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003780:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	609a      	str	r2, [r3, #8]
      break;
 800378a:	e04e      	b.n	800382a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6818      	ldr	r0, [r3, #0]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	6899      	ldr	r1, [r3, #8]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f000 f959 	bl	8003a52 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037ae:	609a      	str	r2, [r3, #8]
      break;
 80037b0:	e03b      	b.n	800382a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	6859      	ldr	r1, [r3, #4]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	461a      	mov	r2, r3
 80037c0:	f000 f8d0 	bl	8003964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2150      	movs	r1, #80	; 0x50
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 f927 	bl	8003a1e <TIM_ITRx_SetConfig>
      break;
 80037d0:	e02b      	b.n	800382a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	6859      	ldr	r1, [r3, #4]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	461a      	mov	r2, r3
 80037e0:	f000 f8ee 	bl	80039c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2160      	movs	r1, #96	; 0x60
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 f917 	bl	8003a1e <TIM_ITRx_SetConfig>
      break;
 80037f0:	e01b      	b.n	800382a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	6859      	ldr	r1, [r3, #4]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	461a      	mov	r2, r3
 8003800:	f000 f8b0 	bl	8003964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2140      	movs	r1, #64	; 0x40
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f907 	bl	8003a1e <TIM_ITRx_SetConfig>
      break;
 8003810:	e00b      	b.n	800382a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4619      	mov	r1, r3
 800381c:	4610      	mov	r0, r2
 800381e:	f000 f8fe 	bl	8003a1e <TIM_ITRx_SetConfig>
        break;
 8003822:	e002      	b.n	800382a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003824:	bf00      	nop
 8003826:	e000      	b.n	800382a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003828:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr

08003856 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr

0800388c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
	...

080038a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a29      	ldr	r2, [pc, #164]	; (8003958 <TIM_Base_SetConfig+0xb8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00b      	beq.n	80038d0 <TIM_Base_SetConfig+0x30>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038be:	d007      	beq.n	80038d0 <TIM_Base_SetConfig+0x30>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a26      	ldr	r2, [pc, #152]	; (800395c <TIM_Base_SetConfig+0xbc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d003      	beq.n	80038d0 <TIM_Base_SetConfig+0x30>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a25      	ldr	r2, [pc, #148]	; (8003960 <TIM_Base_SetConfig+0xc0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d108      	bne.n	80038e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1c      	ldr	r2, [pc, #112]	; (8003958 <TIM_Base_SetConfig+0xb8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00b      	beq.n	8003902 <TIM_Base_SetConfig+0x62>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f0:	d007      	beq.n	8003902 <TIM_Base_SetConfig+0x62>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a19      	ldr	r2, [pc, #100]	; (800395c <TIM_Base_SetConfig+0xbc>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d003      	beq.n	8003902 <TIM_Base_SetConfig+0x62>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a18      	ldr	r2, [pc, #96]	; (8003960 <TIM_Base_SetConfig+0xc0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d108      	bne.n	8003914 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a07      	ldr	r2, [pc, #28]	; (8003958 <TIM_Base_SetConfig+0xb8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d103      	bne.n	8003948 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	615a      	str	r2, [r3, #20]
}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr
 8003958:	40012c00 	.word	0x40012c00
 800395c:	40000400 	.word	0x40000400
 8003960:	40000800 	.word	0x40000800

08003964 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f023 0201 	bic.w	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800398e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f023 030a 	bic.w	r3, r3, #10
 80039a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	621a      	str	r2, [r3, #32]
}
 80039b6:	bf00      	nop
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	f023 0210 	bic.w	r2, r3, #16
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	031b      	lsls	r3, r3, #12
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	621a      	str	r2, [r3, #32]
}
 8003a14:	bf00      	nop
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr

08003a1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b085      	sub	sp, #20
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f043 0307 	orr.w	r3, r3, #7
 8003a40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	609a      	str	r2, [r3, #8]
}
 8003a48:	bf00      	nop
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr

08003a52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b087      	sub	sp, #28
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
 8003a5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	021a      	lsls	r2, r3, #8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	609a      	str	r2, [r3, #8]
}
 8003a86:	bf00      	nop
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr

08003a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e046      	b.n	8003b36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a16      	ldr	r2, [pc, #88]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00e      	beq.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af4:	d009      	beq.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a12      	ldr	r2, [pc, #72]	; (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d004      	beq.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a10      	ldr	r2, [pc, #64]	; (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d10c      	bne.n	8003b24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800

08003b4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <__libc_init_array>:
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	2600      	movs	r6, #0
 8003b74:	4d0c      	ldr	r5, [pc, #48]	; (8003ba8 <__libc_init_array+0x38>)
 8003b76:	4c0d      	ldr	r4, [pc, #52]	; (8003bac <__libc_init_array+0x3c>)
 8003b78:	1b64      	subs	r4, r4, r5
 8003b7a:	10a4      	asrs	r4, r4, #2
 8003b7c:	42a6      	cmp	r6, r4
 8003b7e:	d109      	bne.n	8003b94 <__libc_init_array+0x24>
 8003b80:	f000 f822 	bl	8003bc8 <_init>
 8003b84:	2600      	movs	r6, #0
 8003b86:	4d0a      	ldr	r5, [pc, #40]	; (8003bb0 <__libc_init_array+0x40>)
 8003b88:	4c0a      	ldr	r4, [pc, #40]	; (8003bb4 <__libc_init_array+0x44>)
 8003b8a:	1b64      	subs	r4, r4, r5
 8003b8c:	10a4      	asrs	r4, r4, #2
 8003b8e:	42a6      	cmp	r6, r4
 8003b90:	d105      	bne.n	8003b9e <__libc_init_array+0x2e>
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
 8003b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b98:	4798      	blx	r3
 8003b9a:	3601      	adds	r6, #1
 8003b9c:	e7ee      	b.n	8003b7c <__libc_init_array+0xc>
 8003b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ba2:	4798      	blx	r3
 8003ba4:	3601      	adds	r6, #1
 8003ba6:	e7f2      	b.n	8003b8e <__libc_init_array+0x1e>
 8003ba8:	08003c30 	.word	0x08003c30
 8003bac:	08003c30 	.word	0x08003c30
 8003bb0:	08003c30 	.word	0x08003c30
 8003bb4:	08003c34 	.word	0x08003c34

08003bb8 <memset>:
 8003bb8:	4603      	mov	r3, r0
 8003bba:	4402      	add	r2, r0
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d100      	bne.n	8003bc2 <memset+0xa>
 8003bc0:	4770      	bx	lr
 8003bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc6:	e7f9      	b.n	8003bbc <memset+0x4>

08003bc8 <_init>:
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	bf00      	nop
 8003bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bce:	bc08      	pop	{r3}
 8003bd0:	469e      	mov	lr, r3
 8003bd2:	4770      	bx	lr

08003bd4 <_fini>:
 8003bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd6:	bf00      	nop
 8003bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bda:	bc08      	pop	{r3}
 8003bdc:	469e      	mov	lr, r3
 8003bde:	4770      	bx	lr
