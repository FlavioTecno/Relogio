
Relogio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003db4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003ec0  08003ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f18  08003f18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f18  08003f18  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f18  08003f18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f18  08003f18  00013f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f1c  08003f1c  00013f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000000c  08003f2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08003f2c  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a929  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bed  00000000  00000000  0002a95e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c08  00000000  00000000  0002c550  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b20  00000000  00000000  0002d158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001713b  00000000  00000000  0002dc78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000097ee  00000000  00000000  00044db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086675  00000000  00000000  0004e5a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d4c16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003154  00000000  00000000  000d4c94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ea8 	.word	0x08003ea8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003ea8 	.word	0x08003ea8

0800014c <PrintRelogio>:
#endif
}	//end PrintNumber


void PrintRelogio(uint8_t tempo)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	Dez_Minuto = Minutos /10;
	buffer[1] = font[Dez_Minuto];
	Uni_Minuto = Minutos % 10;
	buffer[0] = font[Uni_Minuto];
#else
	Dez_Hora = Horas / 10;
 8000156:	4b3a      	ldr	r3, [pc, #232]	; (8000240 <PrintRelogio+0xf4>)
 8000158:	781b      	ldrb	r3, [r3, #0]
 800015a:	4a3a      	ldr	r2, [pc, #232]	; (8000244 <PrintRelogio+0xf8>)
 800015c:	fba2 2303 	umull	r2, r3, r2, r3
 8000160:	08db      	lsrs	r3, r3, #3
 8000162:	b2db      	uxtb	r3, r3
 8000164:	461a      	mov	r2, r3
 8000166:	4b38      	ldr	r3, [pc, #224]	; (8000248 <PrintRelogio+0xfc>)
 8000168:	601a      	str	r2, [r3, #0]
	buffer[5] = font[Dez_Hora];
 800016a:	4b37      	ldr	r3, [pc, #220]	; (8000248 <PrintRelogio+0xfc>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a37      	ldr	r2, [pc, #220]	; (800024c <PrintRelogio+0x100>)
 8000170:	5cd2      	ldrb	r2, [r2, r3]
 8000172:	4b37      	ldr	r3, [pc, #220]	; (8000250 <PrintRelogio+0x104>)
 8000174:	715a      	strb	r2, [r3, #5]
	Uni_Hora = Horas % 10;
 8000176:	4b32      	ldr	r3, [pc, #200]	; (8000240 <PrintRelogio+0xf4>)
 8000178:	781a      	ldrb	r2, [r3, #0]
 800017a:	4b32      	ldr	r3, [pc, #200]	; (8000244 <PrintRelogio+0xf8>)
 800017c:	fba3 1302 	umull	r1, r3, r3, r2
 8000180:	08d9      	lsrs	r1, r3, #3
 8000182:	460b      	mov	r3, r1
 8000184:	009b      	lsls	r3, r3, #2
 8000186:	440b      	add	r3, r1
 8000188:	005b      	lsls	r3, r3, #1
 800018a:	1ad3      	subs	r3, r2, r3
 800018c:	b2db      	uxtb	r3, r3
 800018e:	461a      	mov	r2, r3
 8000190:	4b30      	ldr	r3, [pc, #192]	; (8000254 <PrintRelogio+0x108>)
 8000192:	601a      	str	r2, [r3, #0]
	buffer[4] = font[Uni_Hora];
 8000194:	4b2f      	ldr	r3, [pc, #188]	; (8000254 <PrintRelogio+0x108>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a2c      	ldr	r2, [pc, #176]	; (800024c <PrintRelogio+0x100>)
 800019a:	5cd2      	ldrb	r2, [r2, r3]
 800019c:	4b2c      	ldr	r3, [pc, #176]	; (8000250 <PrintRelogio+0x104>)
 800019e:	711a      	strb	r2, [r3, #4]
	Dez_Minuto = Minutos /10;
 80001a0:	4b2d      	ldr	r3, [pc, #180]	; (8000258 <PrintRelogio+0x10c>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	4a27      	ldr	r2, [pc, #156]	; (8000244 <PrintRelogio+0xf8>)
 80001a6:	fba2 2303 	umull	r2, r3, r2, r3
 80001aa:	08db      	lsrs	r3, r3, #3
 80001ac:	b2db      	uxtb	r3, r3
 80001ae:	461a      	mov	r2, r3
 80001b0:	4b2a      	ldr	r3, [pc, #168]	; (800025c <PrintRelogio+0x110>)
 80001b2:	601a      	str	r2, [r3, #0]
	buffer[3] = font[Dez_Minuto];
 80001b4:	4b29      	ldr	r3, [pc, #164]	; (800025c <PrintRelogio+0x110>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a24      	ldr	r2, [pc, #144]	; (800024c <PrintRelogio+0x100>)
 80001ba:	5cd2      	ldrb	r2, [r2, r3]
 80001bc:	4b24      	ldr	r3, [pc, #144]	; (8000250 <PrintRelogio+0x104>)
 80001be:	70da      	strb	r2, [r3, #3]
	Uni_Minuto = Minutos % 10;
 80001c0:	4b25      	ldr	r3, [pc, #148]	; (8000258 <PrintRelogio+0x10c>)
 80001c2:	781a      	ldrb	r2, [r3, #0]
 80001c4:	4b1f      	ldr	r3, [pc, #124]	; (8000244 <PrintRelogio+0xf8>)
 80001c6:	fba3 1302 	umull	r1, r3, r3, r2
 80001ca:	08d9      	lsrs	r1, r3, #3
 80001cc:	460b      	mov	r3, r1
 80001ce:	009b      	lsls	r3, r3, #2
 80001d0:	440b      	add	r3, r1
 80001d2:	005b      	lsls	r3, r3, #1
 80001d4:	1ad3      	subs	r3, r2, r3
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	461a      	mov	r2, r3
 80001da:	4b21      	ldr	r3, [pc, #132]	; (8000260 <PrintRelogio+0x114>)
 80001dc:	601a      	str	r2, [r3, #0]
	buffer[2] = font[Uni_Minuto];
 80001de:	4b20      	ldr	r3, [pc, #128]	; (8000260 <PrintRelogio+0x114>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a1a      	ldr	r2, [pc, #104]	; (800024c <PrintRelogio+0x100>)
 80001e4:	5cd2      	ldrb	r2, [r2, r3]
 80001e6:	4b1a      	ldr	r3, [pc, #104]	; (8000250 <PrintRelogio+0x104>)
 80001e8:	709a      	strb	r2, [r3, #2]
	Dez_Segundos = Segundos /10;
 80001ea:	4b1e      	ldr	r3, [pc, #120]	; (8000264 <PrintRelogio+0x118>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	4a15      	ldr	r2, [pc, #84]	; (8000244 <PrintRelogio+0xf8>)
 80001f0:	fba2 2303 	umull	r2, r3, r2, r3
 80001f4:	08db      	lsrs	r3, r3, #3
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	461a      	mov	r2, r3
 80001fa:	4b1b      	ldr	r3, [pc, #108]	; (8000268 <PrintRelogio+0x11c>)
 80001fc:	601a      	str	r2, [r3, #0]
	buffer[1] = font[Dez_Segundos];
 80001fe:	4b1a      	ldr	r3, [pc, #104]	; (8000268 <PrintRelogio+0x11c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a12      	ldr	r2, [pc, #72]	; (800024c <PrintRelogio+0x100>)
 8000204:	5cd2      	ldrb	r2, [r2, r3]
 8000206:	4b12      	ldr	r3, [pc, #72]	; (8000250 <PrintRelogio+0x104>)
 8000208:	705a      	strb	r2, [r3, #1]
	Uni_Segundos = Segundos % 10;
 800020a:	4b16      	ldr	r3, [pc, #88]	; (8000264 <PrintRelogio+0x118>)
 800020c:	781a      	ldrb	r2, [r3, #0]
 800020e:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <PrintRelogio+0xf8>)
 8000210:	fba3 1302 	umull	r1, r3, r3, r2
 8000214:	08d9      	lsrs	r1, r3, #3
 8000216:	460b      	mov	r3, r1
 8000218:	009b      	lsls	r3, r3, #2
 800021a:	440b      	add	r3, r1
 800021c:	005b      	lsls	r3, r3, #1
 800021e:	1ad3      	subs	r3, r2, r3
 8000220:	b2db      	uxtb	r3, r3
 8000222:	461a      	mov	r2, r3
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <PrintRelogio+0x120>)
 8000226:	601a      	str	r2, [r3, #0]
	buffer[0] = font[Uni_Segundos];
 8000228:	4b10      	ldr	r3, [pc, #64]	; (800026c <PrintRelogio+0x120>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a07      	ldr	r2, [pc, #28]	; (800024c <PrintRelogio+0x100>)
 800022e:	5cd2      	ldrb	r2, [r2, r3]
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <PrintRelogio+0x104>)
 8000232:	701a      	strb	r2, [r3, #0]
#endif
}
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	20000172 	.word	0x20000172
 8000244:	cccccccd 	.word	0xcccccccd
 8000248:	2000002c 	.word	0x2000002c
 800024c:	08003ee8 	.word	0x08003ee8
 8000250:	200000f4 	.word	0x200000f4
 8000254:	20000030 	.word	0x20000030
 8000258:	20000048 	.word	0x20000048
 800025c:	20000034 	.word	0x20000034
 8000260:	20000038 	.word	0x20000038
 8000264:	200000fb 	.word	0x200000fb
 8000268:	2000003c 	.word	0x2000003c
 800026c:	20000040 	.word	0x20000040

08000270 <MenuHora>:

void MenuHora(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	//seleciona hora
	buffer[5] = 0x76;	//H
 8000274:	4b5f      	ldr	r3, [pc, #380]	; (80003f4 <MenuHora+0x184>)
 8000276:	2276      	movs	r2, #118	; 0x76
 8000278:	715a      	strb	r2, [r3, #5]
	buffer[4] = 0x3F;	//O
 800027a:	4b5e      	ldr	r3, [pc, #376]	; (80003f4 <MenuHora+0x184>)
 800027c:	223f      	movs	r2, #63	; 0x3f
 800027e:	711a      	strb	r2, [r3, #4]
	buffer[3] = 0X00;	//apagado
 8000280:	4b5c      	ldr	r3, [pc, #368]	; (80003f4 <MenuHora+0x184>)
 8000282:	2200      	movs	r2, #0
 8000284:	70da      	strb	r2, [r3, #3]
	buffer[2] = 0x00;	//apagado
 8000286:	4b5b      	ldr	r3, [pc, #364]	; (80003f4 <MenuHora+0x184>)
 8000288:	2200      	movs	r2, #0
 800028a:	709a      	strb	r2, [r3, #2]
	buffer[1] = 0x00;	//apagado
 800028c:	4b59      	ldr	r3, [pc, #356]	; (80003f4 <MenuHora+0x184>)
 800028e:	2200      	movs	r2, #0
 8000290:	705a      	strb	r2, [r3, #1]
	buffer[0] = 0x00;	//apagado
 8000292:	4b58      	ldr	r3, [pc, #352]	; (80003f4 <MenuHora+0x184>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]

	NovaHora = 0x00;
 8000298:	4b57      	ldr	r3, [pc, #348]	; (80003f8 <MenuHora+0x188>)
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]
	NovaMin = 0x00;
 800029e:	4b57      	ldr	r3, [pc, #348]	; (80003fc <MenuHora+0x18c>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	701a      	strb	r2, [r3, #0]

	while (BotHora == 0)
 80002a4:	e09e      	b.n	80003e4 <MenuHora+0x174>
	{
		BotHora = HAL_GPIO_ReadPin(Bot_Hora_GPIO_Port, Bot_Hora_Pin);
 80002a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002aa:	4855      	ldr	r0, [pc, #340]	; (8000400 <MenuHora+0x190>)
 80002ac:	f001 fa74 	bl	8001798 <HAL_GPIO_ReadPin>
 80002b0:	4603      	mov	r3, r0
 80002b2:	461a      	mov	r2, r3
 80002b4:	4b53      	ldr	r3, [pc, #332]	; (8000404 <MenuHora+0x194>)
 80002b6:	601a      	str	r2, [r3, #0]
//		BotEsc = HAL_GPIO_ReadPin(Bot_Esc_GPIO_Port, Bot_Esc_Pin);
		HAL_Delay(75);
 80002b8:	204b      	movs	r0, #75	; 0x4b
 80002ba:	f000 ffe3 	bl	8001284 <HAL_Delay>
		if (BotHora == 1) {
 80002be:	4b51      	ldr	r3, [pc, #324]	; (8000404 <MenuHora+0x194>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d114      	bne.n	80002f0 <MenuHora+0x80>

			clkTime.Hours = NovaHora;
 80002c6:	4b4c      	ldr	r3, [pc, #304]	; (80003f8 <MenuHora+0x188>)
 80002c8:	781a      	ldrb	r2, [r3, #0]
 80002ca:	4b4f      	ldr	r3, [pc, #316]	; (8000408 <MenuHora+0x198>)
 80002cc:	701a      	strb	r2, [r3, #0]
			clkTime.Minutes = NovaMin;
 80002ce:	4b4b      	ldr	r3, [pc, #300]	; (80003fc <MenuHora+0x18c>)
 80002d0:	781a      	ldrb	r2, [r3, #0]
 80002d2:	4b4d      	ldr	r3, [pc, #308]	; (8000408 <MenuHora+0x198>)
 80002d4:	705a      	strb	r2, [r3, #1]
			clkTime.Seconds = 0x00;
 80002d6:	4b4c      	ldr	r3, [pc, #304]	; (8000408 <MenuHora+0x198>)
 80002d8:	2200      	movs	r2, #0
 80002da:	709a      	strb	r2, [r3, #2]

			if(HAL_RTC_SetTime(&hrtc, &clkTime, RTC_FORMAT_BIN) != HAL_OK){
 80002dc:	2200      	movs	r2, #0
 80002de:	494a      	ldr	r1, [pc, #296]	; (8000408 <MenuHora+0x198>)
 80002e0:	484a      	ldr	r0, [pc, #296]	; (800040c <MenuHora+0x19c>)
 80002e2:	f002 f8bd 	bl	8002460 <HAL_RTC_SetTime>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MenuHora+0x80>
				Error_Handler();
 80002ec:	f000 fc4a 	bl	8000b84 <Error_Handler>
			}

//			BotHora	= 0;
		}

		AjHora = HAL_GPIO_ReadPin(Ajuste_Hora_GPIO_Port, Ajuste_Hora_Pin);
 80002f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002f4:	4842      	ldr	r0, [pc, #264]	; (8000400 <MenuHora+0x190>)
 80002f6:	f001 fa4f 	bl	8001798 <HAL_GPIO_ReadPin>
 80002fa:	4603      	mov	r3, r0
 80002fc:	461a      	mov	r2, r3
 80002fe:	4b44      	ldr	r3, [pc, #272]	; (8000410 <MenuHora+0x1a0>)
 8000300:	601a      	str	r2, [r3, #0]
		HAL_Delay(75);
 8000302:	204b      	movs	r0, #75	; 0x4b
 8000304:	f000 ffbe 	bl	8001284 <HAL_Delay>
		if (AjHora == 0){
 8000308:	4b41      	ldr	r3, [pc, #260]	; (8000410 <MenuHora+0x1a0>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d12c      	bne.n	800036a <MenuHora+0xfa>
			NovaHora ++;
 8000310:	4b39      	ldr	r3, [pc, #228]	; (80003f8 <MenuHora+0x188>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	3301      	adds	r3, #1
 8000316:	b2da      	uxtb	r2, r3
 8000318:	4b37      	ldr	r3, [pc, #220]	; (80003f8 <MenuHora+0x188>)
 800031a:	701a      	strb	r2, [r3, #0]
			if (NovaHora == 24){
 800031c:	4b36      	ldr	r3, [pc, #216]	; (80003f8 <MenuHora+0x188>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b18      	cmp	r3, #24
 8000322:	d102      	bne.n	800032a <MenuHora+0xba>
				NovaHora = 0;
 8000324:	4b34      	ldr	r3, [pc, #208]	; (80003f8 <MenuHora+0x188>)
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
			}
			buffer[3] = font[NovaHora / 10];
 800032a:	4b33      	ldr	r3, [pc, #204]	; (80003f8 <MenuHora+0x188>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	4a39      	ldr	r2, [pc, #228]	; (8000414 <MenuHora+0x1a4>)
 8000330:	fba2 2303 	umull	r2, r3, r2, r3
 8000334:	08db      	lsrs	r3, r3, #3
 8000336:	b2db      	uxtb	r3, r3
 8000338:	461a      	mov	r2, r3
 800033a:	4b37      	ldr	r3, [pc, #220]	; (8000418 <MenuHora+0x1a8>)
 800033c:	5c9a      	ldrb	r2, [r3, r2]
 800033e:	4b2d      	ldr	r3, [pc, #180]	; (80003f4 <MenuHora+0x184>)
 8000340:	70da      	strb	r2, [r3, #3]
			buffer[2] = font[NovaHora % 10];
 8000342:	4b2d      	ldr	r3, [pc, #180]	; (80003f8 <MenuHora+0x188>)
 8000344:	781a      	ldrb	r2, [r3, #0]
 8000346:	4b33      	ldr	r3, [pc, #204]	; (8000414 <MenuHora+0x1a4>)
 8000348:	fba3 1302 	umull	r1, r3, r3, r2
 800034c:	08d9      	lsrs	r1, r3, #3
 800034e:	460b      	mov	r3, r1
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	440b      	add	r3, r1
 8000354:	005b      	lsls	r3, r3, #1
 8000356:	1ad3      	subs	r3, r2, r3
 8000358:	b2db      	uxtb	r3, r3
 800035a:	461a      	mov	r2, r3
 800035c:	4b2e      	ldr	r3, [pc, #184]	; (8000418 <MenuHora+0x1a8>)
 800035e:	5c9a      	ldrb	r2, [r3, r2]
 8000360:	4b24      	ldr	r3, [pc, #144]	; (80003f4 <MenuHora+0x184>)
 8000362:	709a      	strb	r2, [r3, #2]

			AjHora = 1;
 8000364:	4b2a      	ldr	r3, [pc, #168]	; (8000410 <MenuHora+0x1a0>)
 8000366:	2201      	movs	r2, #1
 8000368:	601a      	str	r2, [r3, #0]
		}

		AjMin = HAL_GPIO_ReadPin(Ajuste_Min_GPIO_Port, Ajuste_Min_Pin);
 800036a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800036e:	4824      	ldr	r0, [pc, #144]	; (8000400 <MenuHora+0x190>)
 8000370:	f001 fa12 	bl	8001798 <HAL_GPIO_ReadPin>
 8000374:	4603      	mov	r3, r0
 8000376:	461a      	mov	r2, r3
 8000378:	4b28      	ldr	r3, [pc, #160]	; (800041c <MenuHora+0x1ac>)
 800037a:	601a      	str	r2, [r3, #0]
		HAL_Delay(75);
 800037c:	204b      	movs	r0, #75	; 0x4b
 800037e:	f000 ff81 	bl	8001284 <HAL_Delay>
		if (AjMin == 0) {
 8000382:	4b26      	ldr	r3, [pc, #152]	; (800041c <MenuHora+0x1ac>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d12c      	bne.n	80003e4 <MenuHora+0x174>
			NovaMin ++;
 800038a:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <MenuHora+0x18c>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	3301      	adds	r3, #1
 8000390:	b2da      	uxtb	r2, r3
 8000392:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <MenuHora+0x18c>)
 8000394:	701a      	strb	r2, [r3, #0]
			if (NovaMin > 59) {
 8000396:	4b19      	ldr	r3, [pc, #100]	; (80003fc <MenuHora+0x18c>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2b3b      	cmp	r3, #59	; 0x3b
 800039c:	d902      	bls.n	80003a4 <MenuHora+0x134>
				NovaMin = 0;
 800039e:	4b17      	ldr	r3, [pc, #92]	; (80003fc <MenuHora+0x18c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	701a      	strb	r2, [r3, #0]
			}
			buffer[1] = font[NovaMin / 10];
 80003a4:	4b15      	ldr	r3, [pc, #84]	; (80003fc <MenuHora+0x18c>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	4a1a      	ldr	r2, [pc, #104]	; (8000414 <MenuHora+0x1a4>)
 80003aa:	fba2 2303 	umull	r2, r3, r2, r3
 80003ae:	08db      	lsrs	r3, r3, #3
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	461a      	mov	r2, r3
 80003b4:	4b18      	ldr	r3, [pc, #96]	; (8000418 <MenuHora+0x1a8>)
 80003b6:	5c9a      	ldrb	r2, [r3, r2]
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MenuHora+0x184>)
 80003ba:	705a      	strb	r2, [r3, #1]
			buffer[0] = font[NovaMin % 10];
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MenuHora+0x18c>)
 80003be:	781a      	ldrb	r2, [r3, #0]
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MenuHora+0x1a4>)
 80003c2:	fba3 1302 	umull	r1, r3, r3, r2
 80003c6:	08d9      	lsrs	r1, r3, #3
 80003c8:	460b      	mov	r3, r1
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	440b      	add	r3, r1
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	1ad3      	subs	r3, r2, r3
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	461a      	mov	r2, r3
 80003d6:	4b10      	ldr	r3, [pc, #64]	; (8000418 <MenuHora+0x1a8>)
 80003d8:	5c9a      	ldrb	r2, [r3, r2]
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <MenuHora+0x184>)
 80003dc:	701a      	strb	r2, [r3, #0]

			AjMin = 1;
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MenuHora+0x1ac>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	601a      	str	r2, [r3, #0]
	while (BotHora == 0)
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <MenuHora+0x194>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	f43f af5c 	beq.w	80002a6 <MenuHora+0x36>
		}

	}
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	200000f4 	.word	0x200000f4
 80003f8:	20000098 	.word	0x20000098
 80003fc:	20000170 	.word	0x20000170
 8000400:	40010800 	.word	0x40010800
 8000404:	20000174 	.word	0x20000174
 8000408:	2000009c 	.word	0x2000009c
 800040c:	200000fc 	.word	0x200000fc
 8000410:	20000168 	.word	0x20000168
 8000414:	cccccccd 	.word	0xcccccccd
 8000418:	08003ee8 	.word	0x08003ee8
 800041c:	200000f0 	.word	0x200000f0

08000420 <MenuAlarme>:

void MenuAlarme(void){
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	//seleciona alarme
	buffer[5] = 0x77;	//A
 8000424:	4b60      	ldr	r3, [pc, #384]	; (80005a8 <MenuAlarme+0x188>)
 8000426:	2277      	movs	r2, #119	; 0x77
 8000428:	715a      	strb	r2, [r3, #5]
	buffer[4] = 0x38;	//L
 800042a:	4b5f      	ldr	r3, [pc, #380]	; (80005a8 <MenuAlarme+0x188>)
 800042c:	2238      	movs	r2, #56	; 0x38
 800042e:	711a      	strb	r2, [r3, #4]
	buffer[3] = 0X00;	//apagado
 8000430:	4b5d      	ldr	r3, [pc, #372]	; (80005a8 <MenuAlarme+0x188>)
 8000432:	2200      	movs	r2, #0
 8000434:	70da      	strb	r2, [r3, #3]
	buffer[2] = 0X00;	//apagado
 8000436:	4b5c      	ldr	r3, [pc, #368]	; (80005a8 <MenuAlarme+0x188>)
 8000438:	2200      	movs	r2, #0
 800043a:	709a      	strb	r2, [r3, #2]
	buffer[1] = 0x00;	//apagado
 800043c:	4b5a      	ldr	r3, [pc, #360]	; (80005a8 <MenuAlarme+0x188>)
 800043e:	2200      	movs	r2, #0
 8000440:	705a      	strb	r2, [r3, #1]
	buffer[0] = 0x00;	//apagado
 8000442:	4b59      	ldr	r3, [pc, #356]	; (80005a8 <MenuAlarme+0x188>)
 8000444:	2200      	movs	r2, #0
 8000446:	701a      	strb	r2, [r3, #0]

	AlHora = 0x00;
 8000448:	4b58      	ldr	r3, [pc, #352]	; (80005ac <MenuAlarme+0x18c>)
 800044a:	2200      	movs	r2, #0
 800044c:	701a      	strb	r2, [r3, #0]
	AlMin = 0x00;
 800044e:	4b58      	ldr	r3, [pc, #352]	; (80005b0 <MenuAlarme+0x190>)
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]

	while (BotAl == 0)
 8000454:	e0a1      	b.n	800059a <MenuAlarme+0x17a>
	{
		BotAl = HAL_GPIO_ReadPin(Bot_Alarme_GPIO_Port, Bot_Alarme_Pin);
 8000456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045a:	4856      	ldr	r0, [pc, #344]	; (80005b4 <MenuAlarme+0x194>)
 800045c:	f001 f99c 	bl	8001798 <HAL_GPIO_ReadPin>
 8000460:	4603      	mov	r3, r0
 8000462:	461a      	mov	r2, r3
 8000464:	4b54      	ldr	r3, [pc, #336]	; (80005b8 <MenuAlarme+0x198>)
 8000466:	601a      	str	r2, [r3, #0]
//		BotEsc = HAL_GPIO_ReadPin(Bot_Esc_GPIO_Port, Bot_Esc_Pin);
 		HAL_Delay(75);
 8000468:	204b      	movs	r0, #75	; 0x4b
 800046a:	f000 ff0b 	bl	8001284 <HAL_Delay>
		if (BotAl == 1) {
 800046e:	4b52      	ldr	r3, [pc, #328]	; (80005b8 <MenuAlarme+0x198>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d11d      	bne.n	80004b2 <MenuAlarme+0x92>
			sAlarm.AlarmTime.Hours = AlHora;
 8000476:	4b4d      	ldr	r3, [pc, #308]	; (80005ac <MenuAlarme+0x18c>)
 8000478:	781a      	ldrb	r2, [r3, #0]
 800047a:	4b50      	ldr	r3, [pc, #320]	; (80005bc <MenuAlarme+0x19c>)
 800047c:	701a      	strb	r2, [r3, #0]
			sAlarm.AlarmTime.Minutes = AlMin;
 800047e:	4b4c      	ldr	r3, [pc, #304]	; (80005b0 <MenuAlarme+0x190>)
 8000480:	781a      	ldrb	r2, [r3, #0]
 8000482:	4b4e      	ldr	r3, [pc, #312]	; (80005bc <MenuAlarme+0x19c>)
 8000484:	705a      	strb	r2, [r3, #1]
			sAlarm.AlarmTime.Seconds = 0x00;
 8000486:	4b4d      	ldr	r3, [pc, #308]	; (80005bc <MenuAlarme+0x19c>)
 8000488:	2200      	movs	r2, #0
 800048a:	709a      	strb	r2, [r3, #2]
			sAlarm.Alarm = RTC_ALARM_A;
 800048c:	4b4b      	ldr	r3, [pc, #300]	; (80005bc <MenuAlarme+0x19c>)
 800048e:	2200      	movs	r2, #0
 8000490:	605a      	str	r2, [r3, #4]
			if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000492:	2200      	movs	r2, #0
 8000494:	4949      	ldr	r1, [pc, #292]	; (80005bc <MenuAlarme+0x19c>)
 8000496:	484a      	ldr	r0, [pc, #296]	; (80005c0 <MenuAlarme+0x1a0>)
 8000498:	f002 f952 	bl	8002740 <HAL_RTC_SetAlarm_IT>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MenuAlarme+0x86>
			{
				Error_Handler();
 80004a2:	f000 fb6f 	bl	8000b84 <Error_Handler>
			}
//			BotAl = 0;
			HAL_GPIO_WritePin(LedAlarme_GPIO_Port, LedAlarme_Pin, GPIO_PIN_SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ac:	4845      	ldr	r0, [pc, #276]	; (80005c4 <MenuAlarme+0x1a4>)
 80004ae:	f001 f98a 	bl	80017c6 <HAL_GPIO_WritePin>
		}

		AjHora = HAL_GPIO_ReadPin(Ajuste_Hora_GPIO_Port, Ajuste_Hora_Pin);
 80004b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b6:	483f      	ldr	r0, [pc, #252]	; (80005b4 <MenuAlarme+0x194>)
 80004b8:	f001 f96e 	bl	8001798 <HAL_GPIO_ReadPin>
 80004bc:	4603      	mov	r3, r0
 80004be:	461a      	mov	r2, r3
 80004c0:	4b41      	ldr	r3, [pc, #260]	; (80005c8 <MenuAlarme+0x1a8>)
 80004c2:	601a      	str	r2, [r3, #0]
		HAL_Delay(75);
 80004c4:	204b      	movs	r0, #75	; 0x4b
 80004c6:	f000 fedd 	bl	8001284 <HAL_Delay>
		if (AjHora == 0){
 80004ca:	4b3f      	ldr	r3, [pc, #252]	; (80005c8 <MenuAlarme+0x1a8>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d129      	bne.n	8000526 <MenuAlarme+0x106>
			AlHora ++;
 80004d2:	4b36      	ldr	r3, [pc, #216]	; (80005ac <MenuAlarme+0x18c>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	3301      	adds	r3, #1
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4b34      	ldr	r3, [pc, #208]	; (80005ac <MenuAlarme+0x18c>)
 80004dc:	701a      	strb	r2, [r3, #0]
			if (AlHora == 24){
 80004de:	4b33      	ldr	r3, [pc, #204]	; (80005ac <MenuAlarme+0x18c>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b18      	cmp	r3, #24
 80004e4:	d102      	bne.n	80004ec <MenuAlarme+0xcc>
				AlHora = 0;
 80004e6:	4b31      	ldr	r3, [pc, #196]	; (80005ac <MenuAlarme+0x18c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
			}
			buffer[3] = font[AlHora / 10];
 80004ec:	4b2f      	ldr	r3, [pc, #188]	; (80005ac <MenuAlarme+0x18c>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4a36      	ldr	r2, [pc, #216]	; (80005cc <MenuAlarme+0x1ac>)
 80004f2:	fba2 2303 	umull	r2, r3, r2, r3
 80004f6:	08db      	lsrs	r3, r3, #3
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	461a      	mov	r2, r3
 80004fc:	4b34      	ldr	r3, [pc, #208]	; (80005d0 <MenuAlarme+0x1b0>)
 80004fe:	5c9a      	ldrb	r2, [r3, r2]
 8000500:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <MenuAlarme+0x188>)
 8000502:	70da      	strb	r2, [r3, #3]
			buffer[2] = font[AlHora % 10];
 8000504:	4b29      	ldr	r3, [pc, #164]	; (80005ac <MenuAlarme+0x18c>)
 8000506:	781a      	ldrb	r2, [r3, #0]
 8000508:	4b30      	ldr	r3, [pc, #192]	; (80005cc <MenuAlarme+0x1ac>)
 800050a:	fba3 1302 	umull	r1, r3, r3, r2
 800050e:	08d9      	lsrs	r1, r3, #3
 8000510:	460b      	mov	r3, r1
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	440b      	add	r3, r1
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	b2db      	uxtb	r3, r3
 800051c:	461a      	mov	r2, r3
 800051e:	4b2c      	ldr	r3, [pc, #176]	; (80005d0 <MenuAlarme+0x1b0>)
 8000520:	5c9a      	ldrb	r2, [r3, r2]
 8000522:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <MenuAlarme+0x188>)
 8000524:	709a      	strb	r2, [r3, #2]
		}

		AjMin = HAL_GPIO_ReadPin(Ajuste_Min_GPIO_Port, Ajuste_Min_Pin);
 8000526:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800052a:	4822      	ldr	r0, [pc, #136]	; (80005b4 <MenuAlarme+0x194>)
 800052c:	f001 f934 	bl	8001798 <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	461a      	mov	r2, r3
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <MenuAlarme+0x1b4>)
 8000536:	601a      	str	r2, [r3, #0]
		HAL_Delay(75);
 8000538:	204b      	movs	r0, #75	; 0x4b
 800053a:	f000 fea3 	bl	8001284 <HAL_Delay>
		if (AjMin == 0) {
 800053e:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <MenuAlarme+0x1b4>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d129      	bne.n	800059a <MenuAlarme+0x17a>
			AlMin ++;
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <MenuAlarme+0x190>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	3301      	adds	r3, #1
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <MenuAlarme+0x190>)
 8000550:	701a      	strb	r2, [r3, #0]
			if (AlMin > 59) {
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <MenuAlarme+0x190>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b3b      	cmp	r3, #59	; 0x3b
 8000558:	d902      	bls.n	8000560 <MenuAlarme+0x140>
				AlMin = 0;
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MenuAlarme+0x190>)
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
			}
			buffer[1] = font[AlMin / 10];
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <MenuAlarme+0x190>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4a19      	ldr	r2, [pc, #100]	; (80005cc <MenuAlarme+0x1ac>)
 8000566:	fba2 2303 	umull	r2, r3, r2, r3
 800056a:	08db      	lsrs	r3, r3, #3
 800056c:	b2db      	uxtb	r3, r3
 800056e:	461a      	mov	r2, r3
 8000570:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <MenuAlarme+0x1b0>)
 8000572:	5c9a      	ldrb	r2, [r3, r2]
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MenuAlarme+0x188>)
 8000576:	705a      	strb	r2, [r3, #1]
			buffer[0] = font[AlMin % 10];
 8000578:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <MenuAlarme+0x190>)
 800057a:	781a      	ldrb	r2, [r3, #0]
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <MenuAlarme+0x1ac>)
 800057e:	fba3 1302 	umull	r1, r3, r3, r2
 8000582:	08d9      	lsrs	r1, r3, #3
 8000584:	460b      	mov	r3, r1
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	440b      	add	r3, r1
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	b2db      	uxtb	r3, r3
 8000590:	461a      	mov	r2, r3
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MenuAlarme+0x1b0>)
 8000594:	5c9a      	ldrb	r2, [r3, r2]
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <MenuAlarme+0x188>)
 8000598:	701a      	strb	r2, [r3, #0]
	while (BotAl == 0)
 800059a:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <MenuAlarme+0x198>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	f43f af59 	beq.w	8000456 <MenuAlarme+0x36>
		}
	}
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200000f4 	.word	0x200000f4
 80005ac:	20000164 	.word	0x20000164
 80005b0:	20000110 	.word	0x20000110
 80005b4:	40010800 	.word	0x40010800
 80005b8:	2000016c 	.word	0x2000016c
 80005bc:	200000a0 	.word	0x200000a0
 80005c0:	200000fc 	.word	0x200000fc
 80005c4:	40010c00 	.word	0x40010c00
 80005c8:	20000168 	.word	0x20000168
 80005cc:	cccccccd 	.word	0xcccccccd
 80005d0:	08003ee8 	.word	0x08003ee8
 80005d4:	200000f0 	.word	0x200000f0

080005d8 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	alarmflag = 1;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_RTC_AlarmAEventCallback+0x18>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	701a      	strb	r2, [r3, #0]
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	20000028 	.word	0x20000028

080005f4 <Alarm_On>:

void Alarm_On(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BuzAlarme_GPIO_Port, BuzAlarme_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2108      	movs	r1, #8
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <Alarm_On+0x1c>)
 80005fe:	f001 f8e2 	bl	80017c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LampAlarme_GPIO_Port, LampAlarme_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2110      	movs	r1, #16
 8000606:	4802      	ldr	r0, [pc, #8]	; (8000610 <Alarm_On+0x1c>)
 8000608:	f001 f8dd 	bl	80017c6 <HAL_GPIO_WritePin>
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40010c00 	.word	0x40010c00

08000614 <Alarm_Off>:

void Alarm_Off(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BuzAlarme_GPIO_Port, BuzAlarme_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2108      	movs	r1, #8
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <Alarm_Off+0x30>)
 800061e:	f001 f8d2 	bl	80017c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LedAlarme_GPIO_Port, LedAlarme_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000628:	4806      	ldr	r0, [pc, #24]	; (8000644 <Alarm_Off+0x30>)
 800062a:	f001 f8cc 	bl	80017c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LampAlarme_GPIO_Port, LampAlarme_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2110      	movs	r1, #16
 8000632:	4804      	ldr	r0, [pc, #16]	; (8000644 <Alarm_Off+0x30>)
 8000634:	f001 f8c7 	bl	80017c6 <HAL_GPIO_WritePin>
	alarmflag = 0;
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <Alarm_Off+0x34>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40010c00 	.word	0x40010c00
 8000648:	20000028 	.word	0x20000028

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 fdb6 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f892 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 f9fc 	bl	8000a54 <MX_GPIO_Init>
  MX_RTC_Init();
 800065c:	f000 f8ec 	bl	8000838 <MX_RTC_Init>
  MX_TIM2_Init();
 8000660:	f000 f906 	bl	8000870 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000664:	f000 f950 	bl	8000908 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000668:	f000 f99c 	bl	80009a4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //inicializa timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 800066c:	4837      	ldr	r0, [pc, #220]	; (800074c <main+0x100>)
 800066e:	f002 fced 	bl	800304c <HAL_TIM_Base_Start_IT>

  HAL_RTC_Init(&hrtc);
 8000672:	4837      	ldr	r0, [pc, #220]	; (8000750 <main+0x104>)
 8000674:	f001 fe5e 	bl	8002334 <HAL_RTC_Init>
  HAL_RTCEx_SetSecond_IT(&hrtc);
 8000678:	4835      	ldr	r0, [pc, #212]	; (8000750 <main+0x104>)
 800067a:	f002 fbdf 	bl	8002e3c <HAL_RTCEx_SetSecond_IT>

  //inicializa timer 4
  HAL_TIM_Base_Start(&htim4);
 800067e:	4835      	ldr	r0, [pc, #212]	; (8000754 <main+0x108>)
 8000680:	f002 fc9a 	bl	8002fb8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);		//start sinal PWMno pino PB6
 8000684:	2100      	movs	r1, #0
 8000686:	4833      	ldr	r0, [pc, #204]	; (8000754 <main+0x108>)
 8000688:	f002 fd82 	bl	8003190 <HAL_TIM_PWM_Start>
#endif

#else

	  //Alarme
	  if (alarmflag)
 800068c:	4b32      	ldr	r3, [pc, #200]	; (8000758 <main+0x10c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <main+0x4c>
	  {
		  Alarm_On();
 8000694:	f7ff ffae 	bl	80005f4 <Alarm_On>
	  }

	  if (HAL_GPIO_ReadPin(Bot_Esc_GPIO_Port, Bot_Esc_Pin) == GPIO_PIN_RESET){
 8000698:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069c:	482f      	ldr	r0, [pc, #188]	; (800075c <main+0x110>)
 800069e:	f001 f87b 	bl	8001798 <HAL_GPIO_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d101      	bne.n	80006ac <main+0x60>
		  Alarm_Off();
 80006a8:	f7ff ffb4 	bl	8000614 <Alarm_Off>
	  }

	  HAL_RTC_GetTime(&hrtc, &clkTime, RTC_FORMAT_BIN);
 80006ac:	2200      	movs	r2, #0
 80006ae:	492c      	ldr	r1, [pc, #176]	; (8000760 <main+0x114>)
 80006b0:	4827      	ldr	r0, [pc, #156]	; (8000750 <main+0x104>)
 80006b2:	f001 ff6d 	bl	8002590 <HAL_RTC_GetTime>

	  Horas = clkTime.Hours;
 80006b6:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <main+0x114>)
 80006b8:	781a      	ldrb	r2, [r3, #0]
 80006ba:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <main+0x118>)
 80006bc:	701a      	strb	r2, [r3, #0]
	  Minutos = clkTime.Minutes;
 80006be:	4b28      	ldr	r3, [pc, #160]	; (8000760 <main+0x114>)
 80006c0:	785a      	ldrb	r2, [r3, #1]
 80006c2:	4b29      	ldr	r3, [pc, #164]	; (8000768 <main+0x11c>)
 80006c4:	701a      	strb	r2, [r3, #0]
#if ComSeg
	  Segundos = clkTime.Seconds;
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <main+0x114>)
 80006c8:	789a      	ldrb	r2, [r3, #2]
 80006ca:	4b28      	ldr	r3, [pc, #160]	; (800076c <main+0x120>)
 80006cc:	701a      	strb	r2, [r3, #0]
	  if (!(Segundos % 2)) {
 80006ce:	4b27      	ldr	r3, [pc, #156]	; (800076c <main+0x120>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d103      	bne.n	80006e4 <main+0x98>
		  buffer[6] = 0x80;
 80006dc:	4b24      	ldr	r3, [pc, #144]	; (8000770 <main+0x124>)
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	719a      	strb	r2, [r3, #6]
 80006e2:	e002      	b.n	80006ea <main+0x9e>
	  }else buffer[6] = 0x00;
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <main+0x124>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	719a      	strb	r2, [r3, #6]

	  PrintRelogio(Segundos);
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <main+0x120>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fd2c 	bl	800014c <PrintRelogio>
#endif
	  PrintRelogio(Minutos);
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <main+0x11c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fd27 	bl	800014c <PrintRelogio>
	  PrintRelogio(Horas);
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <main+0x118>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fd22 	bl	800014c <PrintRelogio>
#endif	//relogio

	  //Verifica botao Hora
	  if (HAL_GPIO_ReadPin(Bot_Hora_GPIO_Port, Bot_Hora_Pin) == GPIO_PIN_RESET){
 8000708:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <main+0x110>)
 800070e:	f001 f843 	bl	8001798 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d107      	bne.n	8000728 <main+0xdc>
		  HAL_Delay(125);
 8000718:	207d      	movs	r0, #125	; 0x7d
 800071a:	f000 fdb3 	bl	8001284 <HAL_Delay>
		  BotHora = 0;
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <main+0x128>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
		  MenuHora();
 8000724:	f7ff fda4 	bl	8000270 <MenuHora>
	  }

	  //verifica botao de Alarme
	  if (HAL_GPIO_ReadPin(Bot_Alarme_GPIO_Port, Bot_Alarme_Pin) == GPIO_PIN_RESET){
 8000728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072c:	480b      	ldr	r0, [pc, #44]	; (800075c <main+0x110>)
 800072e:	f001 f833 	bl	8001798 <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1a9      	bne.n	800068c <main+0x40>
		  HAL_Delay(125);
 8000738:	207d      	movs	r0, #125	; 0x7d
 800073a:	f000 fda3 	bl	8001284 <HAL_Delay>
		  BotAl = 0;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <main+0x12c>)
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
		  MenuAlarme();
 8000744:	f7ff fe6c 	bl	8000420 <MenuAlarme>
	  if (alarmflag)
 8000748:	e7a0      	b.n	800068c <main+0x40>
 800074a:	bf00      	nop
 800074c:	2000011c 	.word	0x2000011c
 8000750:	200000fc 	.word	0x200000fc
 8000754:	20000050 	.word	0x20000050
 8000758:	20000028 	.word	0x20000028
 800075c:	40010800 	.word	0x40010800
 8000760:	2000009c 	.word	0x2000009c
 8000764:	20000172 	.word	0x20000172
 8000768:	20000048 	.word	0x20000048
 800076c:	200000fb 	.word	0x200000fb
 8000770:	200000f4 	.word	0x200000f4
 8000774:	20000174 	.word	0x20000174
 8000778:	2000016c 	.word	0x2000016c

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	; 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000786:	2228      	movs	r2, #40	; 0x28
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f003 fb84 	bl	8003e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80007ac:	2305      	movs	r3, #5
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007ba:	2301      	movs	r3, #1
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007be:	2301      	movs	r3, #1
 80007c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 f832 	bl	8001840 <HAL_RCC_OscConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80007e2:	f000 f9cf 	bl	8000b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e6:	230f      	movs	r3, #15
 80007e8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ea:	2302      	movs	r3, #2
 80007ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2102      	movs	r1, #2
 8000802:	4618      	mov	r0, r3
 8000804:	f001 fa9c 	bl	8001d40 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800080e:	f000 f9b9 	bl	8000b84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000812:	2301      	movs	r3, #1
 8000814:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fc16 	bl	8002050 <HAL_RCCEx_PeriphCLKConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800082a:	f000 f9ab 	bl	8000b84 <Error_Handler>
  }
}
 800082e:	bf00      	nop
 8000830:	3750      	adds	r7, #80	; 0x50
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_RTC_Init+0x30>)
 800083e:	4a0b      	ldr	r2, [pc, #44]	; (800086c <MX_RTC_Init+0x34>)
 8000840:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_RTC_Init+0x30>)
 8000844:	f04f 32ff 	mov.w	r2, #4294967295
 8000848:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_RTC_Init+0x30>)
 800084c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000850:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_RTC_Init+0x30>)
 8000854:	f001 fd6e 	bl	8002334 <HAL_RTC_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800085e:	f000 f991 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000fc 	.word	0x200000fc
 800086c:	40002800 	.word	0x40002800

08000870 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_TIM2_Init+0x94>)
 800088e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000892:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_TIM2_Init+0x94>)
 8000896:	2247      	movs	r2, #71	; 0x47
 8000898:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_TIM2_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_TIM2_Init+0x94>)
 80008a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_TIM2_Init+0x94>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_TIM2_Init+0x94>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b4:	4813      	ldr	r0, [pc, #76]	; (8000904 <MX_TIM2_Init+0x94>)
 80008b6:	f002 fb30 	bl	8002f1a <HAL_TIM_Base_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008c0:	f000 f960 	bl	8000b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	4619      	mov	r1, r3
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <MX_TIM2_Init+0x94>)
 80008d2:	f002 fec5 	bl	8003660 <HAL_TIM_ConfigClockSource>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008dc:	f000 f952 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_TIM2_Init+0x94>)
 80008ee:	f003 fa3f 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008f8:	f000 f944 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	2000011c 	.word	0x2000011c

08000908 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091c:	463b      	mov	r3, r7
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000924:	4b1d      	ldr	r3, [pc, #116]	; (800099c <MX_TIM3_Init+0x94>)
 8000926:	4a1e      	ldr	r2, [pc, #120]	; (80009a0 <MX_TIM3_Init+0x98>)
 8000928:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_TIM3_Init+0x94>)
 800092c:	2200      	movs	r2, #0
 800092e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_TIM3_Init+0x94>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <MX_TIM3_Init+0x94>)
 8000938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800093c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_TIM3_Init+0x94>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_TIM3_Init+0x94>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800094a:	4814      	ldr	r0, [pc, #80]	; (800099c <MX_TIM3_Init+0x94>)
 800094c:	f002 fae5 	bl	8002f1a <HAL_TIM_Base_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000956:	f000 f915 	bl	8000b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	4619      	mov	r1, r3
 8000966:	480d      	ldr	r0, [pc, #52]	; (800099c <MX_TIM3_Init+0x94>)
 8000968:	f002 fe7a 	bl	8003660 <HAL_TIM_ConfigClockSource>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000972:	f000 f907 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800097e:	463b      	mov	r3, r7
 8000980:	4619      	mov	r1, r3
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <MX_TIM3_Init+0x94>)
 8000984:	f003 f9f4 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800098e:	f000 f8f9 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000a8 	.word	0x200000a8
 80009a0:	40000400 	.word	0x40000400

080009a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
 80009c2:	615a      	str	r2, [r3, #20]
 80009c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_TIM4_Init+0xa8>)
 80009c8:	4a21      	ldr	r2, [pc, #132]	; (8000a50 <MX_TIM4_Init+0xac>)
 80009ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_TIM4_Init+0xa8>)
 80009ce:	220f      	movs	r2, #15
 80009d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_TIM4_Init+0xa8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3906;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_TIM4_Init+0xa8>)
 80009da:	f640 7242 	movw	r2, #3906	; 0xf42
 80009de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_TIM4_Init+0xa8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
 // htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009e6:	4819      	ldr	r0, [pc, #100]	; (8000a4c <MX_TIM4_Init+0xa8>)
 80009e8:	f002 fb82 	bl	80030f0 <HAL_TIM_PWM_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80009f2:	f000 f8c7 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009fe:	f107 0320 	add.w	r3, r7, #32
 8000a02:	4619      	mov	r1, r3
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <MX_TIM4_Init+0xa8>)
 8000a06:	f003 f9b3 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000a10:	f000 f8b8 	bl	8000b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a14:	2360      	movs	r3, #96	; 0x60
 8000a16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1953;
 8000a18:	f240 73a1 	movw	r3, #1953	; 0x7a1
 8000a1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4807      	ldr	r0, [pc, #28]	; (8000a4c <MX_TIM4_Init+0xa8>)
 8000a2e:	f002 fd59 	bl	80034e4 <HAL_TIM_PWM_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000a38:	f000 f8a4 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a3c:	4803      	ldr	r0, [pc, #12]	; (8000a4c <MX_TIM4_Init+0xa8>)
 8000a3e:	f000 f963 	bl	8000d08 <HAL_TIM_MspPostInit>

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000050 	.word	0x20000050
 8000a50:	40000800 	.word	0x40000800

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a68:	4b43      	ldr	r3, [pc, #268]	; (8000b78 <MX_GPIO_Init+0x124>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a42      	ldr	r2, [pc, #264]	; (8000b78 <MX_GPIO_Init+0x124>)
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b40      	ldr	r3, [pc, #256]	; (8000b78 <MX_GPIO_Init+0x124>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f003 0310 	and.w	r3, r3, #16
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a80:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <MX_GPIO_Init+0x124>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a3c      	ldr	r2, [pc, #240]	; (8000b78 <MX_GPIO_Init+0x124>)
 8000a86:	f043 0320 	orr.w	r3, r3, #32
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b3a      	ldr	r3, [pc, #232]	; (8000b78 <MX_GPIO_Init+0x124>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0320 	and.w	r3, r3, #32
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4b37      	ldr	r3, [pc, #220]	; (8000b78 <MX_GPIO_Init+0x124>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a36      	ldr	r2, [pc, #216]	; (8000b78 <MX_GPIO_Init+0x124>)
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b34      	ldr	r3, [pc, #208]	; (8000b78 <MX_GPIO_Init+0x124>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <MX_GPIO_Init+0x124>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <MX_GPIO_Init+0x124>)
 8000ab6:	f043 0308 	orr.w	r3, r3, #8
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <MX_GPIO_Init+0x124>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0308 	and.w	r3, r3, #8
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEGA_Pin|SEGB_Pin|SEGC_Pin|SEGD_Pin
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000ace:	482b      	ldr	r0, [pc, #172]	; (8000b7c <MX_GPIO_Init+0x128>)
 8000ad0:	f000 fe79 	bl	80017c6 <HAL_GPIO_WritePin>
                          |SEGE_Pin|SEGF_Pin|SEGG_Pin|SEGP_Pin
                          |DIG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIG_1_Pin|DIG_2_Pin|DIG_3_Pin|DIG_4_Pin
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f64f 6118 	movw	r1, #65048	; 0xfe18
 8000ada:	4829      	ldr	r0, [pc, #164]	; (8000b80 <MX_GPIO_Init+0x12c>)
 8000adc:	f000 fe73 	bl	80017c6 <HAL_GPIO_WritePin>
                          |LedAlarme_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEGA_Pin SEGB_Pin SEGC_Pin SEGD_Pin
                           SEGE_Pin SEGF_Pin SEGG_Pin SEGP_Pin
                           DIG_6_Pin */
  GPIO_InitStruct.Pin = SEGA_Pin|SEGB_Pin|SEGC_Pin|SEGD_Pin
 8000ae0:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000ae4:	613b      	str	r3, [r7, #16]
                          |SEGE_Pin|SEGF_Pin|SEGG_Pin|SEGP_Pin
                          |DIG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	4619      	mov	r1, r3
 8000af8:	4820      	ldr	r0, [pc, #128]	; (8000b7c <MX_GPIO_Init+0x128>)
 8000afa:	f000 fcf3 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG_1_Pin DIG_2_Pin DIG_3_Pin DIG_4_Pin
                           DIG_LED_Pin DIG_5_Pin LedAlarme_Pin */
  GPIO_InitStruct.Pin = DIG_1_Pin|DIG_2_Pin|DIG_3_Pin|DIG_4_Pin
 8000afe:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8000b02:	613b      	str	r3, [r7, #16]
                          |DIG_LED_Pin|DIG_5_Pin|LedAlarme_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4619      	mov	r1, r3
 8000b16:	481a      	ldr	r0, [pc, #104]	; (8000b80 <MX_GPIO_Init+0x12c>)
 8000b18:	f000 fce4 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Bot_Esc_Pin Bot_Alarme_Pin Bot_Hora_Pin Ajuste_Hora_Pin
                           Ajuste_Min_Pin */
  GPIO_InitStruct.Pin = Bot_Esc_Pin|Bot_Alarme_Pin|Bot_Hora_Pin|Ajuste_Hora_Pin
 8000b1c:	f44f 431e 	mov.w	r3, #40448	; 0x9e00
 8000b20:	613b      	str	r3, [r7, #16]
                          |Ajuste_Min_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4812      	ldr	r0, [pc, #72]	; (8000b7c <MX_GPIO_Init+0x128>)
 8000b32:	f000 fcd7 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BuzAlarme_Pin */
  GPIO_InitStruct.Pin = BuzAlarme_Pin;
 8000b36:	2308      	movs	r3, #8
 8000b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BuzAlarme_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480c      	ldr	r0, [pc, #48]	; (8000b80 <MX_GPIO_Init+0x12c>)
 8000b4e:	f000 fcc9 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LampAlarme_Pin */
  GPIO_InitStruct.Pin = LampAlarme_Pin;
 8000b52:	2310      	movs	r3, #16
 8000b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LampAlarme_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_GPIO_Init+0x12c>)
 8000b6a:	f000 fcbb 	bl	80014e4 <HAL_GPIO_Init>

}
 8000b6e:	bf00      	nop
 8000b70:	3720      	adds	r7, #32
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40010800 	.word	0x40010800
 8000b80:	40010c00 	.word	0x40010c00

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_MspInit+0x5c>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	4a14      	ldr	r2, [pc, #80]	; (8000bec <HAL_MspInit+0x5c>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6193      	str	r3, [r2, #24]
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_MspInit+0x5c>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_MspInit+0x5c>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_MspInit+0x5c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	61d3      	str	r3, [r2, #28]
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x5c>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_MspInit+0x60>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_MspInit+0x60>)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40010000 	.word	0x40010000

08000bf4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a13      	ldr	r2, [pc, #76]	; (8000c50 <HAL_RTC_MspInit+0x5c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d120      	bne.n	8000c48 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000c06:	f000 fe0f 	bl	8001828 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_RTC_MspInit+0x60>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <HAL_RTC_MspInit+0x60>)
 8000c10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c14:	61d3      	str	r3, [r2, #28]
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_RTC_MspInit+0x60>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_RTC_MspInit+0x64>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 fc22 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000c32:	2003      	movs	r0, #3
 8000c34:	f000 fc3b 	bl	80014ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2029      	movs	r0, #41	; 0x29
 8000c3e:	f000 fc1a 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000c42:	2029      	movs	r0, #41	; 0x29
 8000c44:	f000 fc33 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40002800 	.word	0x40002800
 8000c54:	40021000 	.word	0x40021000
 8000c58:	4242043c 	.word	0x4242043c

08000c5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c6c:	d114      	bne.n	8000c98 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <HAL_TIM_Base_MspInit+0x68>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <HAL_TIM_Base_MspInit+0x68>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	61d3      	str	r3, [r2, #28]
 8000c7a:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_TIM_Base_MspInit+0x68>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	201c      	movs	r0, #28
 8000c8c:	f000 fbf3 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c90:	201c      	movs	r0, #28
 8000c92:	f000 fc0c 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c96:	e010      	b.n	8000cba <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_TIM_Base_MspInit+0x6c>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d10b      	bne.n	8000cba <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_TIM_Base_MspInit+0x68>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_TIM_Base_MspInit+0x68>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	61d3      	str	r3, [r2, #28]
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_TIM_Base_MspInit+0x68>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40000400 	.word	0x40000400

08000ccc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <HAL_TIM_PWM_MspInit+0x34>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d10b      	bne.n	8000cf6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_TIM_PWM_MspInit+0x38>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_TIM_PWM_MspInit+0x38>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	61d3      	str	r3, [r2, #28]
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_TIM_PWM_MspInit+0x38>)
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	40000800 	.word	0x40000800
 8000d04:	40021000 	.word	0x40021000

08000d08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <HAL_TIM_MspPostInit+0x58>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d117      	bne.n	8000d58 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_TIM_MspPostInit+0x5c>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <HAL_TIM_MspPostInit+0x5c>)
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_TIM_MspPostInit+0x5c>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0308 	and.w	r3, r3, #8
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = MotorAl_Pin;
 8000d40:	2340      	movs	r3, #64	; 0x40
 8000d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MotorAl_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	4619      	mov	r1, r3
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_TIM_MspPostInit+0x60>)
 8000d54:	f000 fbc6 	bl	80014e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	3720      	adds	r7, #32
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40000800 	.word	0x40000800
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010c00 	.word	0x40010c00

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <HardFault_Handler+0x4>

08000d7e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <MemManage_Handler+0x4>

08000d84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <BusFault_Handler+0x4>

08000d8a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <UsageFault_Handler+0x4>

08000d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 fa48 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <RTC_IRQHandler+0x10>)
 8000dc6:	f002 f862 	bl	8002e8e <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200000fc 	.word	0x200000fc

08000dd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dd8:	48c1      	ldr	r0, [pc, #772]	; (80010e0 <TIM2_IRQHandler+0x30c>)
 8000dda:	f002 fa7b 	bl	80032d4 <HAL_TIM_IRQHandler>


#if !(Relogio)
  if (testeok == 0){
#else
  if (testeok == 1){
 8000dde:	4bc1      	ldr	r3, [pc, #772]	; (80010e4 <TIM2_IRQHandler+0x310>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d123      	bne.n	8000e2e <TIM2_IRQHandler+0x5a>
#endif
	  HAL_GPIO_TogglePin(DIG_LED_GPIO_Port, DIG_LED_Pin);
 8000de6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dea:	48bf      	ldr	r0, [pc, #764]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000dec:	f000 fd03 	bl	80017f6 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DIG_1_GPIO_Port, DIG_1_Pin);
 8000df0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df4:	48bc      	ldr	r0, [pc, #752]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000df6:	f000 fcfe 	bl	80017f6 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DIG_2_GPIO_Port, DIG_2_Pin);
 8000dfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dfe:	48ba      	ldr	r0, [pc, #744]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000e00:	f000 fcf9 	bl	80017f6 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DIG_3_GPIO_Port, DIG_3_Pin);
 8000e04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e08:	48b7      	ldr	r0, [pc, #732]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000e0a:	f000 fcf4 	bl	80017f6 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DIG_4_GPIO_Port, DIG_4_Pin);
 8000e0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e12:	48b5      	ldr	r0, [pc, #724]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000e14:	f000 fcef 	bl	80017f6 <HAL_GPIO_TogglePin>
#if ComSeg
	  HAL_GPIO_TogglePin(DIG_5_GPIO_Port, DIG_5_Pin);
 8000e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e1c:	48b2      	ldr	r0, [pc, #712]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000e1e:	f000 fcea 	bl	80017f6 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(DIG_6_GPIO_Port, DIG_6_Pin);
 8000e22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e26:	48b1      	ldr	r0, [pc, #708]	; (80010ec <TIM2_IRQHandler+0x318>)
 8000e28:	f000 fce5 	bl	80017f6 <HAL_GPIO_TogglePin>
		  digit = 0;
		}
  }

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e2c:	e156      	b.n	80010dc <TIM2_IRQHandler+0x308>
	  	  GPIOA -> ODR = buffer[digit];
 8000e2e:	4bb0      	ldr	r3, [pc, #704]	; (80010f0 <TIM2_IRQHandler+0x31c>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	4baf      	ldr	r3, [pc, #700]	; (80010f4 <TIM2_IRQHandler+0x320>)
 8000e36:	5c9a      	ldrb	r2, [r3, r2]
 8000e38:	4bac      	ldr	r3, [pc, #688]	; (80010ec <TIM2_IRQHandler+0x318>)
 8000e3a:	60da      	str	r2, [r3, #12]
	  	  switch(digit){
 8000e3c:	4bac      	ldr	r3, [pc, #688]	; (80010f0 <TIM2_IRQHandler+0x31c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b06      	cmp	r3, #6
 8000e42:	f200 813e 	bhi.w	80010c2 <TIM2_IRQHandler+0x2ee>
 8000e46:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <TIM2_IRQHandler+0x78>)
 8000e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4c:	08000e69 	.word	0x08000e69
 8000e50:	08000ebf 	.word	0x08000ebf
 8000e54:	08000f15 	.word	0x08000f15
 8000e58:	08000f6b 	.word	0x08000f6b
 8000e5c:	08000fc1 	.word	0x08000fc1
 8000e60:	08001017 	.word	0x08001017
 8000e64:	0800106d 	.word	0x0800106d
			  HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6e:	489e      	ldr	r0, [pc, #632]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000e70:	f000 fca9 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e7a:	489b      	ldr	r0, [pc, #620]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000e7c:	f000 fca3 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e86:	4898      	ldr	r0, [pc, #608]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000e88:	f000 fc9d 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e92:	4895      	ldr	r0, [pc, #596]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000e94:	f000 fc97 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e9e:	4892      	ldr	r0, [pc, #584]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000ea0:	f000 fc91 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eaa:	4890      	ldr	r0, [pc, #576]	; (80010ec <TIM2_IRQHandler+0x318>)
 8000eac:	f000 fc8b 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eb6:	488c      	ldr	r0, [pc, #560]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000eb8:	f000 fc85 	bl	80017c6 <HAL_GPIO_WritePin>
			  break;
 8000ebc:	e101      	b.n	80010c2 <TIM2_IRQHandler+0x2ee>
			  HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec4:	4888      	ldr	r0, [pc, #544]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000ec6:	f000 fc7e 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed0:	4885      	ldr	r0, [pc, #532]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000ed2:	f000 fc78 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000edc:	4882      	ldr	r0, [pc, #520]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000ede:	f000 fc72 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee8:	487f      	ldr	r0, [pc, #508]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000eea:	f000 fc6c 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef4:	487c      	ldr	r0, [pc, #496]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000ef6:	f000 fc66 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f00:	487a      	ldr	r0, [pc, #488]	; (80010ec <TIM2_IRQHandler+0x318>)
 8000f02:	f000 fc60 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f0c:	4876      	ldr	r0, [pc, #472]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000f0e:	f000 fc5a 	bl	80017c6 <HAL_GPIO_WritePin>
			  break;
 8000f12:	e0d6      	b.n	80010c2 <TIM2_IRQHandler+0x2ee>
			  HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1a:	4873      	ldr	r0, [pc, #460]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000f1c:	f000 fc53 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f26:	4870      	ldr	r0, [pc, #448]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000f28:	f000 fc4d 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f32:	486d      	ldr	r0, [pc, #436]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000f34:	f000 fc47 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3e:	486a      	ldr	r0, [pc, #424]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000f40:	f000 fc41 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f4a:	4867      	ldr	r0, [pc, #412]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000f4c:	f000 fc3b 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f56:	4865      	ldr	r0, [pc, #404]	; (80010ec <TIM2_IRQHandler+0x318>)
 8000f58:	f000 fc35 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f62:	4861      	ldr	r0, [pc, #388]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000f64:	f000 fc2f 	bl	80017c6 <HAL_GPIO_WritePin>
			  break;
 8000f68:	e0ab      	b.n	80010c2 <TIM2_IRQHandler+0x2ee>
			  HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f70:	485d      	ldr	r0, [pc, #372]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000f72:	f000 fc28 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f7c:	485a      	ldr	r0, [pc, #360]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000f7e:	f000 fc22 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f88:	4857      	ldr	r0, [pc, #348]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000f8a:	f000 fc1c 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f94:	4854      	ldr	r0, [pc, #336]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000f96:	f000 fc16 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa0:	4851      	ldr	r0, [pc, #324]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000fa2:	f000 fc10 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fac:	484f      	ldr	r0, [pc, #316]	; (80010ec <TIM2_IRQHandler+0x318>)
 8000fae:	f000 fc0a 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fb8:	484b      	ldr	r0, [pc, #300]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000fba:	f000 fc04 	bl	80017c6 <HAL_GPIO_WritePin>
			  break;
 8000fbe:	e080      	b.n	80010c2 <TIM2_IRQHandler+0x2ee>
			  HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc6:	4848      	ldr	r0, [pc, #288]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000fc8:	f000 fbfd 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd2:	4845      	ldr	r0, [pc, #276]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000fd4:	f000 fbf7 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fde:	4842      	ldr	r0, [pc, #264]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000fe0:	f000 fbf1 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fea:	483f      	ldr	r0, [pc, #252]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000fec:	f000 fbeb 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff6:	483c      	ldr	r0, [pc, #240]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8000ff8:	f000 fbe5 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001002:	483a      	ldr	r0, [pc, #232]	; (80010ec <TIM2_IRQHandler+0x318>)
 8001004:	f000 fbdf 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800100e:	4836      	ldr	r0, [pc, #216]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8001010:	f000 fbd9 	bl	80017c6 <HAL_GPIO_WritePin>
			  break;
 8001014:	e055      	b.n	80010c2 <TIM2_IRQHandler+0x2ee>
			  HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101c:	4832      	ldr	r0, [pc, #200]	; (80010e8 <TIM2_IRQHandler+0x314>)
 800101e:	f000 fbd2 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001028:	482f      	ldr	r0, [pc, #188]	; (80010e8 <TIM2_IRQHandler+0x314>)
 800102a:	f000 fbcc 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001034:	482c      	ldr	r0, [pc, #176]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8001036:	f000 fbc6 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001040:	4829      	ldr	r0, [pc, #164]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8001042:	f000 fbc0 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800104c:	4826      	ldr	r0, [pc, #152]	; (80010e8 <TIM2_IRQHandler+0x314>)
 800104e:	f000 fbba 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001058:	4824      	ldr	r0, [pc, #144]	; (80010ec <TIM2_IRQHandler+0x318>)
 800105a:	f000 fbb4 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001064:	4820      	ldr	r0, [pc, #128]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8001066:	f000 fbae 	bl	80017c6 <HAL_GPIO_WritePin>
			  break;
 800106a:	e02a      	b.n	80010c2 <TIM2_IRQHandler+0x2ee>
			  HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001072:	481d      	ldr	r0, [pc, #116]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8001074:	f000 fba7 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107e:	481a      	ldr	r0, [pc, #104]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8001080:	f000 fba1 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108a:	4817      	ldr	r0, [pc, #92]	; (80010e8 <TIM2_IRQHandler+0x314>)
 800108c:	f000 fb9b 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001096:	4814      	ldr	r0, [pc, #80]	; (80010e8 <TIM2_IRQHandler+0x314>)
 8001098:	f000 fb95 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_5_GPIO_Port, DIG_5_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a2:	4811      	ldr	r0, [pc, #68]	; (80010e8 <TIM2_IRQHandler+0x314>)
 80010a4:	f000 fb8f 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_6_GPIO_Port, DIG_6_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ae:	480f      	ldr	r0, [pc, #60]	; (80010ec <TIM2_IRQHandler+0x318>)
 80010b0:	f000 fb89 	bl	80017c6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIG_LED_GPIO_Port, DIG_LED_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ba:	480b      	ldr	r0, [pc, #44]	; (80010e8 <TIM2_IRQHandler+0x314>)
 80010bc:	f000 fb83 	bl	80017c6 <HAL_GPIO_WritePin>
			  break;
 80010c0:	bf00      	nop
		digit++;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <TIM2_IRQHandler+0x31c>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <TIM2_IRQHandler+0x31c>)
 80010cc:	701a      	strb	r2, [r3, #0]
		if (digit > (SS_DIGIT - 1)){
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <TIM2_IRQHandler+0x31c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b07      	cmp	r3, #7
 80010d4:	d902      	bls.n	80010dc <TIM2_IRQHandler+0x308>
		  digit = 0;
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <TIM2_IRQHandler+0x31c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000011c 	.word	0x2000011c
 80010e4:	2000004c 	.word	0x2000004c
 80010e8:	40010c00 	.word	0x40010c00
 80010ec:	40010800 	.word	0x40010800
 80010f0:	20000044 	.word	0x20000044
 80010f4:	200000f4 	.word	0x200000f4

080010f8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <RTC_Alarm_IRQHandler+0x10>)
 80010fe:	f001 fbd3 	bl	80028a8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200000fc 	.word	0x200000fc

0800110c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <SystemInit+0x5c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a14      	ldr	r2, [pc, #80]	; (8001168 <SystemInit+0x5c>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <SystemInit+0x5c>)
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	4911      	ldr	r1, [pc, #68]	; (8001168 <SystemInit+0x5c>)
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <SystemInit+0x60>)
 8001124:	4013      	ands	r3, r2
 8001126:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <SystemInit+0x5c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <SystemInit+0x5c>)
 800112e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001136:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <SystemInit+0x5c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <SystemInit+0x5c>)
 800113e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001142:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <SystemInit+0x5c>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	4a07      	ldr	r2, [pc, #28]	; (8001168 <SystemInit+0x5c>)
 800114a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800114e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SystemInit+0x5c>)
 8001152:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001156:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <SystemInit+0x64>)
 800115a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800115e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	40021000 	.word	0x40021000
 800116c:	f8ff0000 	.word	0xf8ff0000
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001174:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001176:	e003      	b.n	8001180 <LoopCopyDataInit>

08001178 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800117a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800117c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800117e:	3104      	adds	r1, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001180:	480a      	ldr	r0, [pc, #40]	; (80011ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001184:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001186:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001188:	d3f6      	bcc.n	8001178 <CopyDataInit>
  ldr r2, =_sbss
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800118c:	e002      	b.n	8001194 <LoopFillZerobss>

0800118e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001190:	f842 3b04 	str.w	r3, [r2], #4

08001194 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001196:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001198:	d3f9      	bcc.n	800118e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800119a:	f7ff ffb7 	bl	800110c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119e:	f002 fe57 	bl	8003e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011a2:	f7ff fa53 	bl	800064c <main>
  bx lr
 80011a6:	4770      	bx	lr
  ldr r3, =_sidata
 80011a8:	08003f20 	.word	0x08003f20
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80011b4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80011b8:	20000180 	.word	0x20000180

080011bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC1_2_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_Init+0x28>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_Init+0x28>)
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 f945 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f000 f808 	bl	80011ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011dc:	f7ff fcd8 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40022000 	.word	0x40022000

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_InitTick+0x54>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x58>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f95d 	bl	80014ca <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00e      	b.n	8001238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d80a      	bhi.n	8001236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f000 f925 	bl	8001476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <HAL_InitTick+0x5c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000000 	.word	0x20000000
 8001244:	20000008 	.word	0x20000008
 8001248:	20000004 	.word	0x20000004

0800124c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_IncTick+0x1c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_IncTick+0x20>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a03      	ldr	r2, [pc, #12]	; (800126c <HAL_IncTick+0x20>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	20000008 	.word	0x20000008
 800126c:	2000017c 	.word	0x2000017c

08001270 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b02      	ldr	r3, [pc, #8]	; (8001280 <HAL_GetTick+0x10>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	2000017c 	.word	0x2000017c

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff fff0 	bl	8001270 <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d005      	beq.n	80012aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_Delay+0x40>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012aa:	bf00      	nop
 80012ac:	f7ff ffe0 	bl	8001270 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f7      	bhi.n	80012ac <HAL_Delay+0x28>
  {
  }
}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000008 	.word	0x20000008

080012c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e4:	4013      	ands	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <__NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db0b      	blt.n	8001356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4906      	ldr	r1, [pc, #24]	; (8001360 <__NVIC_EnableIRQ+0x34>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f7ff ff90 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff2d 	bl	80012c8 <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff42 	bl	8001310 <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff90 	bl	80013b8 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5f 	bl	8001364 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff35 	bl	800132c <__NVIC_EnableIRQ>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffa2 	bl	800141c <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b08b      	sub	sp, #44	; 0x2c
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f6:	e127      	b.n	8001748 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014f8:	2201      	movs	r2, #1
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	429a      	cmp	r2, r3
 8001512:	f040 8116 	bne.w	8001742 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d034      	beq.n	8001588 <HAL_GPIO_Init+0xa4>
 800151e:	2b12      	cmp	r3, #18
 8001520:	d80d      	bhi.n	800153e <HAL_GPIO_Init+0x5a>
 8001522:	2b02      	cmp	r3, #2
 8001524:	d02b      	beq.n	800157e <HAL_GPIO_Init+0x9a>
 8001526:	2b02      	cmp	r3, #2
 8001528:	d804      	bhi.n	8001534 <HAL_GPIO_Init+0x50>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d031      	beq.n	8001592 <HAL_GPIO_Init+0xae>
 800152e:	2b01      	cmp	r3, #1
 8001530:	d01c      	beq.n	800156c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001532:	e048      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001534:	2b03      	cmp	r3, #3
 8001536:	d043      	beq.n	80015c0 <HAL_GPIO_Init+0xdc>
 8001538:	2b11      	cmp	r3, #17
 800153a:	d01b      	beq.n	8001574 <HAL_GPIO_Init+0x90>
          break;
 800153c:	e043      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800153e:	4a89      	ldr	r2, [pc, #548]	; (8001764 <HAL_GPIO_Init+0x280>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d026      	beq.n	8001592 <HAL_GPIO_Init+0xae>
 8001544:	4a87      	ldr	r2, [pc, #540]	; (8001764 <HAL_GPIO_Init+0x280>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d806      	bhi.n	8001558 <HAL_GPIO_Init+0x74>
 800154a:	4a87      	ldr	r2, [pc, #540]	; (8001768 <HAL_GPIO_Init+0x284>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d020      	beq.n	8001592 <HAL_GPIO_Init+0xae>
 8001550:	4a86      	ldr	r2, [pc, #536]	; (800176c <HAL_GPIO_Init+0x288>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d01d      	beq.n	8001592 <HAL_GPIO_Init+0xae>
          break;
 8001556:	e036      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001558:	4a85      	ldr	r2, [pc, #532]	; (8001770 <HAL_GPIO_Init+0x28c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d019      	beq.n	8001592 <HAL_GPIO_Init+0xae>
 800155e:	4a85      	ldr	r2, [pc, #532]	; (8001774 <HAL_GPIO_Init+0x290>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d016      	beq.n	8001592 <HAL_GPIO_Init+0xae>
 8001564:	4a84      	ldr	r2, [pc, #528]	; (8001778 <HAL_GPIO_Init+0x294>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0xae>
          break;
 800156a:	e02c      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	623b      	str	r3, [r7, #32]
          break;
 8001572:	e028      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	3304      	adds	r3, #4
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e023      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	3308      	adds	r3, #8
 8001584:	623b      	str	r3, [r7, #32]
          break;
 8001586:	e01e      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	330c      	adds	r3, #12
 800158e:	623b      	str	r3, [r7, #32]
          break;
 8001590:	e019      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800159a:	2304      	movs	r3, #4
 800159c:	623b      	str	r3, [r7, #32]
          break;
 800159e:	e012      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a8:	2308      	movs	r3, #8
 80015aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	611a      	str	r2, [r3, #16]
          break;
 80015b2:	e008      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b4:	2308      	movs	r3, #8
 80015b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	615a      	str	r2, [r3, #20]
          break;
 80015be:	e002      	b.n	80015c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	2bff      	cmp	r3, #255	; 0xff
 80015ca:	d801      	bhi.n	80015d0 <HAL_GPIO_Init+0xec>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	e001      	b.n	80015d4 <HAL_GPIO_Init+0xf0>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3304      	adds	r3, #4
 80015d4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	2bff      	cmp	r3, #255	; 0xff
 80015da:	d802      	bhi.n	80015e2 <HAL_GPIO_Init+0xfe>
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	e002      	b.n	80015e8 <HAL_GPIO_Init+0x104>
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	3b08      	subs	r3, #8
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	210f      	movs	r1, #15
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	401a      	ands	r2, r3
 80015fa:	6a39      	ldr	r1, [r7, #32]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	431a      	orrs	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 8096 	beq.w	8001742 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001616:	4b59      	ldr	r3, [pc, #356]	; (800177c <HAL_GPIO_Init+0x298>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	4a58      	ldr	r2, [pc, #352]	; (800177c <HAL_GPIO_Init+0x298>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6193      	str	r3, [r2, #24]
 8001622:	4b56      	ldr	r3, [pc, #344]	; (800177c <HAL_GPIO_Init+0x298>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800162e:	4a54      	ldr	r2, [pc, #336]	; (8001780 <HAL_GPIO_Init+0x29c>)
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	220f      	movs	r2, #15
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	4013      	ands	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4b      	ldr	r2, [pc, #300]	; (8001784 <HAL_GPIO_Init+0x2a0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d013      	beq.n	8001682 <HAL_GPIO_Init+0x19e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a4a      	ldr	r2, [pc, #296]	; (8001788 <HAL_GPIO_Init+0x2a4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d00d      	beq.n	800167e <HAL_GPIO_Init+0x19a>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a49      	ldr	r2, [pc, #292]	; (800178c <HAL_GPIO_Init+0x2a8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d007      	beq.n	800167a <HAL_GPIO_Init+0x196>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a48      	ldr	r2, [pc, #288]	; (8001790 <HAL_GPIO_Init+0x2ac>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d101      	bne.n	8001676 <HAL_GPIO_Init+0x192>
 8001672:	2303      	movs	r3, #3
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x1a0>
 8001676:	2304      	movs	r3, #4
 8001678:	e004      	b.n	8001684 <HAL_GPIO_Init+0x1a0>
 800167a:	2302      	movs	r3, #2
 800167c:	e002      	b.n	8001684 <HAL_GPIO_Init+0x1a0>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <HAL_GPIO_Init+0x1a0>
 8001682:	2300      	movs	r3, #0
 8001684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001686:	f002 0203 	and.w	r2, r2, #3
 800168a:	0092      	lsls	r2, r2, #2
 800168c:	4093      	lsls	r3, r2
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001694:	493a      	ldr	r1, [pc, #232]	; (8001780 <HAL_GPIO_Init+0x29c>)
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	3302      	adds	r3, #2
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016ae:	4b39      	ldr	r3, [pc, #228]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4938      	ldr	r1, [pc, #224]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
 80016ba:	e006      	b.n	80016ca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016bc:	4b35      	ldr	r3, [pc, #212]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	4933      	ldr	r1, [pc, #204]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d006      	beq.n	80016e4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016d6:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	492e      	ldr	r1, [pc, #184]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	4313      	orrs	r3, r2
 80016e0:	604b      	str	r3, [r1, #4]
 80016e2:	e006      	b.n	80016f2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016e4:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	4929      	ldr	r1, [pc, #164]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	4924      	ldr	r1, [pc, #144]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
 800170a:	e006      	b.n	800171a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	43db      	mvns	r3, r3
 8001714:	491f      	ldr	r1, [pc, #124]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 8001716:	4013      	ands	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d006      	beq.n	8001734 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	491a      	ldr	r1, [pc, #104]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	60cb      	str	r3, [r1, #12]
 8001732:	e006      	b.n	8001742 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	43db      	mvns	r3, r3
 800173c:	4915      	ldr	r1, [pc, #84]	; (8001794 <HAL_GPIO_Init+0x2b0>)
 800173e:	4013      	ands	r3, r2
 8001740:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	3301      	adds	r3, #1
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	fa22 f303 	lsr.w	r3, r2, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	f47f aed0 	bne.w	80014f8 <HAL_GPIO_Init+0x14>
  }
}
 8001758:	bf00      	nop
 800175a:	372c      	adds	r7, #44	; 0x2c
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	10210000 	.word	0x10210000
 8001768:	10110000 	.word	0x10110000
 800176c:	10120000 	.word	0x10120000
 8001770:	10310000 	.word	0x10310000
 8001774:	10320000 	.word	0x10320000
 8001778:	10220000 	.word	0x10220000
 800177c:	40021000 	.word	0x40021000
 8001780:	40010000 	.word	0x40010000
 8001784:	40010800 	.word	0x40010800
 8001788:	40010c00 	.word	0x40010c00
 800178c:	40011000 	.word	0x40011000
 8001790:	40011400 	.word	0x40011400
 8001794:	40010400 	.word	0x40010400

08001798 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	e001      	b.n	80017ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	460b      	mov	r3, r1
 80017d0:	807b      	strh	r3, [r7, #2]
 80017d2:	4613      	mov	r3, r2
 80017d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017d6:	787b      	ldrb	r3, [r7, #1]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017dc:	887a      	ldrh	r2, [r7, #2]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017e2:	e003      	b.n	80017ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	041a      	lsls	r2, r3, #16
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	611a      	str	r2, [r3, #16]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	460b      	mov	r3, r1
 8001800:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001808:	887a      	ldrh	r2, [r7, #2]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4013      	ands	r3, r2
 800180e:	041a      	lsls	r2, r3, #16
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	43d9      	mvns	r1, r3
 8001814:	887b      	ldrh	r3, [r7, #2]
 8001816:	400b      	ands	r3, r1
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	611a      	str	r2, [r3, #16]
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_PWR_EnableBkUpAccess+0x14>)
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	420e0020 	.word	0x420e0020

08001840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e26c      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8087 	beq.w	800196e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001860:	4b92      	ldr	r3, [pc, #584]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b04      	cmp	r3, #4
 800186a:	d00c      	beq.n	8001886 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800186c:	4b8f      	ldr	r3, [pc, #572]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 030c 	and.w	r3, r3, #12
 8001874:	2b08      	cmp	r3, #8
 8001876:	d112      	bne.n	800189e <HAL_RCC_OscConfig+0x5e>
 8001878:	4b8c      	ldr	r3, [pc, #560]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001884:	d10b      	bne.n	800189e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001886:	4b89      	ldr	r3, [pc, #548]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d06c      	beq.n	800196c <HAL_RCC_OscConfig+0x12c>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d168      	bne.n	800196c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e246      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a6:	d106      	bne.n	80018b6 <HAL_RCC_OscConfig+0x76>
 80018a8:	4b80      	ldr	r3, [pc, #512]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a7f      	ldr	r2, [pc, #508]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	e02e      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x98>
 80018be:	4b7b      	ldr	r3, [pc, #492]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a7a      	ldr	r2, [pc, #488]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b78      	ldr	r3, [pc, #480]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a77      	ldr	r2, [pc, #476]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e01d      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0xbc>
 80018e2:	4b72      	ldr	r3, [pc, #456]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a71      	ldr	r2, [pc, #452]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b6f      	ldr	r3, [pc, #444]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a6e      	ldr	r2, [pc, #440]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018fc:	4b6b      	ldr	r3, [pc, #428]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a6a      	ldr	r2, [pc, #424]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b68      	ldr	r3, [pc, #416]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a67      	ldr	r2, [pc, #412]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800190e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001912:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fca8 	bl	8001270 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fca4 	bl	8001270 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e1fa      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	4b5d      	ldr	r3, [pc, #372]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0xe4>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fc94 	bl	8001270 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff fc90 	bl	8001270 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	; 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1e6      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195e:	4b53      	ldr	r3, [pc, #332]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x10c>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d063      	beq.n	8001a42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800197a:	4b4c      	ldr	r3, [pc, #304]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001986:	4b49      	ldr	r3, [pc, #292]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b08      	cmp	r3, #8
 8001990:	d11c      	bne.n	80019cc <HAL_RCC_OscConfig+0x18c>
 8001992:	4b46      	ldr	r3, [pc, #280]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d116      	bne.n	80019cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199e:	4b43      	ldr	r3, [pc, #268]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <HAL_RCC_OscConfig+0x176>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e1ba      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b6:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4939      	ldr	r1, [pc, #228]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	e03a      	b.n	8001a42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d020      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff fc49 	bl	8001270 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e2:	f7ff fc45 	bl	8001270 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e19b      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a00:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4927      	ldr	r1, [pc, #156]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
 8001a14:	e015      	b.n	8001a42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fc28 	bl	8001270 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a24:	f7ff fc24 	bl	8001270 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e17a      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d03a      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d019      	beq.n	8001a8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_RCC_OscConfig+0x274>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fc08 	bl	8001270 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a64:	f7ff fc04 	bl	8001270 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e15a      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a82:	2001      	movs	r0, #1
 8001a84:	f000 fac6 	bl	8002014 <RCC_Delay>
 8001a88:	e01c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a90:	f7ff fbee 	bl	8001270 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a96:	e00f      	b.n	8001ab8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff fbea 	bl	8001270 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d908      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e140      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	42420000 	.word	0x42420000
 8001ab4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab8:	4b9e      	ldr	r3, [pc, #632]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1e9      	bne.n	8001a98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a6 	beq.w	8001c1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad6:	4b97      	ldr	r3, [pc, #604]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10d      	bne.n	8001afe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	4b94      	ldr	r3, [pc, #592]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	4a93      	ldr	r2, [pc, #588]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	61d3      	str	r3, [r2, #28]
 8001aee:	4b91      	ldr	r3, [pc, #580]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afa:	2301      	movs	r3, #1
 8001afc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afe:	4b8e      	ldr	r3, [pc, #568]	; (8001d38 <HAL_RCC_OscConfig+0x4f8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d118      	bne.n	8001b3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b0a:	4b8b      	ldr	r3, [pc, #556]	; (8001d38 <HAL_RCC_OscConfig+0x4f8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a8a      	ldr	r2, [pc, #552]	; (8001d38 <HAL_RCC_OscConfig+0x4f8>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fbab 	bl	8001270 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1e:	f7ff fba7 	bl	8001270 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b64      	cmp	r3, #100	; 0x64
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e0fd      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	4b81      	ldr	r3, [pc, #516]	; (8001d38 <HAL_RCC_OscConfig+0x4f8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x312>
 8001b44:	4b7b      	ldr	r3, [pc, #492]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4a7a      	ldr	r2, [pc, #488]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6213      	str	r3, [r2, #32]
 8001b50:	e02d      	b.n	8001bae <HAL_RCC_OscConfig+0x36e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x334>
 8001b5a:	4b76      	ldr	r3, [pc, #472]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a75      	ldr	r2, [pc, #468]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6213      	str	r3, [r2, #32]
 8001b66:	4b73      	ldr	r3, [pc, #460]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	4a72      	ldr	r2, [pc, #456]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	6213      	str	r3, [r2, #32]
 8001b72:	e01c      	b.n	8001bae <HAL_RCC_OscConfig+0x36e>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b05      	cmp	r3, #5
 8001b7a:	d10c      	bne.n	8001b96 <HAL_RCC_OscConfig+0x356>
 8001b7c:	4b6d      	ldr	r3, [pc, #436]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4a6c      	ldr	r2, [pc, #432]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	6213      	str	r3, [r2, #32]
 8001b88:	4b6a      	ldr	r3, [pc, #424]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4a69      	ldr	r2, [pc, #420]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6213      	str	r3, [r2, #32]
 8001b94:	e00b      	b.n	8001bae <HAL_RCC_OscConfig+0x36e>
 8001b96:	4b67      	ldr	r3, [pc, #412]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a66      	ldr	r2, [pc, #408]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6213      	str	r3, [r2, #32]
 8001ba2:	4b64      	ldr	r3, [pc, #400]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4a63      	ldr	r2, [pc, #396]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	f023 0304 	bic.w	r3, r3, #4
 8001bac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d015      	beq.n	8001be2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fb5b 	bl	8001270 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbe:	f7ff fb57 	bl	8001270 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e0ab      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd4:	4b57      	ldr	r3, [pc, #348]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0ee      	beq.n	8001bbe <HAL_RCC_OscConfig+0x37e>
 8001be0:	e014      	b.n	8001c0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be2:	f7ff fb45 	bl	8001270 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7ff fb41 	bl	8001270 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e095      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c00:	4b4c      	ldr	r3, [pc, #304]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1ee      	bne.n	8001bea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d105      	bne.n	8001c1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c12:	4b48      	ldr	r3, [pc, #288]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a47      	ldr	r2, [pc, #284]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8081 	beq.w	8001d2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c28:	4b42      	ldr	r3, [pc, #264]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d061      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d146      	bne.n	8001cca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3c:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_RCC_OscConfig+0x4fc>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7ff fb15 	bl	8001270 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7ff fb11 	bl	8001270 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e067      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5c:	4b35      	ldr	r3, [pc, #212]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c70:	d108      	bne.n	8001c84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c72:	4b30      	ldr	r3, [pc, #192]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	492d      	ldr	r1, [pc, #180]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c84:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a19      	ldr	r1, [r3, #32]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	430b      	orrs	r3, r1
 8001c96:	4927      	ldr	r1, [pc, #156]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9c:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_RCC_OscConfig+0x4fc>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fae5 	bl	8001270 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001caa:	f7ff fae1 	bl	8001270 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e037      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x46a>
 8001cc8:	e02f      	b.n	8001d2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <HAL_RCC_OscConfig+0x4fc>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff face 	bl	8001270 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7ff faca 	bl	8001270 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e020      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cea:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x498>
 8001cf6:	e018      	b.n	8001d2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e013      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	42420060 	.word	0x42420060

08001d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0d0      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d54:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d910      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b67      	ldr	r3, [pc, #412]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 0207 	bic.w	r2, r3, #7
 8001d6a:	4965      	ldr	r1, [pc, #404]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b63      	ldr	r3, [pc, #396]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0b8      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d020      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d9c:	4b59      	ldr	r3, [pc, #356]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4a58      	ldr	r2, [pc, #352]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001da6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001db4:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4a52      	ldr	r2, [pc, #328]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc0:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	494d      	ldr	r1, [pc, #308]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d040      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d115      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e07f      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfe:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e073      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e06b      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1e:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f023 0203 	bic.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4936      	ldr	r1, [pc, #216]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e30:	f7ff fa1e 	bl	8001270 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7ff fa1a 	bl	8001270 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e053      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 020c 	and.w	r2, r3, #12
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1eb      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e60:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d210      	bcs.n	8001e90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 0207 	bic.w	r2, r3, #7
 8001e76:	4922      	ldr	r1, [pc, #136]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e032      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4916      	ldr	r1, [pc, #88]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d009      	beq.n	8001ece <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	490e      	ldr	r1, [pc, #56]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ece:	f000 f821 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001ed2:	4601      	mov	r1, r0
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee0:	5cd3      	ldrb	r3, [r2, r3]
 8001ee2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ee6:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <HAL_RCC_ClockConfig+0x1cc>)
 8001ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_RCC_ClockConfig+0x1d0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff f97c 	bl	80011ec <HAL_InitTick>

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40022000 	.word	0x40022000
 8001f04:	40021000 	.word	0x40021000
 8001f08:	08003f00 	.word	0x08003f00
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f14:	b490      	push	{r4, r7}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f1a:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f1c:	1d3c      	adds	r4, r7, #4
 8001f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f24:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	2300      	movs	r3, #0
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f3e:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d002      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x40>
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d003      	beq.n	8001f5a <HAL_RCC_GetSysClockFreq+0x46>
 8001f52:	e02d      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f54:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f56:	623b      	str	r3, [r7, #32]
      break;
 8001f58:	e02d      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	0c9b      	lsrs	r3, r3, #18
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f66:	4413      	add	r3, r2
 8001f68:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f6c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d013      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	0c5b      	lsrs	r3, r3, #17
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f86:	4413      	add	r3, r2
 8001f88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f8c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	4a0f      	ldr	r2, [pc, #60]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f92:	fb02 f203 	mul.w	r2, r2, r3
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9e:	e004      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	4a0c      	ldr	r2, [pc, #48]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	623b      	str	r3, [r7, #32]
      break;
 8001fae:	e002      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fb2:	623b      	str	r3, [r7, #32]
      break;
 8001fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc90      	pop	{r4, r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	08003ec0 	.word	0x08003ec0
 8001fc8:	08003ed0 	.word	0x08003ed0
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	007a1200 	.word	0x007a1200
 8001fd4:	003d0900 	.word	0x003d0900

08001fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fdc:	4b02      	ldr	r3, [pc, #8]	; (8001fe8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	20000000 	.word	0x20000000

08001fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ff0:	f7ff fff2 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 8001ff4:	4601      	mov	r1, r0
 8001ff6:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	0adb      	lsrs	r3, r3, #11
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	4a03      	ldr	r2, [pc, #12]	; (8002010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	08003f10 	.word	0x08003f10

08002014 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <RCC_Delay+0x34>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0a      	ldr	r2, [pc, #40]	; (800204c <RCC_Delay+0x38>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0a5b      	lsrs	r3, r3, #9
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002030:	bf00      	nop
  }
  while (Delay --);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1e5a      	subs	r2, r3, #1
 8002036:	60fa      	str	r2, [r7, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f9      	bne.n	8002030 <RCC_Delay+0x1c>
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000000 	.word	0x20000000
 800204c:	10624dd3 	.word	0x10624dd3

08002050 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d07d      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800206c:	2300      	movs	r3, #0
 800206e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002070:	4b4f      	ldr	r3, [pc, #316]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10d      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207c:	4b4c      	ldr	r3, [pc, #304]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	4a4b      	ldr	r2, [pc, #300]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002086:	61d3      	str	r3, [r2, #28]
 8002088:	4b49      	ldr	r3, [pc, #292]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002094:	2301      	movs	r3, #1
 8002096:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d118      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a4:	4b43      	ldr	r3, [pc, #268]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a42      	ldr	r2, [pc, #264]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b0:	f7ff f8de 	bl	8001270 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b6:	e008      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b8:	f7ff f8da 	bl	8001270 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	; 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e06d      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ca:	4b3a      	ldr	r3, [pc, #232]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020d6:	4b36      	ldr	r3, [pc, #216]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d02e      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d027      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020f4:	4b2e      	ldr	r3, [pc, #184]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020fe:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002100:	2201      	movs	r2, #1
 8002102:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002104:	4b2c      	ldr	r3, [pc, #176]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800210a:	4a29      	ldr	r2, [pc, #164]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d014      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7ff f8a9 	bl	8001270 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002120:	e00a      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002122:	f7ff f8a5 	bl	8001270 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e036      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002138:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ee      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002144:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4917      	ldr	r1, [pc, #92]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002152:	4313      	orrs	r3, r2
 8002154:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002156:	7dfb      	ldrb	r3, [r7, #23]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d105      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002166:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002174:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	490b      	ldr	r1, [pc, #44]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	d008      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	4904      	ldr	r1, [pc, #16]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40007000 	.word	0x40007000
 80021b8:	42420440 	.word	0x42420440

080021bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b08d      	sub	sp, #52	; 0x34
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021c4:	4b55      	ldr	r3, [pc, #340]	; (800231c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80021c6:	f107 040c 	add.w	r4, r7, #12
 80021ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021d0:	4b53      	ldr	r3, [pc, #332]	; (8002320 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
 80021da:	2300      	movs	r3, #0
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021de:	2300      	movs	r3, #0
 80021e0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	2300      	movs	r3, #0
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d07f      	beq.n	80022f0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80021f0:	2b10      	cmp	r3, #16
 80021f2:	d002      	beq.n	80021fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d048      	beq.n	800228a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80021f8:	e08b      	b.n	8002312 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80021fa:	4b4a      	ldr	r3, [pc, #296]	; (8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002200:	4b48      	ldr	r3, [pc, #288]	; (8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d07f      	beq.n	800230c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	0c9b      	lsrs	r3, r3, #18
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002218:	4413      	add	r3, r2
 800221a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800221e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d018      	beq.n	800225c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800222a:	4b3e      	ldr	r3, [pc, #248]	; (8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	0c5b      	lsrs	r3, r3, #17
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002238:	4413      	add	r3, r2
 800223a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00d      	beq.n	8002266 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800224a:	4a37      	ldr	r2, [pc, #220]	; (8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	fb02 f303 	mul.w	r3, r2, r3
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225a:	e004      	b.n	8002266 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	4a33      	ldr	r2, [pc, #204]	; (800232c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002260:	fb02 f303 	mul.w	r3, r2, r3
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002266:	4b2f      	ldr	r3, [pc, #188]	; (8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002272:	d102      	bne.n	800227a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002278:	e048      	b.n	800230c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4a2c      	ldr	r2, [pc, #176]	; (8002330 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002280:	fba2 2303 	umull	r2, r3, r2, r3
 8002284:	085b      	lsrs	r3, r3, #1
 8002286:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002288:	e040      	b.n	800230c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800228a:	4b26      	ldr	r3, [pc, #152]	; (8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800229a:	d108      	bne.n	80022ae <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80022a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ac:	e01f      	b.n	80022ee <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b8:	d109      	bne.n	80022ce <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80022c6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80022ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80022cc:	e00f      	b.n	80022ee <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022d8:	d11a      	bne.n	8002310 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80022da:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d014      	beq.n	8002310 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80022e6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80022ec:	e010      	b.n	8002310 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80022ee:	e00f      	b.n	8002310 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80022f0:	f7ff fe7c 	bl	8001fec <HAL_RCC_GetPCLK2Freq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	0b9b      	lsrs	r3, r3, #14
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	3301      	adds	r3, #1
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fbb2 f3f3 	udiv	r3, r2, r3
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800230a:	e002      	b.n	8002312 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800230c:	bf00      	nop
 800230e:	e000      	b.n	8002312 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002310:	bf00      	nop
    }
  }
  return (frequency);
 8002312:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002314:	4618      	mov	r0, r3
 8002316:	3734      	adds	r7, #52	; 0x34
 8002318:	46bd      	mov	sp, r7
 800231a:	bd90      	pop	{r4, r7, pc}
 800231c:	08003ed4 	.word	0x08003ed4
 8002320:	08003ee4 	.word	0x08003ee4
 8002324:	40021000 	.word	0x40021000
 8002328:	007a1200 	.word	0x007a1200
 800232c:	003d0900 	.word	0x003d0900
 8002330:	aaaaaaab 	.word	0xaaaaaaab

08002334 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e084      	b.n	8002454 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	7c5b      	ldrb	r3, [r3, #17]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d105      	bne.n	8002360 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe fc4a 	bl	8000bf4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fac6 	bl	80028f8 <HAL_RTC_WaitForSynchro>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d004      	beq.n	800237c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2204      	movs	r2, #4
 8002376:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e06b      	b.n	8002454 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fb7f 	bl	8002a80 <RTC_EnterInitMode>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d004      	beq.n	8002392 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2204      	movs	r2, #4
 800238c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e060      	b.n	8002454 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0207 	bic.w	r2, r2, #7
 80023a0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80023aa:	4b2c      	ldr	r3, [pc, #176]	; (800245c <HAL_RTC_Init+0x128>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a2b      	ldr	r2, [pc, #172]	; (800245c <HAL_RTC_Init+0x128>)
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80023b6:	4b29      	ldr	r3, [pc, #164]	; (800245c <HAL_RTC_Init+0x128>)
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	4926      	ldr	r1, [pc, #152]	; (800245c <HAL_RTC_Init+0x128>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d0:	d003      	beq.n	80023da <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	e00e      	b.n	80023f8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80023da:	2001      	movs	r0, #1
 80023dc:	f7ff feee 	bl	80021bc <HAL_RCCEx_GetPeriphCLKFreq>
 80023e0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d104      	bne.n	80023f2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2204      	movs	r2, #4
 80023ec:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e030      	b.n	8002454 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f023 010f 	bic.w	r1, r3, #15
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	0c1a      	lsrs	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	041b      	lsls	r3, r3, #16
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	b291      	uxth	r1, r2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	430b      	orrs	r3, r1
 8002422:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fb53 	bl	8002ad0 <RTC_ExitInitMode>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d004      	beq.n	800243a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2204      	movs	r2, #4
 8002434:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e00c      	b.n	8002454 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002452:	2300      	movs	r3, #0
  }
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40006c00 	.word	0x40006c00

08002460 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	2300      	movs	r3, #0
 8002472:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <HAL_RTC_SetTime+0x20>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e080      	b.n	8002586 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	7c1b      	ldrb	r3, [r3, #16]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_RTC_SetTime+0x30>
 800248c:	2302      	movs	r3, #2
 800248e:	e07a      	b.n	8002586 <HAL_RTC_SetTime+0x126>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2201      	movs	r2, #1
 8002494:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2202      	movs	r2, #2
 800249a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d113      	bne.n	80024ca <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80024ac:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	785b      	ldrb	r3, [r3, #1]
 80024b4:	4619      	mov	r1, r3
 80024b6:	460b      	mov	r3, r1
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	1a5b      	subs	r3, r3, r1
 80024bc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80024be:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80024c4:	4413      	add	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	e01e      	b.n	8002508 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fb43 	bl	8002b5a <RTC_Bcd2ToByte>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461a      	mov	r2, r3
 80024d8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80024dc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	785b      	ldrb	r3, [r3, #1]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 fb38 	bl	8002b5a <RTC_Bcd2ToByte>
 80024ea:	4603      	mov	r3, r0
 80024ec:	461a      	mov	r2, r3
 80024ee:	4613      	mov	r3, r2
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	1a9b      	subs	r3, r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80024f6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	789b      	ldrb	r3, [r3, #2]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 fb2c 	bl	8002b5a <RTC_Bcd2ToByte>
 8002502:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002504:	4423      	add	r3, r4
 8002506:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002508:	6979      	ldr	r1, [r7, #20]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 fa51 	bl	80029b2 <RTC_WriteTimeCounter>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2204      	movs	r2, #4
 800251a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e02f      	b.n	8002586 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0205 	bic.w	r2, r2, #5
 8002534:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 fa62 	bl	8002a00 <RTC_ReadAlarmCounter>
 800253c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d018      	beq.n	8002578 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	429a      	cmp	r2, r3
 800254c:	d214      	bcs.n	8002578 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002554:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002558:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800255a:	6939      	ldr	r1, [r7, #16]
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 fa68 	bl	8002a32 <RTC_WriteAlarmCounter>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2204      	movs	r2, #4
 800256c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e006      	b.n	8002586 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2201      	movs	r2, #1
 800257c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002584:	2300      	movs	r3, #0
  }
}
 8002586:	4618      	mov	r0, r3
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	bd90      	pop	{r4, r7, pc}
	...

08002590 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	2300      	movs	r3, #0
 80025aa:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_RTC_GetTime+0x28>
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0b5      	b.n	8002728 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e0ac      	b.n	8002728 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f9bf 	bl	8002952 <RTC_ReadTimeCounter>
 80025d4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	4a55      	ldr	r2, [pc, #340]	; (8002730 <HAL_RTC_GetTime+0x1a0>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	0adb      	lsrs	r3, r3, #11
 80025e0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4b52      	ldr	r3, [pc, #328]	; (8002730 <HAL_RTC_GetTime+0x1a0>)
 80025e6:	fba3 1302 	umull	r1, r3, r3, r2
 80025ea:	0adb      	lsrs	r3, r3, #11
 80025ec:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	4a4f      	ldr	r2, [pc, #316]	; (8002734 <HAL_RTC_GetTime+0x1a4>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	4a4a      	ldr	r2, [pc, #296]	; (8002730 <HAL_RTC_GetTime+0x1a0>)
 8002608:	fba2 1203 	umull	r1, r2, r2, r3
 800260c:	0ad2      	lsrs	r2, r2, #11
 800260e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002612:	fb01 f202 	mul.w	r2, r1, r2
 8002616:	1a9a      	subs	r2, r3, r2
 8002618:	4b46      	ldr	r3, [pc, #280]	; (8002734 <HAL_RTC_GetTime+0x1a4>)
 800261a:	fba3 1302 	umull	r1, r3, r3, r2
 800261e:	0959      	lsrs	r1, r3, #5
 8002620:	460b      	mov	r3, r1
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	1a5b      	subs	r3, r3, r1
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	1ad1      	subs	r1, r2, r3
 800262a:	b2ca      	uxtb	r2, r1
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	2b17      	cmp	r3, #23
 8002634:	d955      	bls.n	80026e2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4a3f      	ldr	r2, [pc, #252]	; (8002738 <HAL_RTC_GetTime+0x1a8>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	091b      	lsrs	r3, r3, #4
 8002640:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002642:	6939      	ldr	r1, [r7, #16]
 8002644:	4b3c      	ldr	r3, [pc, #240]	; (8002738 <HAL_RTC_GetTime+0x1a8>)
 8002646:	fba3 2301 	umull	r2, r3, r3, r1
 800264a:	091a      	lsrs	r2, r3, #4
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	1aca      	subs	r2, r1, r3
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f9cf 	bl	8002a00 <RTC_ReadAlarmCounter>
 8002662:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266a:	d008      	beq.n	800267e <HAL_RTC_GetTime+0xee>
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	429a      	cmp	r2, r3
 8002672:	d904      	bls.n	800267e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	61fb      	str	r3, [r7, #28]
 800267c:	e002      	b.n	8002684 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800267e:	f04f 33ff 	mov.w	r3, #4294967295
 8002682:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	4a2d      	ldr	r2, [pc, #180]	; (800273c <HAL_RTC_GetTime+0x1ac>)
 8002688:	fb02 f303 	mul.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f98c 	bl	80029b2 <RTC_WriteTimeCounter>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e041      	b.n	8002728 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026aa:	d00c      	beq.n	80026c6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	4413      	add	r3, r2
 80026b2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80026b4:	69f9      	ldr	r1, [r7, #28]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f9bb 	bl	8002a32 <RTC_WriteAlarmCounter>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00a      	beq.n	80026d8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e030      	b.n	8002728 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80026c6:	69f9      	ldr	r1, [r7, #28]
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 f9b2 	bl	8002a32 <RTC_WriteAlarmCounter>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e027      	b.n	8002728 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80026d8:	6979      	ldr	r1, [r7, #20]
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fa5a 	bl	8002b94 <RTC_DateUpdate>
 80026e0:	e003      	b.n	80026ea <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d01a      	beq.n	8002726 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 fa13 	bl	8002b20 <RTC_ByteToBcd2>
 80026fa:	4603      	mov	r3, r0
 80026fc:	461a      	mov	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	785b      	ldrb	r3, [r3, #1]
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fa0a 	bl	8002b20 <RTC_ByteToBcd2>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	789b      	ldrb	r3, [r3, #2]
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fa01 	bl	8002b20 <RTC_ByteToBcd2>
 800271e:	4603      	mov	r3, r0
 8002720:	461a      	mov	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	91a2b3c5 	.word	0x91a2b3c5
 8002734:	88888889 	.word	0x88888889
 8002738:	aaaaaaab 	.word	0xaaaaaaab
 800273c:	00015180 	.word	0x00015180

08002740 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b089      	sub	sp, #36	; 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	2100      	movs	r1, #0
 8002756:	460a      	mov	r2, r1
 8002758:	801a      	strh	r2, [r3, #0]
 800275a:	460a      	mov	r2, r1
 800275c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <HAL_RTC_SetAlarm_IT+0x2a>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e096      	b.n	800289c <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	7c1b      	ldrb	r3, [r3, #16]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_RTC_SetAlarm_IT+0x3a>
 8002776:	2302      	movs	r3, #2
 8002778:	e090      	b.n	800289c <HAL_RTC_SetAlarm_IT+0x15c>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2202      	movs	r2, #2
 8002784:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	2200      	movs	r2, #0
 800278c:	4619      	mov	r1, r3
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f7ff fefe 	bl	8002590 <HAL_RTC_GetTime>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e07e      	b.n	800289c <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800279e:	7d3b      	ldrb	r3, [r7, #20]
 80027a0:	461a      	mov	r2, r3
 80027a2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80027a6:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80027aa:	7d7b      	ldrb	r3, [r7, #21]
 80027ac:	4619      	mov	r1, r3
 80027ae:	460b      	mov	r3, r1
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	1a5b      	subs	r3, r3, r1
 80027b4:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80027b6:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80027b8:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80027ba:	4413      	add	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d113      	bne.n	80027ec <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80027ce:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	785b      	ldrb	r3, [r3, #1]
 80027d6:	4619      	mov	r1, r3
 80027d8:	460b      	mov	r3, r1
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	1a5b      	subs	r3, r3, r1
 80027de:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80027e0:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80027e6:	4413      	add	r3, r2
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	e01e      	b.n	800282a <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 f9b2 	bl	8002b5a <RTC_Bcd2ToByte>
 80027f6:	4603      	mov	r3, r0
 80027f8:	461a      	mov	r2, r3
 80027fa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80027fe:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	785b      	ldrb	r3, [r3, #1]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f9a7 	bl	8002b5a <RTC_Bcd2ToByte>
 800280c:	4603      	mov	r3, r0
 800280e:	461a      	mov	r2, r3
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002818:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	789b      	ldrb	r3, [r3, #2]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f99b 	bl	8002b5a <RTC_Bcd2ToByte>
 8002824:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002826:	4423      	add	r3, r4
 8002828:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800282a:	69fa      	ldr	r2, [r7, #28]
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	429a      	cmp	r2, r3
 8002830:	d205      	bcs.n	800283e <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002838:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800283c:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800283e:	69f9      	ldr	r1, [r7, #28]
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f8f6 	bl	8002a32 <RTC_WriteAlarmCounter>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d007      	beq.n	800285c <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2204      	movs	r2, #4
 8002850:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e01f      	b.n	800289c <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0202 	mvn.w	r2, #2
 8002864:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0202 	orr.w	r2, r2, #2
 8002874:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002876:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <HAL_RTC_SetAlarm_IT+0x164>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <HAL_RTC_SetAlarm_IT+0x164>)
 800287c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002880:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_RTC_SetAlarm_IT+0x164>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <HAL_RTC_SetAlarm_IT+0x164>)
 8002888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800288c:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800289a:	2300      	movs	r3, #0
  }
}
 800289c:	4618      	mov	r0, r3
 800289e:	3724      	adds	r7, #36	; 0x24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd90      	pop	{r4, r7, pc}
 80028a4:	40010400 	.word	0x40010400

080028a8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00e      	beq.n	80028dc <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7fd fe83 	bl	80005d8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f06f 0202 	mvn.w	r2, #2
 80028da:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RTC_AlarmIRQHandler+0x4c>)
 80028de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028e2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	745a      	strb	r2, [r3, #17]
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40010400 	.word	0x40010400

080028f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e01d      	b.n	800294a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0208 	bic.w	r2, r2, #8
 800291c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800291e:	f7fe fca7 	bl	8001270 <HAL_GetTick>
 8002922:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002924:	e009      	b.n	800293a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002926:	f7fe fca3 	bl	8001270 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002934:	d901      	bls.n	800293a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e007      	b.n	800294a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ee      	beq.n	8002926 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002952:	b480      	push	{r7}
 8002954:	b087      	sub	sp, #28
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	827b      	strh	r3, [r7, #18]
 800295e:	2300      	movs	r3, #0
 8002960:	823b      	strh	r3, [r7, #16]
 8002962:	2300      	movs	r3, #0
 8002964:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002982:	8a7a      	ldrh	r2, [r7, #18]
 8002984:	8a3b      	ldrh	r3, [r7, #16]
 8002986:	429a      	cmp	r2, r3
 8002988:	d008      	beq.n	800299c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800298a:	8a3b      	ldrh	r3, [r7, #16]
 800298c:	041a      	lsls	r2, r3, #16
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	b29b      	uxth	r3, r3
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	e004      	b.n	80029a6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800299c:	8a7b      	ldrh	r3, [r7, #18]
 800299e:	041a      	lsls	r2, r3, #16
 80029a0:	89fb      	ldrh	r3, [r7, #14]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80029a6:	697b      	ldr	r3, [r7, #20]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f85d 	bl	8002a80 <RTC_EnterInitMode>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
 80029d0:	e011      	b.n	80029f6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	0c12      	lsrs	r2, r2, #16
 80029da:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	b292      	uxth	r2, r2
 80029e4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f872 	bl	8002ad0 <RTC_ExitInitMode>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	81fb      	strh	r3, [r7, #14]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002a20:	89fb      	ldrh	r3, [r7, #14]
 8002a22:	041a      	lsls	r2, r3, #16
 8002a24:	89bb      	ldrh	r3, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr

08002a32 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f81d 	bl	8002a80 <RTC_EnterInitMode>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
 8002a50:	e011      	b.n	8002a76 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	0c12      	lsrs	r2, r2, #16
 8002a5a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	b292      	uxth	r2, r2
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f832 	bl	8002ad0 <RTC_ExitInitMode>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002a8c:	f7fe fbf0 	bl	8001270 <HAL_GetTick>
 8002a90:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002a92:	e009      	b.n	8002aa8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002a94:	f7fe fbec 	bl	8001270 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aa2:	d901      	bls.n	8002aa8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e00f      	b.n	8002ac8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0ee      	beq.n	8002a94 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0210 	orr.w	r2, r2, #16
 8002ac4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0210 	bic.w	r2, r2, #16
 8002aea:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002aec:	f7fe fbc0 	bl	8001270 <HAL_GetTick>
 8002af0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002af2:	e009      	b.n	8002b08 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002af4:	f7fe fbbc 	bl	8001270 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b02:	d901      	bls.n	8002b08 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e007      	b.n	8002b18 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0ee      	beq.n	8002af4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002b2e:	e005      	b.n	8002b3c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3301      	adds	r3, #1
 8002b34:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	3b0a      	subs	r3, #10
 8002b3a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	2b09      	cmp	r3, #9
 8002b40:	d8f6      	bhi.n	8002b30 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	b2db      	uxtb	r3, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr

08002b5a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b085      	sub	sp, #20
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	4603      	mov	r3, r0
 8002b62:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	b2db      	uxtb	r3, r3
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	7bdb      	ldrb	r3, [r3, #15]
 8002bb2:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	7b5b      	ldrb	r3, [r3, #13]
 8002bb8:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	7b9b      	ldrb	r3, [r3, #14]
 8002bbe:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	e06f      	b.n	8002ca6 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d011      	beq.n	8002bf0 <RTC_DateUpdate+0x5c>
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d00e      	beq.n	8002bf0 <RTC_DateUpdate+0x5c>
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b05      	cmp	r3, #5
 8002bd6:	d00b      	beq.n	8002bf0 <RTC_DateUpdate+0x5c>
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b07      	cmp	r3, #7
 8002bdc:	d008      	beq.n	8002bf0 <RTC_DateUpdate+0x5c>
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d005      	beq.n	8002bf0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b0a      	cmp	r3, #10
 8002be8:	d002      	beq.n	8002bf0 <RTC_DateUpdate+0x5c>
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	2b0c      	cmp	r3, #12
 8002bee:	d117      	bne.n	8002c20 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b1e      	cmp	r3, #30
 8002bf4:	d803      	bhi.n	8002bfe <RTC_DateUpdate+0x6a>
      {
        day++;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002bfc:	e050      	b.n	8002ca0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	2b0c      	cmp	r3, #12
 8002c02:	d005      	beq.n	8002c10 <RTC_DateUpdate+0x7c>
        {
          month++;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	3301      	adds	r3, #1
 8002c08:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002c0e:	e047      	b.n	8002ca0 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002c10:	2301      	movs	r3, #1
 8002c12:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002c14:	2301      	movs	r3, #1
 8002c16:	60fb      	str	r3, [r7, #12]
          year++;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002c1e:	e03f      	b.n	8002ca0 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d008      	beq.n	8002c38 <RTC_DateUpdate+0xa4>
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	2b06      	cmp	r3, #6
 8002c2a:	d005      	beq.n	8002c38 <RTC_DateUpdate+0xa4>
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	2b09      	cmp	r3, #9
 8002c30:	d002      	beq.n	8002c38 <RTC_DateUpdate+0xa4>
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b0b      	cmp	r3, #11
 8002c36:	d10c      	bne.n	8002c52 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b1d      	cmp	r3, #29
 8002c3c:	d803      	bhi.n	8002c46 <RTC_DateUpdate+0xb2>
      {
        day++;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3301      	adds	r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002c44:	e02c      	b.n	8002ca0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002c50:	e026      	b.n	8002ca0 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d123      	bne.n	8002ca0 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b1b      	cmp	r3, #27
 8002c5c:	d803      	bhi.n	8002c66 <RTC_DateUpdate+0xd2>
      {
        day++;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3301      	adds	r3, #1
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	e01c      	b.n	8002ca0 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b1c      	cmp	r3, #28
 8002c6a:	d111      	bne.n	8002c90 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 f839 	bl	8002ce8 <RTC_IsLeapYear>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <RTC_DateUpdate+0xf0>
        {
          day++;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	e00d      	b.n	8002ca0 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	3301      	adds	r3, #1
 8002c88:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	e007      	b.n	8002ca0 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b1d      	cmp	r3, #29
 8002c94:	d104      	bne.n	8002ca0 <RTC_DateUpdate+0x10c>
      {
        month++;
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d38b      	bcc.n	8002bc6 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6978      	ldr	r0, [r7, #20]
 8002cd2:	f000 f83b 	bl	8002d4c <RTC_WeekDayNum>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	731a      	strb	r2, [r3, #12]
}
 8002cde:	bf00      	nop
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e01d      	b.n	8002d3e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	4a10      	ldr	r2, [pc, #64]	; (8002d48 <RTC_IsLeapYear+0x60>)
 8002d06:	fba2 1203 	umull	r1, r2, r2, r3
 8002d0a:	0952      	lsrs	r2, r2, #5
 8002d0c:	2164      	movs	r1, #100	; 0x64
 8002d0e:	fb01 f202 	mul.w	r2, r1, r2
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00f      	b.n	8002d3e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	4a09      	ldr	r2, [pc, #36]	; (8002d48 <RTC_IsLeapYear+0x60>)
 8002d22:	fba2 1203 	umull	r1, r2, r2, r3
 8002d26:	09d2      	lsrs	r2, r2, #7
 8002d28:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002d2c:	fb01 f202 	mul.w	r2, r1, r2
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002d3c:	2300      	movs	r3, #0
  }
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	51eb851f 	.word	0x51eb851f

08002d4c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	70fb      	strb	r3, [r7, #3]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002d6a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d82d      	bhi.n	8002dce <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	4a2c      	ldr	r2, [pc, #176]	; (8002e30 <RTC_WeekDayNum+0xe4>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	085a      	lsrs	r2, r3, #1
 8002d86:	78bb      	ldrb	r3, [r7, #2]
 8002d88:	441a      	add	r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	441a      	add	r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	089b      	lsrs	r3, r3, #2
 8002d94:	441a      	add	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	4926      	ldr	r1, [pc, #152]	; (8002e34 <RTC_WeekDayNum+0xe8>)
 8002d9c:	fba1 1303 	umull	r1, r3, r1, r3
 8002da0:	095b      	lsrs	r3, r3, #5
 8002da2:	1ad2      	subs	r2, r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	4922      	ldr	r1, [pc, #136]	; (8002e34 <RTC_WeekDayNum+0xe8>)
 8002daa:	fba1 1303 	umull	r1, r3, r1, r3
 8002dae:	09db      	lsrs	r3, r3, #7
 8002db0:	4413      	add	r3, r2
 8002db2:	1d1a      	adds	r2, r3, #4
 8002db4:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <RTC_WeekDayNum+0xec>)
 8002db6:	fba3 1302 	umull	r1, r3, r3, r2
 8002dba:	1ad1      	subs	r1, r2, r3
 8002dbc:	0849      	lsrs	r1, r1, #1
 8002dbe:	440b      	add	r3, r1
 8002dc0:	0899      	lsrs	r1, r3, #2
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	1a5b      	subs	r3, r3, r1
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e029      	b.n	8002e22 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	4a15      	ldr	r2, [pc, #84]	; (8002e30 <RTC_WeekDayNum+0xe4>)
 8002ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8002de0:	085a      	lsrs	r2, r3, #1
 8002de2:	78bb      	ldrb	r3, [r7, #2]
 8002de4:	441a      	add	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	441a      	add	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	441a      	add	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4910      	ldr	r1, [pc, #64]	; (8002e34 <RTC_WeekDayNum+0xe8>)
 8002df4:	fba1 1303 	umull	r1, r3, r1, r3
 8002df8:	095b      	lsrs	r3, r3, #5
 8002dfa:	1ad2      	subs	r2, r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	490d      	ldr	r1, [pc, #52]	; (8002e34 <RTC_WeekDayNum+0xe8>)
 8002e00:	fba1 1303 	umull	r1, r3, r1, r3
 8002e04:	09db      	lsrs	r3, r3, #7
 8002e06:	4413      	add	r3, r2
 8002e08:	1c9a      	adds	r2, r3, #2
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <RTC_WeekDayNum+0xec>)
 8002e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e10:	1ad1      	subs	r1, r2, r3
 8002e12:	0849      	lsrs	r1, r1, #1
 8002e14:	440b      	add	r3, r1
 8002e16:	0899      	lsrs	r1, r3, #2
 8002e18:	460b      	mov	r3, r1
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	1a5b      	subs	r3, r3, r1
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	b2db      	uxtb	r3, r3
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	38e38e39 	.word	0x38e38e39
 8002e34:	51eb851f 	.word	0x51eb851f
 8002e38:	24924925 	.word	0x24924925

08002e3c <HAL_RTCEx_SetSecond_IT>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSecond_IT(RTC_HandleTypeDef *hrtc)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check input parameters */
  if (hrtc == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RTCEx_SetSecond_IT+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e01a      	b.n	8002e84 <HAL_RTCEx_SetSecond_IT+0x48>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	7c1b      	ldrb	r3, [r3, #16]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_RTCEx_SetSecond_IT+0x1e>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e014      	b.n	8002e84 <HAL_RTCEx_SetSecond_IT+0x48>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	745a      	strb	r2, [r3, #17]

  /* Enable Second interuption */
  __HAL_RTC_SECOND_ENABLE_IT(hrtc, RTC_IT_SEC);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

  hrtc->State = HAL_RTC_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d024      	beq.n	8002eee <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01d      	beq.n	8002eee <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00b      	beq.n	8002ed8 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f821 	bl	8002f08 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f06f 0204 	mvn.w	r2, #4
 8002ece:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	745a      	strb	r2, [r3, #17]
 8002ed6:	e005      	b.n	8002ee4 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f80c 	bl	8002ef6 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0201 	mvn.w	r2, #1
 8002eec:	605a      	str	r2, [r3, #4]
    }
  }
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e041      	b.n	8002fb0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d106      	bne.n	8002f46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7fd fe8b 	bl	8000c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3304      	adds	r3, #4
 8002f56:	4619      	mov	r1, r3
 8002f58:	4610      	mov	r0, r2
 8002f5a:	f000 fc65 	bl	8003828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d001      	beq.n	8002fd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e032      	b.n	8003036 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a18      	ldr	r2, [pc, #96]	; (8003040 <HAL_TIM_Base_Start+0x88>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d00e      	beq.n	8003000 <HAL_TIM_Base_Start+0x48>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fea:	d009      	beq.n	8003000 <HAL_TIM_Base_Start+0x48>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a14      	ldr	r2, [pc, #80]	; (8003044 <HAL_TIM_Base_Start+0x8c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d004      	beq.n	8003000 <HAL_TIM_Base_Start+0x48>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a13      	ldr	r2, [pc, #76]	; (8003048 <HAL_TIM_Base_Start+0x90>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d111      	bne.n	8003024 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b06      	cmp	r3, #6
 8003010:	d010      	beq.n	8003034 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0201 	orr.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003022:	e007      	b.n	8003034 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	40012c00 	.word	0x40012c00
 8003044:	40000400 	.word	0x40000400
 8003048:	40000800 	.word	0x40000800

0800304c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b01      	cmp	r3, #1
 800305e:	d001      	beq.n	8003064 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e03a      	b.n	80030da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <HAL_TIM_Base_Start_IT+0x98>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d00e      	beq.n	80030a4 <HAL_TIM_Base_Start_IT+0x58>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308e:	d009      	beq.n	80030a4 <HAL_TIM_Base_Start_IT+0x58>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a14      	ldr	r2, [pc, #80]	; (80030e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d004      	beq.n	80030a4 <HAL_TIM_Base_Start_IT+0x58>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a13      	ldr	r2, [pc, #76]	; (80030ec <HAL_TIM_Base_Start_IT+0xa0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d111      	bne.n	80030c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b06      	cmp	r3, #6
 80030b4:	d010      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0201 	orr.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c6:	e007      	b.n	80030d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	40012c00 	.word	0x40012c00
 80030e8:	40000400 	.word	0x40000400
 80030ec:	40000800 	.word	0x40000800

080030f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e041      	b.n	8003186 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fd fdd8 	bl	8000ccc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3304      	adds	r3, #4
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f000 fb7a 	bl	8003828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d109      	bne.n	80031b4 <HAL_TIM_PWM_Start+0x24>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	bf14      	ite	ne
 80031ac:	2301      	movne	r3, #1
 80031ae:	2300      	moveq	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	e022      	b.n	80031fa <HAL_TIM_PWM_Start+0x6a>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d109      	bne.n	80031ce <HAL_TIM_PWM_Start+0x3e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	bf14      	ite	ne
 80031c6:	2301      	movne	r3, #1
 80031c8:	2300      	moveq	r3, #0
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	e015      	b.n	80031fa <HAL_TIM_PWM_Start+0x6a>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d109      	bne.n	80031e8 <HAL_TIM_PWM_Start+0x58>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	bf14      	ite	ne
 80031e0:	2301      	movne	r3, #1
 80031e2:	2300      	moveq	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	e008      	b.n	80031fa <HAL_TIM_PWM_Start+0x6a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e05e      	b.n	80032c0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d104      	bne.n	8003212 <HAL_TIM_PWM_Start+0x82>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003210:	e013      	b.n	800323a <HAL_TIM_PWM_Start+0xaa>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b04      	cmp	r3, #4
 8003216:	d104      	bne.n	8003222 <HAL_TIM_PWM_Start+0x92>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003220:	e00b      	b.n	800323a <HAL_TIM_PWM_Start+0xaa>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d104      	bne.n	8003232 <HAL_TIM_PWM_Start+0xa2>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003230:	e003      	b.n	800323a <HAL_TIM_PWM_Start+0xaa>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2202      	movs	r2, #2
 8003236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2201      	movs	r2, #1
 8003240:	6839      	ldr	r1, [r7, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fd70 	bl	8003d28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <HAL_TIM_PWM_Start+0x138>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d107      	bne.n	8003262 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003260:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a18      	ldr	r2, [pc, #96]	; (80032c8 <HAL_TIM_PWM_Start+0x138>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00e      	beq.n	800328a <HAL_TIM_PWM_Start+0xfa>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003274:	d009      	beq.n	800328a <HAL_TIM_PWM_Start+0xfa>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a14      	ldr	r2, [pc, #80]	; (80032cc <HAL_TIM_PWM_Start+0x13c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d004      	beq.n	800328a <HAL_TIM_PWM_Start+0xfa>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a12      	ldr	r2, [pc, #72]	; (80032d0 <HAL_TIM_PWM_Start+0x140>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d111      	bne.n	80032ae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b06      	cmp	r3, #6
 800329a:	d010      	beq.n	80032be <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ac:	e007      	b.n	80032be <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40012c00 	.word	0x40012c00
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40000800 	.word	0x40000800

080032d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d122      	bne.n	8003330 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d11b      	bne.n	8003330 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0202 	mvn.w	r2, #2
 8003300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fa6b 	bl	80037f2 <HAL_TIM_IC_CaptureCallback>
 800331c:	e005      	b.n	800332a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fa5e 	bl	80037e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fa6d 	bl	8003804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b04      	cmp	r3, #4
 800333c:	d122      	bne.n	8003384 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b04      	cmp	r3, #4
 800334a:	d11b      	bne.n	8003384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0204 	mvn.w	r2, #4
 8003354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fa41 	bl	80037f2 <HAL_TIM_IC_CaptureCallback>
 8003370:	e005      	b.n	800337e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fa34 	bl	80037e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fa43 	bl	8003804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b08      	cmp	r3, #8
 8003390:	d122      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b08      	cmp	r3, #8
 800339e:	d11b      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0208 	mvn.w	r2, #8
 80033a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2204      	movs	r2, #4
 80033ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fa17 	bl	80037f2 <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fa0a 	bl	80037e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fa19 	bl	8003804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d122      	bne.n	800342c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b10      	cmp	r3, #16
 80033f2:	d11b      	bne.n	800342c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0210 	mvn.w	r2, #16
 80033fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2208      	movs	r2, #8
 8003402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f9ed 	bl	80037f2 <HAL_TIM_IC_CaptureCallback>
 8003418:	e005      	b.n	8003426 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f9e0 	bl	80037e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f9ef 	bl	8003804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b01      	cmp	r3, #1
 8003438:	d10e      	bne.n	8003458 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b01      	cmp	r3, #1
 8003446:	d107      	bne.n	8003458 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0201 	mvn.w	r2, #1
 8003450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f9bb 	bl	80037ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003462:	2b80      	cmp	r3, #128	; 0x80
 8003464:	d10e      	bne.n	8003484 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003470:	2b80      	cmp	r3, #128	; 0x80
 8003472:	d107      	bne.n	8003484 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800347c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fcdd 	bl	8003e3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	d10e      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b40      	cmp	r3, #64	; 0x40
 800349e:	d107      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f9b3 	bl	8003816 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d10e      	bne.n	80034dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d107      	bne.n	80034dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0220 	mvn.w	r2, #32
 80034d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fca8 	bl	8003e2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e0ac      	b.n	8003658 <HAL_TIM_PWM_ConfigChannel+0x174>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b0c      	cmp	r3, #12
 800350a:	f200 809f 	bhi.w	800364c <HAL_TIM_PWM_ConfigChannel+0x168>
 800350e:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003514:	08003549 	.word	0x08003549
 8003518:	0800364d 	.word	0x0800364d
 800351c:	0800364d 	.word	0x0800364d
 8003520:	0800364d 	.word	0x0800364d
 8003524:	08003589 	.word	0x08003589
 8003528:	0800364d 	.word	0x0800364d
 800352c:	0800364d 	.word	0x0800364d
 8003530:	0800364d 	.word	0x0800364d
 8003534:	080035cb 	.word	0x080035cb
 8003538:	0800364d 	.word	0x0800364d
 800353c:	0800364d 	.word	0x0800364d
 8003540:	0800364d 	.word	0x0800364d
 8003544:	0800360b 	.word	0x0800360b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68b9      	ldr	r1, [r7, #8]
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f9cc 	bl	80038ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0208 	orr.w	r2, r2, #8
 8003562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0204 	bic.w	r2, r2, #4
 8003572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6999      	ldr	r1, [r3, #24]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	619a      	str	r2, [r3, #24]
      break;
 8003586:	e062      	b.n	800364e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fa12 	bl	80039b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699a      	ldr	r2, [r3, #24]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6999      	ldr	r1, [r3, #24]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	021a      	lsls	r2, r3, #8
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	619a      	str	r2, [r3, #24]
      break;
 80035c8:	e041      	b.n	800364e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fa5b 	bl	8003a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69da      	ldr	r2, [r3, #28]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0208 	orr.w	r2, r2, #8
 80035e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0204 	bic.w	r2, r2, #4
 80035f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69d9      	ldr	r1, [r3, #28]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	61da      	str	r2, [r3, #28]
      break;
 8003608:	e021      	b.n	800364e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	4618      	mov	r0, r3
 8003612:	f000 faa5 	bl	8003b60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69d9      	ldr	r1, [r3, #28]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	021a      	lsls	r2, r3, #8
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	61da      	str	r2, [r3, #28]
      break;
 800364a:	e000      	b.n	800364e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800364c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_TIM_ConfigClockSource+0x18>
 8003674:	2302      	movs	r3, #2
 8003676:	e0a6      	b.n	80037c6 <HAL_TIM_ConfigClockSource+0x166>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003696:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800369e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	d067      	beq.n	8003780 <HAL_TIM_ConfigClockSource+0x120>
 80036b0:	2b40      	cmp	r3, #64	; 0x40
 80036b2:	d80b      	bhi.n	80036cc <HAL_TIM_ConfigClockSource+0x6c>
 80036b4:	2b10      	cmp	r3, #16
 80036b6:	d073      	beq.n	80037a0 <HAL_TIM_ConfigClockSource+0x140>
 80036b8:	2b10      	cmp	r3, #16
 80036ba:	d802      	bhi.n	80036c2 <HAL_TIM_ConfigClockSource+0x62>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d06f      	beq.n	80037a0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80036c0:	e078      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	d06c      	beq.n	80037a0 <HAL_TIM_ConfigClockSource+0x140>
 80036c6:	2b30      	cmp	r3, #48	; 0x30
 80036c8:	d06a      	beq.n	80037a0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80036ca:	e073      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036cc:	2b70      	cmp	r3, #112	; 0x70
 80036ce:	d00d      	beq.n	80036ec <HAL_TIM_ConfigClockSource+0x8c>
 80036d0:	2b70      	cmp	r3, #112	; 0x70
 80036d2:	d804      	bhi.n	80036de <HAL_TIM_ConfigClockSource+0x7e>
 80036d4:	2b50      	cmp	r3, #80	; 0x50
 80036d6:	d033      	beq.n	8003740 <HAL_TIM_ConfigClockSource+0xe0>
 80036d8:	2b60      	cmp	r3, #96	; 0x60
 80036da:	d041      	beq.n	8003760 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80036dc:	e06a      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80036de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e2:	d066      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x152>
 80036e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e8:	d017      	beq.n	800371a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80036ea:	e063      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	6899      	ldr	r1, [r3, #8]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f000 faf5 	bl	8003cea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800370e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	609a      	str	r2, [r3, #8]
      break;
 8003718:	e04c      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6899      	ldr	r1, [r3, #8]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f000 fade 	bl	8003cea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800373c:	609a      	str	r2, [r3, #8]
      break;
 800373e:	e039      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	461a      	mov	r2, r3
 800374e:	f000 fa55 	bl	8003bfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2150      	movs	r1, #80	; 0x50
 8003758:	4618      	mov	r0, r3
 800375a:	f000 faac 	bl	8003cb6 <TIM_ITRx_SetConfig>
      break;
 800375e:	e029      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	461a      	mov	r2, r3
 800376e:	f000 fa73 	bl	8003c58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2160      	movs	r1, #96	; 0x60
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fa9c 	bl	8003cb6 <TIM_ITRx_SetConfig>
      break;
 800377e:	e019      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	6859      	ldr	r1, [r3, #4]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	461a      	mov	r2, r3
 800378e:	f000 fa35 	bl	8003bfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2140      	movs	r1, #64	; 0x40
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fa8c 	bl	8003cb6 <TIM_ITRx_SetConfig>
      break;
 800379e:	e009      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4619      	mov	r1, r3
 80037aa:	4610      	mov	r0, r2
 80037ac:	f000 fa83 	bl	8003cb6 <TIM_ITRx_SetConfig>
        break;
 80037b0:	e000      	b.n	80037b4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80037b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr

080037e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr

080037f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr

08003804 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr

08003816 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr

08003828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a29      	ldr	r2, [pc, #164]	; (80038e0 <TIM_Base_SetConfig+0xb8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00b      	beq.n	8003858 <TIM_Base_SetConfig+0x30>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003846:	d007      	beq.n	8003858 <TIM_Base_SetConfig+0x30>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a26      	ldr	r2, [pc, #152]	; (80038e4 <TIM_Base_SetConfig+0xbc>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <TIM_Base_SetConfig+0x30>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a25      	ldr	r2, [pc, #148]	; (80038e8 <TIM_Base_SetConfig+0xc0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d108      	bne.n	800386a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a1c      	ldr	r2, [pc, #112]	; (80038e0 <TIM_Base_SetConfig+0xb8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00b      	beq.n	800388a <TIM_Base_SetConfig+0x62>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003878:	d007      	beq.n	800388a <TIM_Base_SetConfig+0x62>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a19      	ldr	r2, [pc, #100]	; (80038e4 <TIM_Base_SetConfig+0xbc>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d003      	beq.n	800388a <TIM_Base_SetConfig+0x62>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a18      	ldr	r2, [pc, #96]	; (80038e8 <TIM_Base_SetConfig+0xc0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d108      	bne.n	800389c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a07      	ldr	r2, [pc, #28]	; (80038e0 <TIM_Base_SetConfig+0xb8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d103      	bne.n	80038d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	615a      	str	r2, [r3, #20]
}
 80038d6:	bf00      	nop
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr
 80038e0:	40012c00 	.word	0x40012c00
 80038e4:	40000400 	.word	0x40000400
 80038e8:	40000800 	.word	0x40000800

080038ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	f023 0201 	bic.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0303 	bic.w	r3, r3, #3
 8003922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f023 0302 	bic.w	r3, r3, #2
 8003934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a1c      	ldr	r2, [pc, #112]	; (80039b4 <TIM_OC1_SetConfig+0xc8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d10c      	bne.n	8003962 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f023 0308 	bic.w	r3, r3, #8
 800394e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f023 0304 	bic.w	r3, r3, #4
 8003960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <TIM_OC1_SetConfig+0xc8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d111      	bne.n	800398e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	621a      	str	r2, [r3, #32]
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40012c00 	.word	0x40012c00

080039b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f023 0210 	bic.w	r2, r3, #16
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f023 0320 	bic.w	r3, r3, #32
 8003a02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a1d      	ldr	r2, [pc, #116]	; (8003a88 <TIM_OC2_SetConfig+0xd0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d10d      	bne.n	8003a34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <TIM_OC2_SetConfig+0xd0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d113      	bne.n	8003a64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	621a      	str	r2, [r3, #32]
}
 8003a7e:	bf00      	nop
 8003a80:	371c      	adds	r7, #28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	40012c00 	.word	0x40012c00

08003a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <TIM_OC3_SetConfig+0xd0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10d      	bne.n	8003b06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <TIM_OC3_SetConfig+0xd0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d113      	bne.n	8003b36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	621a      	str	r2, [r3, #32]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40012c00 	.word	0x40012c00

08003b60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003baa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	031b      	lsls	r3, r3, #12
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a0f      	ldr	r2, [pc, #60]	; (8003bf8 <TIM_OC4_SetConfig+0x98>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d109      	bne.n	8003bd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	019b      	lsls	r3, r3, #6
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	621a      	str	r2, [r3, #32]
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr
 8003bf8:	40012c00 	.word	0x40012c00

08003bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	f023 0201 	bic.w	r2, r3, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f023 030a 	bic.w	r3, r3, #10
 8003c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	621a      	str	r2, [r3, #32]
}
 8003c4e:	bf00      	nop
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f023 0210 	bic.w	r2, r3, #16
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	031b      	lsls	r3, r3, #12
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	621a      	str	r2, [r3, #32]
}
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr

08003cb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b085      	sub	sp, #20
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ccc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f043 0307 	orr.w	r3, r3, #7
 8003cd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	609a      	str	r2, [r3, #8]
}
 8003ce0:	bf00      	nop
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr

08003cea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b087      	sub	sp, #28
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	021a      	lsls	r2, r3, #8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	609a      	str	r2, [r3, #8]
}
 8003d1e:	bf00      	nop
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a1a      	ldr	r2, [r3, #32]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	401a      	ands	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a1a      	ldr	r2, [r3, #32]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d60:	431a      	orrs	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	621a      	str	r2, [r3, #32]
}
 8003d66:	bf00      	nop
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr

08003d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e046      	b.n	8003e16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a16      	ldr	r2, [pc, #88]	; (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d00e      	beq.n	8003dea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d009      	beq.n	8003dea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d004      	beq.n	8003dea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a10      	ldr	r2, [pc, #64]	; (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d10c      	bne.n	8003e04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003df0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	40000400 	.word	0x40000400
 8003e28:	40000800 	.word	0x40000800

08003e2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr

08003e3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <__libc_init_array>:
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	2500      	movs	r5, #0
 8003e54:	4e0c      	ldr	r6, [pc, #48]	; (8003e88 <__libc_init_array+0x38>)
 8003e56:	4c0d      	ldr	r4, [pc, #52]	; (8003e8c <__libc_init_array+0x3c>)
 8003e58:	1ba4      	subs	r4, r4, r6
 8003e5a:	10a4      	asrs	r4, r4, #2
 8003e5c:	42a5      	cmp	r5, r4
 8003e5e:	d109      	bne.n	8003e74 <__libc_init_array+0x24>
 8003e60:	f000 f822 	bl	8003ea8 <_init>
 8003e64:	2500      	movs	r5, #0
 8003e66:	4e0a      	ldr	r6, [pc, #40]	; (8003e90 <__libc_init_array+0x40>)
 8003e68:	4c0a      	ldr	r4, [pc, #40]	; (8003e94 <__libc_init_array+0x44>)
 8003e6a:	1ba4      	subs	r4, r4, r6
 8003e6c:	10a4      	asrs	r4, r4, #2
 8003e6e:	42a5      	cmp	r5, r4
 8003e70:	d105      	bne.n	8003e7e <__libc_init_array+0x2e>
 8003e72:	bd70      	pop	{r4, r5, r6, pc}
 8003e74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e78:	4798      	blx	r3
 8003e7a:	3501      	adds	r5, #1
 8003e7c:	e7ee      	b.n	8003e5c <__libc_init_array+0xc>
 8003e7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e82:	4798      	blx	r3
 8003e84:	3501      	adds	r5, #1
 8003e86:	e7f2      	b.n	8003e6e <__libc_init_array+0x1e>
 8003e88:	08003f18 	.word	0x08003f18
 8003e8c:	08003f18 	.word	0x08003f18
 8003e90:	08003f18 	.word	0x08003f18
 8003e94:	08003f1c 	.word	0x08003f1c

08003e98 <memset>:
 8003e98:	4603      	mov	r3, r0
 8003e9a:	4402      	add	r2, r0
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d100      	bne.n	8003ea2 <memset+0xa>
 8003ea0:	4770      	bx	lr
 8003ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea6:	e7f9      	b.n	8003e9c <memset+0x4>

08003ea8 <_init>:
 8003ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eaa:	bf00      	nop
 8003eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eae:	bc08      	pop	{r3}
 8003eb0:	469e      	mov	lr, r3
 8003eb2:	4770      	bx	lr

08003eb4 <_fini>:
 8003eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb6:	bf00      	nop
 8003eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eba:	bc08      	pop	{r3}
 8003ebc:	469e      	mov	lr, r3
 8003ebe:	4770      	bx	lr
